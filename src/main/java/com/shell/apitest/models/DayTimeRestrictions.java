/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for DayTimeRestrictions type.
 */
public class DayTimeRestrictions {
    private Boolean friday;
    private Boolean monday;
    private Boolean saturday;
    private Boolean sunday;
    private Boolean thursday;
    private OptionalNullable<String> timeFrom;
    private OptionalNullable<String> timeTo;
    private Boolean tuesday;
    private Boolean wednesday;

    /**
     * Default constructor.
     */
    public DayTimeRestrictions() {
        friday = false;
        monday = false;
        saturday = false;
        sunday = false;
        thursday = false;
        tuesday = false;
        wednesday = false;
    }

    /**
     * Initialization constructor.
     * @param  friday  Boolean value for friday.
     * @param  monday  Boolean value for monday.
     * @param  saturday  Boolean value for saturday.
     * @param  sunday  Boolean value for sunday.
     * @param  thursday  Boolean value for thursday.
     * @param  timeFrom  String value for timeFrom.
     * @param  timeTo  String value for timeTo.
     * @param  tuesday  Boolean value for tuesday.
     * @param  wednesday  Boolean value for wednesday.
     */
    public DayTimeRestrictions(
            Boolean friday,
            Boolean monday,
            Boolean saturday,
            Boolean sunday,
            Boolean thursday,
            String timeFrom,
            String timeTo,
            Boolean tuesday,
            Boolean wednesday) {
        this.friday = friday;
        this.monday = monday;
        this.saturday = saturday;
        this.sunday = sunday;
        this.thursday = thursday;
        this.timeFrom = OptionalNullable.of(timeFrom);
        this.timeTo = OptionalNullable.of(timeTo);
        this.tuesday = tuesday;
        this.wednesday = wednesday;
    }

    /**
     * Initialization constructor.
     * @param  friday  Boolean value for friday.
     * @param  monday  Boolean value for monday.
     * @param  saturday  Boolean value for saturday.
     * @param  sunday  Boolean value for sunday.
     * @param  thursday  Boolean value for thursday.
     * @param  timeFrom  String value for timeFrom.
     * @param  timeTo  String value for timeTo.
     * @param  tuesday  Boolean value for tuesday.
     * @param  wednesday  Boolean value for wednesday.
     */

    protected DayTimeRestrictions(Boolean friday, Boolean monday, Boolean saturday, Boolean sunday,
            Boolean thursday, OptionalNullable<String> timeFrom, OptionalNullable<String> timeTo,
            Boolean tuesday, Boolean wednesday) {
        this.friday = friday;
        this.monday = monday;
        this.saturday = saturday;
        this.sunday = sunday;
        this.thursday = thursday;
        this.timeFrom = timeFrom;
        this.timeTo = timeTo;
        this.tuesday = tuesday;
        this.wednesday = wednesday;
    }

    /**
     * Getter for Friday.
     * True/False. True if card could be used on a Friday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Friday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFriday() {
        return friday;
    }

    /**
     * Setter for Friday.
     * True/False. True if card could be used on a Friday, else false. Default value: false.
     * @param friday Value for Boolean
     */
    @JsonSetter("Friday")
    public void setFriday(Boolean friday) {
        this.friday = friday;
    }

    /**
     * Getter for Monday.
     * True/False. True if card could be used on a Monday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Monday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMonday() {
        return monday;
    }

    /**
     * Setter for Monday.
     * True/False. True if card could be used on a Monday, else false. Default value: false.
     * @param monday Value for Boolean
     */
    @JsonSetter("Monday")
    public void setMonday(Boolean monday) {
        this.monday = monday;
    }

    /**
     * Getter for Saturday.
     * True/False. True if card could be used on a Saturday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Saturday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSaturday() {
        return saturday;
    }

    /**
     * Setter for Saturday.
     * True/False. True if card could be used on a Saturday, else false. Default value: false.
     * @param saturday Value for Boolean
     */
    @JsonSetter("Saturday")
    public void setSaturday(Boolean saturday) {
        this.saturday = saturday;
    }

    /**
     * Getter for Sunday.
     * True/False. True if card could be used on a Sunday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Sunday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSunday() {
        return sunday;
    }

    /**
     * Setter for Sunday.
     * True/False. True if card could be used on a Sunday, else false. Default value: false.
     * @param sunday Value for Boolean
     */
    @JsonSetter("Sunday")
    public void setSunday(Boolean sunday) {
        this.sunday = sunday;
    }

    /**
     * Getter for Thursday.
     * True/False. True if card could be used on a Thursday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Thursday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getThursday() {
        return thursday;
    }

    /**
     * Setter for Thursday.
     * True/False. True if card could be used on a Thursday, else false. Default value: false.
     * @param thursday Value for Boolean
     */
    @JsonSetter("Thursday")
    public void setThursday(Boolean thursday) {
        this.thursday = thursday;
    }

    /**
     * Internal Getter for TimeFrom.
     * Card could be used from this time in a day. Mandatory if TimeTo is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     * @return Returns the Internal String
     */
    @JsonGetter("TimeFrom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTimeFrom() {
        return this.timeFrom;
    }

    /**
     * Getter for TimeFrom.
     * Card could be used from this time in a day. Mandatory if TimeTo is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     * @return Returns the String
     */
    public String getTimeFrom() {
        return OptionalNullable.getFrom(timeFrom);
    }

    /**
     * Setter for TimeFrom.
     * Card could be used from this time in a day. Mandatory if TimeTo is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     * @param timeFrom Value for String
     */
    @JsonSetter("TimeFrom")
    public void setTimeFrom(String timeFrom) {
        this.timeFrom = OptionalNullable.of(timeFrom);
    }

    /**
     * UnSetter for TimeFrom.
     * Card could be used from this time in a day. Mandatory if TimeTo is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     */
    public void unsetTimeFrom() {
        timeFrom = null;
    }

    /**
     * Internal Getter for TimeTo.
     * Card could be used up to this time in a day. Mandatory if TimeFrom is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     * @return Returns the Internal String
     */
    @JsonGetter("TimeTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTimeTo() {
        return this.timeTo;
    }

    /**
     * Getter for TimeTo.
     * Card could be used up to this time in a day. Mandatory if TimeFrom is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     * @return Returns the String
     */
    public String getTimeTo() {
        return OptionalNullable.getFrom(timeTo);
    }

    /**
     * Setter for TimeTo.
     * Card could be used up to this time in a day. Mandatory if TimeFrom is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     * @param timeTo Value for String
     */
    @JsonSetter("TimeTo")
    public void setTimeTo(String timeTo) {
        this.timeTo = OptionalNullable.of(timeTo);
    }

    /**
     * UnSetter for TimeTo.
     * Card could be used up to this time in a day. Mandatory if TimeFrom is passed, else optional.
     * Format: HH:mm (24-hour format) Note: 2.	“00:00” is the lowest time value and “23:59” is the
     * highest time value. To allow card to be used throughout the day pass null in TimeFrom and
     * TimeTo.
     */
    public void unsetTimeTo() {
        timeTo = null;
    }

    /**
     * Getter for Tuesday.
     * True/False. True if card could be used on a Tuesday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Tuesday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTuesday() {
        return tuesday;
    }

    /**
     * Setter for Tuesday.
     * True/False. True if card could be used on a Tuesday, else false. Default value: false.
     * @param tuesday Value for Boolean
     */
    @JsonSetter("Tuesday")
    public void setTuesday(Boolean tuesday) {
        this.tuesday = tuesday;
    }

    /**
     * Getter for Wednesday.
     * True/False. True if card could be used on a Wednesday, else false. Default value: false.
     * @return Returns the Boolean
     */
    @JsonGetter("Wednesday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getWednesday() {
        return wednesday;
    }

    /**
     * Setter for Wednesday.
     * True/False. True if card could be used on a Wednesday, else false. Default value: false.
     * @param wednesday Value for Boolean
     */
    @JsonSetter("Wednesday")
    public void setWednesday(Boolean wednesday) {
        this.wednesday = wednesday;
    }

    /**
     * Converts this DayTimeRestrictions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DayTimeRestrictions [" + "friday=" + friday + ", monday=" + monday + ", saturday="
                + saturday + ", sunday=" + sunday + ", thursday=" + thursday + ", timeFrom="
                + timeFrom + ", timeTo=" + timeTo + ", tuesday=" + tuesday + ", wednesday="
                + wednesday + "]";
    }

    /**
     * Builds a new {@link DayTimeRestrictions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DayTimeRestrictions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .friday(getFriday())
                .monday(getMonday())
                .saturday(getSaturday())
                .sunday(getSunday())
                .thursday(getThursday())
                .tuesday(getTuesday())
                .wednesday(getWednesday());
        builder.timeFrom = internalGetTimeFrom();
        builder.timeTo = internalGetTimeTo();
        return builder;
    }

    /**
     * Class to build instances of {@link DayTimeRestrictions}.
     */
    public static class Builder {
        private Boolean friday = false;
        private Boolean monday = false;
        private Boolean saturday = false;
        private Boolean sunday = false;
        private Boolean thursday = false;
        private OptionalNullable<String> timeFrom;
        private OptionalNullable<String> timeTo;
        private Boolean tuesday = false;
        private Boolean wednesday = false;



        /**
         * Setter for friday.
         * @param  friday  Boolean value for friday.
         * @return Builder
         */
        public Builder friday(Boolean friday) {
            this.friday = friday;
            return this;
        }

        /**
         * Setter for monday.
         * @param  monday  Boolean value for monday.
         * @return Builder
         */
        public Builder monday(Boolean monday) {
            this.monday = monday;
            return this;
        }

        /**
         * Setter for saturday.
         * @param  saturday  Boolean value for saturday.
         * @return Builder
         */
        public Builder saturday(Boolean saturday) {
            this.saturday = saturday;
            return this;
        }

        /**
         * Setter for sunday.
         * @param  sunday  Boolean value for sunday.
         * @return Builder
         */
        public Builder sunday(Boolean sunday) {
            this.sunday = sunday;
            return this;
        }

        /**
         * Setter for thursday.
         * @param  thursday  Boolean value for thursday.
         * @return Builder
         */
        public Builder thursday(Boolean thursday) {
            this.thursday = thursday;
            return this;
        }

        /**
         * Setter for timeFrom.
         * @param  timeFrom  String value for timeFrom.
         * @return Builder
         */
        public Builder timeFrom(String timeFrom) {
            this.timeFrom = OptionalNullable.of(timeFrom);
            return this;
        }

        /**
         * UnSetter for timeFrom.
         * @return Builder
         */
        public Builder unsetTimeFrom() {
            timeFrom = null;
            return this;
        }

        /**
         * Setter for timeTo.
         * @param  timeTo  String value for timeTo.
         * @return Builder
         */
        public Builder timeTo(String timeTo) {
            this.timeTo = OptionalNullable.of(timeTo);
            return this;
        }

        /**
         * UnSetter for timeTo.
         * @return Builder
         */
        public Builder unsetTimeTo() {
            timeTo = null;
            return this;
        }

        /**
         * Setter for tuesday.
         * @param  tuesday  Boolean value for tuesday.
         * @return Builder
         */
        public Builder tuesday(Boolean tuesday) {
            this.tuesday = tuesday;
            return this;
        }

        /**
         * Setter for wednesday.
         * @param  wednesday  Boolean value for wednesday.
         * @return Builder
         */
        public Builder wednesday(Boolean wednesday) {
            this.wednesday = wednesday;
            return this;
        }

        /**
         * Builds a new {@link DayTimeRestrictions} object using the set fields.
         * @return {@link DayTimeRestrictions}
         */
        public DayTimeRestrictions build() {
            return new DayTimeRestrictions(friday, monday, saturday, sunday, thursday, timeFrom,
                    timeTo, tuesday, wednesday);
        }
    }
}
