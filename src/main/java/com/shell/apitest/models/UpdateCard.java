/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for UpdateCard type.
 */
public class UpdateCard {
    private OptionalNullable<String> caller;
    private Boolean isReplacementChargeable;
    private Boolean notifyCaller;
    private Boolean notifyCallerOnSync;
    private Boolean orderCardReplacement;
    private CardSettings cardSettings;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> cardExpiryDate;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<String> pAN;
    private OptionalNullable<Double> pANID;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;

    /**
     * Default constructor.
     */
    public UpdateCard() {
    }

    /**
     * Initialization constructor.
     * @param  caller  String value for caller.
     * @param  isReplacementChargeable  Boolean value for isReplacementChargeable.
     * @param  notifyCaller  Boolean value for notifyCaller.
     * @param  notifyCallerOnSync  Boolean value for notifyCallerOnSync.
     * @param  orderCardReplacement  Boolean value for orderCardReplacement.
     * @param  cardSettings  CardSettings value for cardSettings.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardExpiryDate  String value for cardExpiryDate.
     * @param  cardId  Integer value for cardId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  pAN  String value for pAN.
     * @param  pANID  Double value for pANID.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     */
    public UpdateCard(
            String caller,
            Boolean isReplacementChargeable,
            Boolean notifyCaller,
            Boolean notifyCallerOnSync,
            Boolean orderCardReplacement,
            CardSettings cardSettings,
            Integer accountId,
            String accountNumber,
            String cardExpiryDate,
            Integer cardId,
            Integer colCoCode,
            Integer colCoId,
            String pAN,
            Double pANID,
            Integer payerId,
            String payerNumber) {
        this.caller = OptionalNullable.of(caller);
        this.isReplacementChargeable = isReplacementChargeable;
        this.notifyCaller = notifyCaller;
        this.notifyCallerOnSync = notifyCallerOnSync;
        this.orderCardReplacement = orderCardReplacement;
        this.cardSettings = cardSettings;
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.cardExpiryDate = OptionalNullable.of(cardExpiryDate);
        this.cardId = OptionalNullable.of(cardId);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.colCoId = OptionalNullable.of(colCoId);
        this.pAN = OptionalNullable.of(pAN);
        this.pANID = OptionalNullable.of(pANID);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * Initialization constructor.
     * @param  caller  String value for caller.
     * @param  isReplacementChargeable  Boolean value for isReplacementChargeable.
     * @param  notifyCaller  Boolean value for notifyCaller.
     * @param  notifyCallerOnSync  Boolean value for notifyCallerOnSync.
     * @param  orderCardReplacement  Boolean value for orderCardReplacement.
     * @param  cardSettings  CardSettings value for cardSettings.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardExpiryDate  String value for cardExpiryDate.
     * @param  cardId  Integer value for cardId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  pAN  String value for pAN.
     * @param  pANID  Double value for pANID.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     */

    protected UpdateCard(OptionalNullable<String> caller, Boolean isReplacementChargeable,
            Boolean notifyCaller, Boolean notifyCallerOnSync, Boolean orderCardReplacement,
            CardSettings cardSettings, OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<String> cardExpiryDate,
            OptionalNullable<Integer> cardId, OptionalNullable<Integer> colCoCode,
            OptionalNullable<Integer> colCoId, OptionalNullable<String> pAN,
            OptionalNullable<Double> pANID, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber) {
        this.caller = caller;
        this.isReplacementChargeable = isReplacementChargeable;
        this.notifyCaller = notifyCaller;
        this.notifyCallerOnSync = notifyCallerOnSync;
        this.orderCardReplacement = orderCardReplacement;
        this.cardSettings = cardSettings;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.cardExpiryDate = cardExpiryDate;
        this.cardId = cardId;
        this.colCoCode = colCoCode;
        this.colCoId = colCoId;
        this.pAN = pAN;
        this.pANID = pANID;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
    }

    /**
     * Internal Getter for Caller.
     * The caller to be notified with the status of the update card status request. &lt;br /&gt; The
     * caller will also be notified with the status of the replacement card order request, if
     * any.&lt;br /&gt; Mandatory, if NotifyCaller is true. &lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed
     * values:&lt;br /&gt; - NextGenUI: This value to be used by next gen UI application.&lt;br /&gt; - Motix:
     * This value to be used by MOTiX application.&lt;br /&gt; - FleetHubUILifeTime: This value to be used
     * by Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive.
     * @return Returns the Internal String
     */
    @JsonGetter("Caller")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCaller() {
        return this.caller;
    }

    /**
     * Getter for Caller.
     * The caller to be notified with the status of the update card status request. &lt;br /&gt; The
     * caller will also be notified with the status of the replacement card order request, if
     * any.&lt;br /&gt; Mandatory, if NotifyCaller is true. &lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed
     * values:&lt;br /&gt; - NextGenUI: This value to be used by next gen UI application.&lt;br /&gt; - Motix:
     * This value to be used by MOTiX application.&lt;br /&gt; - FleetHubUILifeTime: This value to be used
     * by Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive.
     * @return Returns the String
     */
    public String getCaller() {
        return OptionalNullable.getFrom(caller);
    }

    /**
     * Setter for Caller.
     * The caller to be notified with the status of the update card status request. &lt;br /&gt; The
     * caller will also be notified with the status of the replacement card order request, if
     * any.&lt;br /&gt; Mandatory, if NotifyCaller is true. &lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed
     * values:&lt;br /&gt; - NextGenUI: This value to be used by next gen UI application.&lt;br /&gt; - Motix:
     * This value to be used by MOTiX application.&lt;br /&gt; - FleetHubUILifeTime: This value to be used
     * by Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive.
     * @param caller Value for String
     */
    @JsonSetter("Caller")
    public void setCaller(String caller) {
        this.caller = OptionalNullable.of(caller);
    }

    /**
     * UnSetter for Caller.
     * The caller to be notified with the status of the update card status request. &lt;br /&gt; The
     * caller will also be notified with the status of the replacement card order request, if
     * any.&lt;br /&gt; Mandatory, if NotifyCaller is true. &lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed
     * values:&lt;br /&gt; - NextGenUI: This value to be used by next gen UI application.&lt;br /&gt; - Motix:
     * This value to be used by MOTiX application.&lt;br /&gt; - FleetHubUILifeTime: This value to be used
     * by Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive.
     */
    public void unsetCaller() {
        caller = null;
    }

    /**
     * Getter for IsReplacementChargeable.
     * True/False&lt;br /&gt; Optional&lt;br /&gt; When not provided will considered as default value as
     * True.&lt;br /&gt; If passed True, the replacement card will be chargeable, else replacement card
     * will not be charged.
     * @return Returns the Boolean
     */
    @JsonGetter("IsReplacementChargeable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsReplacementChargeable() {
        return isReplacementChargeable;
    }

    /**
     * Setter for IsReplacementChargeable.
     * True/False&lt;br /&gt; Optional&lt;br /&gt; When not provided will considered as default value as
     * True.&lt;br /&gt; If passed True, the replacement card will be chargeable, else replacement card
     * will not be charged.
     * @param isReplacementChargeable Value for Boolean
     */
    @JsonSetter("IsReplacementChargeable")
    public void setIsReplacementChargeable(Boolean isReplacementChargeable) {
        this.isReplacementChargeable = isReplacementChargeable;
    }

    /**
     * Getter for NotifyCaller.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failure after the update card status request is processed.
     * Notification API subscription required to use this feature , please refer API documetation
     * for more details
     * @return Returns the Boolean
     */
    @JsonGetter("NotifyCaller")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNotifyCaller() {
        return notifyCaller;
    }

    /**
     * Setter for NotifyCaller.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failure after the update card status request is processed.
     * Notification API subscription required to use this feature , please refer API documetation
     * for more details
     * @param notifyCaller Value for Boolean
     */
    @JsonSetter("NotifyCaller")
    public void setNotifyCaller(Boolean notifyCaller) {
        this.notifyCaller = notifyCaller;
    }

    /**
     * Getter for NotifyCallerOnSync.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failed after the replacement card is synced with Gateway,
     * if a replacement card was requested.
     * @return Returns the Boolean
     */
    @JsonGetter("NotifyCallerOnSync")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNotifyCallerOnSync() {
        return notifyCallerOnSync;
    }

    /**
     * Setter for NotifyCallerOnSync.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failed after the replacement card is synced with Gateway,
     * if a replacement card was requested.
     * @param notifyCallerOnSync Value for Boolean
     */
    @JsonSetter("NotifyCallerOnSync")
    public void setNotifyCallerOnSync(Boolean notifyCallerOnSync) {
        this.notifyCallerOnSync = notifyCallerOnSync;
    }

    /**
     * Getter for OrderCardReplacement.
     * True/False.&lt;br /&gt; Pass True if a replacement order card request is to be placed, else
     * False.&lt;br /&gt; Optional.Default value False.&lt;br /&gt; Replacement of a card is only applicable
     * when the target status requested is either permanently Block or Damaged for the existing
     * card.&lt;br /&gt; Request for Replacement card will be placed only when the Block card or Block
     * damaged card request is successfully placed.&lt;br /&gt; The Replacement card request will be
     * processed only when the permanent Block card request is successfully processed. &lt;br /&gt; In
     * case of damaged card request, the replacement card request will be processed immediately.
     * @return Returns the Boolean
     */
    @JsonGetter("OrderCardReplacement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getOrderCardReplacement() {
        return orderCardReplacement;
    }

    /**
     * Setter for OrderCardReplacement.
     * True/False.&lt;br /&gt; Pass True if a replacement order card request is to be placed, else
     * False.&lt;br /&gt; Optional.Default value False.&lt;br /&gt; Replacement of a card is only applicable
     * when the target status requested is either permanently Block or Damaged for the existing
     * card.&lt;br /&gt; Request for Replacement card will be placed only when the Block card or Block
     * damaged card request is successfully placed.&lt;br /&gt; The Replacement card request will be
     * processed only when the permanent Block card request is successfully processed. &lt;br /&gt; In
     * case of damaged card request, the replacement card request will be processed immediately.
     * @param orderCardReplacement Value for Boolean
     */
    @JsonSetter("OrderCardReplacement")
    public void setOrderCardReplacement(Boolean orderCardReplacement) {
        this.orderCardReplacement = orderCardReplacement;
    }

    /**
     * Getter for CardSettings.
     * @return Returns the CardSettings
     */
    @JsonGetter("CardSettings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CardSettings getCardSettings() {
        return cardSettings;
    }

    /**
     * Setter for CardSettings.
     * @param cardSettings Value for CardSettings
     */
    @JsonSetter("CardSettings")
    public void setCardSettings(CardSettings cardSettings) {
        this.cardSettings = cardSettings;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else Mandatory.
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else Mandatory.
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else Mandatory.
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else Mandatory.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else Mandatory.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else Mandatory.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else Mandatory.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for CardExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Mandatory if PAN is passed, else optional.&lt;br /&gt; Format:
     * yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("CardExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardExpiryDate() {
        return this.cardExpiryDate;
    }

    /**
     * Getter for CardExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Mandatory if PAN is passed, else optional.&lt;br /&gt; Format:
     * yyyyMMdd
     * @return Returns the String
     */
    public String getCardExpiryDate() {
        return OptionalNullable.getFrom(cardExpiryDate);
    }

    /**
     * Setter for CardExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Mandatory if PAN is passed, else optional.&lt;br /&gt; Format:
     * yyyyMMdd
     * @param cardExpiryDate Value for String
     */
    @JsonSetter("CardExpiryDate")
    public void setCardExpiryDate(String cardExpiryDate) {
        this.cardExpiryDate = OptionalNullable.of(cardExpiryDate);
    }

    /**
     * UnSetter for CardExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Mandatory if PAN is passed, else optional.&lt;br /&gt; Format:
     * yyyyMMdd
     */
    public void unsetCardExpiryDate() {
        cardExpiryDate = null;
    }

    /**
     * Internal Getter for CardId.
     * Card Id of the card.&lt;br /&gt; Optional if PAN is passed, else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Card Id of the card.&lt;br /&gt; Optional if PAN is passed, else Mandatory.
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Card Id of the card.&lt;br /&gt; Optional if PAN is passed, else Mandatory.
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Card Id of the card.&lt;br /&gt; Optional if PAN is passed, else Mandatory.
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting company code of the customer. &lt;br /&gt; Optional if ColCoId is passed, else
     * Mandatory.&lt;br /&gt;
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting company code of the customer. &lt;br /&gt; Optional if ColCoId is passed, else
     * Mandatory.&lt;br /&gt;
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting company code of the customer. &lt;br /&gt; Optional if ColCoId is passed, else
     * Mandatory.&lt;br /&gt;
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting company code of the customer. &lt;br /&gt; Optional if ColCoId is passed, else
     * Mandatory.&lt;br /&gt;
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting company id of the customer. &lt;br /&gt; Optional if ColCoCode is passed, else
     * Mandatory.&lt;br /&gt;
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting company id of the customer. &lt;br /&gt; Optional if ColCoCode is passed, else
     * Mandatory.&lt;br /&gt;
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting company id of the customer. &lt;br /&gt; Optional if ColCoCode is passed, else
     * Mandatory.&lt;br /&gt;
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting company id of the customer. &lt;br /&gt; Optional if ColCoCode is passed, else
     * Mandatory.&lt;br /&gt;
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for PAN.
     * PAN of the card.&lt;br /&gt; Optional if CardId is passed, else Mandatory.&lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("PAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPAN() {
        return this.pAN;
    }

    /**
     * Getter for PAN.
     * PAN of the card.&lt;br /&gt; Optional if CardId is passed, else Mandatory.&lt;br /&gt;
     * @return Returns the String
     */
    public String getPAN() {
        return OptionalNullable.getFrom(pAN);
    }

    /**
     * Setter for PAN.
     * PAN of the card.&lt;br /&gt; Optional if CardId is passed, else Mandatory.&lt;br /&gt;
     * @param pAN Value for String
     */
    @JsonSetter("PAN")
    public void setPAN(String pAN) {
        this.pAN = OptionalNullable.of(pAN);
    }

    /**
     * UnSetter for PAN.
     * PAN of the card.&lt;br /&gt; Optional if CardId is passed, else Mandatory.&lt;br /&gt;
     */
    public void unsetPAN() {
        pAN = null;
    }

    /**
     * Internal Getter for PANID.
     * PANID of the card
     * @return Returns the Internal Double
     */
    @JsonGetter("PANID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetPANID() {
        return this.pANID;
    }

    /**
     * Getter for PANID.
     * PANID of the card
     * @return Returns the Double
     */
    public Double getPANID() {
        return OptionalNullable.getFrom(pANID);
    }

    /**
     * Setter for PANID.
     * PANID of the card
     * @param pANID Value for Double
     */
    @JsonSetter("PANID")
    public void setPANID(Double pANID) {
        this.pANID = OptionalNullable.of(pANID);
    }

    /**
     * UnSetter for PANID.
     * PANID of the card
     */
    public void unsetPANID() {
        pANID = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer id of the customer.&lt;br /&gt; Optional if PayerNumber is passed, else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer id of the customer.&lt;br /&gt; Optional if PayerNumber is passed, else Mandatory.
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer id of the customer.&lt;br /&gt; Optional if PayerNumber is passed, else Mandatory.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer id of the customer.&lt;br /&gt; Optional if PayerNumber is passed, else Mandatory.
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * PayerNumber of the customer.&lt;br /&gt; Optional if PayerId is passed, else Mandatory.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * PayerNumber of the customer.&lt;br /&gt; Optional if PayerId is passed, else Mandatory.
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * PayerNumber of the customer.&lt;br /&gt; Optional if PayerId is passed, else Mandatory.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * PayerNumber of the customer.&lt;br /&gt; Optional if PayerId is passed, else Mandatory.
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Converts this UpdateCard into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UpdateCard [" + "caller=" + caller + ", isReplacementChargeable="
                + isReplacementChargeable + ", notifyCaller=" + notifyCaller
                + ", notifyCallerOnSync=" + notifyCallerOnSync + ", orderCardReplacement="
                + orderCardReplacement + ", cardSettings=" + cardSettings + ", accountId="
                + accountId + ", accountNumber=" + accountNumber + ", cardExpiryDate="
                + cardExpiryDate + ", cardId=" + cardId + ", colCoCode=" + colCoCode + ", colCoId="
                + colCoId + ", pAN=" + pAN + ", pANID=" + pANID + ", payerId=" + payerId
                + ", payerNumber=" + payerNumber + "]";
    }

    /**
     * Builds a new {@link UpdateCard.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UpdateCard.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .isReplacementChargeable(getIsReplacementChargeable())
                .notifyCaller(getNotifyCaller())
                .notifyCallerOnSync(getNotifyCallerOnSync())
                .orderCardReplacement(getOrderCardReplacement())
                .cardSettings(getCardSettings());
        builder.caller = internalGetCaller();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.cardExpiryDate = internalGetCardExpiryDate();
        builder.cardId = internalGetCardId();
        builder.colCoCode = internalGetColCoCode();
        builder.colCoId = internalGetColCoId();
        builder.pAN = internalGetPAN();
        builder.pANID = internalGetPANID();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        return builder;
    }

    /**
     * Class to build instances of {@link UpdateCard}.
     */
    public static class Builder {
        private OptionalNullable<String> caller;
        private Boolean isReplacementChargeable;
        private Boolean notifyCaller;
        private Boolean notifyCallerOnSync;
        private Boolean orderCardReplacement;
        private CardSettings cardSettings;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> cardExpiryDate;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<String> pAN;
        private OptionalNullable<Double> pANID;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;



        /**
         * Setter for caller.
         * @param  caller  String value for caller.
         * @return Builder
         */
        public Builder caller(String caller) {
            this.caller = OptionalNullable.of(caller);
            return this;
        }

        /**
         * UnSetter for caller.
         * @return Builder
         */
        public Builder unsetCaller() {
            caller = null;
            return this;
        }

        /**
         * Setter for isReplacementChargeable.
         * @param  isReplacementChargeable  Boolean value for isReplacementChargeable.
         * @return Builder
         */
        public Builder isReplacementChargeable(Boolean isReplacementChargeable) {
            this.isReplacementChargeable = isReplacementChargeable;
            return this;
        }

        /**
         * Setter for notifyCaller.
         * @param  notifyCaller  Boolean value for notifyCaller.
         * @return Builder
         */
        public Builder notifyCaller(Boolean notifyCaller) {
            this.notifyCaller = notifyCaller;
            return this;
        }

        /**
         * Setter for notifyCallerOnSync.
         * @param  notifyCallerOnSync  Boolean value for notifyCallerOnSync.
         * @return Builder
         */
        public Builder notifyCallerOnSync(Boolean notifyCallerOnSync) {
            this.notifyCallerOnSync = notifyCallerOnSync;
            return this;
        }

        /**
         * Setter for orderCardReplacement.
         * @param  orderCardReplacement  Boolean value for orderCardReplacement.
         * @return Builder
         */
        public Builder orderCardReplacement(Boolean orderCardReplacement) {
            this.orderCardReplacement = orderCardReplacement;
            return this;
        }

        /**
         * Setter for cardSettings.
         * @param  cardSettings  CardSettings value for cardSettings.
         * @return Builder
         */
        public Builder cardSettings(CardSettings cardSettings) {
            this.cardSettings = cardSettings;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for cardExpiryDate.
         * @param  cardExpiryDate  String value for cardExpiryDate.
         * @return Builder
         */
        public Builder cardExpiryDate(String cardExpiryDate) {
            this.cardExpiryDate = OptionalNullable.of(cardExpiryDate);
            return this;
        }

        /**
         * UnSetter for cardExpiryDate.
         * @return Builder
         */
        public Builder unsetCardExpiryDate() {
            cardExpiryDate = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for pAN.
         * @param  pAN  String value for pAN.
         * @return Builder
         */
        public Builder pAN(String pAN) {
            this.pAN = OptionalNullable.of(pAN);
            return this;
        }

        /**
         * UnSetter for pAN.
         * @return Builder
         */
        public Builder unsetPAN() {
            pAN = null;
            return this;
        }

        /**
         * Setter for pANID.
         * @param  pANID  Double value for pANID.
         * @return Builder
         */
        public Builder pANID(Double pANID) {
            this.pANID = OptionalNullable.of(pANID);
            return this;
        }

        /**
         * UnSetter for pANID.
         * @return Builder
         */
        public Builder unsetPANID() {
            pANID = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Builds a new {@link UpdateCard} object using the set fields.
         * @return {@link UpdateCard}
         */
        public UpdateCard build() {
            return new UpdateCard(caller, isReplacementChargeable, notifyCaller, notifyCallerOnSync,
                    orderCardReplacement, cardSettings, accountId, accountNumber, cardExpiryDate,
                    cardId, colCoCode, colCoId, pAN, pANID, payerId, payerNumber);
        }
    }
}
