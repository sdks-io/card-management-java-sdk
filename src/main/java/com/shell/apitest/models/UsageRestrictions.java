/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for UsageRestrictions type.
 */
public class UsageRestrictions {
    private OptionalNullable<Double> dailySpend;
    private OptionalNullable<Double> weeklySpend;
    private OptionalNullable<Double> monthlySpend;
    private OptionalNullable<Double> perTransactionSpend;
    private OptionalNullable<Integer> dailyVolume;
    private OptionalNullable<Integer> weeklyVolume;
    private OptionalNullable<Integer> monthlyVolume;
    private OptionalNullable<Integer> perTransactionVolume;
    private OptionalNullable<Double> dailyTransactionCount;
    private OptionalNullable<Double> weeklyTransactionCount;
    private OptionalNullable<Double> monthlyTransactionCount;
    private OptionalNullable<Double> annualSpend;
    private OptionalNullable<Double> lifeTimeSpend;
    private OptionalNullable<Double> annualVolume;
    private OptionalNullable<Double> lifeTimeVolume;
    private OptionalNullable<Double> annualTransactionCount;
    private OptionalNullable<Double> lifeTimeTransactionCount;

    /**
     * Default constructor.
     */
    public UsageRestrictions() {
    }

    /**
     * Initialization constructor.
     * @param  dailySpend  Double value for dailySpend.
     * @param  weeklySpend  Double value for weeklySpend.
     * @param  monthlySpend  Double value for monthlySpend.
     * @param  perTransactionSpend  Double value for perTransactionSpend.
     * @param  dailyVolume  Integer value for dailyVolume.
     * @param  weeklyVolume  Integer value for weeklyVolume.
     * @param  monthlyVolume  Integer value for monthlyVolume.
     * @param  perTransactionVolume  Integer value for perTransactionVolume.
     * @param  dailyTransactionCount  Double value for dailyTransactionCount.
     * @param  weeklyTransactionCount  Double value for weeklyTransactionCount.
     * @param  monthlyTransactionCount  Double value for monthlyTransactionCount.
     * @param  annualSpend  Double value for annualSpend.
     * @param  lifeTimeSpend  Double value for lifeTimeSpend.
     * @param  annualVolume  Double value for annualVolume.
     * @param  lifeTimeVolume  Double value for lifeTimeVolume.
     * @param  annualTransactionCount  Double value for annualTransactionCount.
     * @param  lifeTimeTransactionCount  Double value for lifeTimeTransactionCount.
     */
    public UsageRestrictions(
            Double dailySpend,
            Double weeklySpend,
            Double monthlySpend,
            Double perTransactionSpend,
            Integer dailyVolume,
            Integer weeklyVolume,
            Integer monthlyVolume,
            Integer perTransactionVolume,
            Double dailyTransactionCount,
            Double weeklyTransactionCount,
            Double monthlyTransactionCount,
            Double annualSpend,
            Double lifeTimeSpend,
            Double annualVolume,
            Double lifeTimeVolume,
            Double annualTransactionCount,
            Double lifeTimeTransactionCount) {
        this.dailySpend = OptionalNullable.of(dailySpend);
        this.weeklySpend = OptionalNullable.of(weeklySpend);
        this.monthlySpend = OptionalNullable.of(monthlySpend);
        this.perTransactionSpend = OptionalNullable.of(perTransactionSpend);
        this.dailyVolume = OptionalNullable.of(dailyVolume);
        this.weeklyVolume = OptionalNullable.of(weeklyVolume);
        this.monthlyVolume = OptionalNullable.of(monthlyVolume);
        this.perTransactionVolume = OptionalNullable.of(perTransactionVolume);
        this.dailyTransactionCount = OptionalNullable.of(dailyTransactionCount);
        this.weeklyTransactionCount = OptionalNullable.of(weeklyTransactionCount);
        this.monthlyTransactionCount = OptionalNullable.of(monthlyTransactionCount);
        this.annualSpend = OptionalNullable.of(annualSpend);
        this.lifeTimeSpend = OptionalNullable.of(lifeTimeSpend);
        this.annualVolume = OptionalNullable.of(annualVolume);
        this.lifeTimeVolume = OptionalNullable.of(lifeTimeVolume);
        this.annualTransactionCount = OptionalNullable.of(annualTransactionCount);
        this.lifeTimeTransactionCount = OptionalNullable.of(lifeTimeTransactionCount);
    }

    /**
     * Initialization constructor.
     * @param  dailySpend  Double value for dailySpend.
     * @param  weeklySpend  Double value for weeklySpend.
     * @param  monthlySpend  Double value for monthlySpend.
     * @param  perTransactionSpend  Double value for perTransactionSpend.
     * @param  dailyVolume  Integer value for dailyVolume.
     * @param  weeklyVolume  Integer value for weeklyVolume.
     * @param  monthlyVolume  Integer value for monthlyVolume.
     * @param  perTransactionVolume  Integer value for perTransactionVolume.
     * @param  dailyTransactionCount  Double value for dailyTransactionCount.
     * @param  weeklyTransactionCount  Double value for weeklyTransactionCount.
     * @param  monthlyTransactionCount  Double value for monthlyTransactionCount.
     * @param  annualSpend  Double value for annualSpend.
     * @param  lifeTimeSpend  Double value for lifeTimeSpend.
     * @param  annualVolume  Double value for annualVolume.
     * @param  lifeTimeVolume  Double value for lifeTimeVolume.
     * @param  annualTransactionCount  Double value for annualTransactionCount.
     * @param  lifeTimeTransactionCount  Double value for lifeTimeTransactionCount.
     */

    protected UsageRestrictions(OptionalNullable<Double> dailySpend,
            OptionalNullable<Double> weeklySpend, OptionalNullable<Double> monthlySpend,
            OptionalNullable<Double> perTransactionSpend, OptionalNullable<Integer> dailyVolume,
            OptionalNullable<Integer> weeklyVolume, OptionalNullable<Integer> monthlyVolume,
            OptionalNullable<Integer> perTransactionVolume,
            OptionalNullable<Double> dailyTransactionCount,
            OptionalNullable<Double> weeklyTransactionCount,
            OptionalNullable<Double> monthlyTransactionCount, OptionalNullable<Double> annualSpend,
            OptionalNullable<Double> lifeTimeSpend, OptionalNullable<Double> annualVolume,
            OptionalNullable<Double> lifeTimeVolume,
            OptionalNullable<Double> annualTransactionCount,
            OptionalNullable<Double> lifeTimeTransactionCount) {
        this.dailySpend = dailySpend;
        this.weeklySpend = weeklySpend;
        this.monthlySpend = monthlySpend;
        this.perTransactionSpend = perTransactionSpend;
        this.dailyVolume = dailyVolume;
        this.weeklyVolume = weeklyVolume;
        this.monthlyVolume = monthlyVolume;
        this.perTransactionVolume = perTransactionVolume;
        this.dailyTransactionCount = dailyTransactionCount;
        this.weeklyTransactionCount = weeklyTransactionCount;
        this.monthlyTransactionCount = monthlyTransactionCount;
        this.annualSpend = annualSpend;
        this.lifeTimeSpend = lifeTimeSpend;
        this.annualVolume = annualVolume;
        this.lifeTimeVolume = lifeTimeVolume;
        this.annualTransactionCount = annualTransactionCount;
        this.lifeTimeTransactionCount = lifeTimeTransactionCount;
    }

    /**
     * Internal Getter for DailySpend.
     * Maximum spend value (amount) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("DailySpend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDailySpend() {
        return this.dailySpend;
    }

    /**
     * Getter for DailySpend.
     * Maximum spend value (amount) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getDailySpend() {
        return OptionalNullable.getFrom(dailySpend);
    }

    /**
     * Setter for DailySpend.
     * Maximum spend value (amount) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param dailySpend Value for Double
     */
    @JsonSetter("DailySpend")
    public void setDailySpend(Double dailySpend) {
        this.dailySpend = OptionalNullable.of(dailySpend);
    }

    /**
     * UnSetter for DailySpend.
     * Maximum spend value (amount) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetDailySpend() {
        dailySpend = null;
    }

    /**
     * Internal Getter for WeeklySpend.
     * Maximum spend value (amount) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("WeeklySpend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetWeeklySpend() {
        return this.weeklySpend;
    }

    /**
     * Getter for WeeklySpend.
     * Maximum spend value (amount) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getWeeklySpend() {
        return OptionalNullable.getFrom(weeklySpend);
    }

    /**
     * Setter for WeeklySpend.
     * Maximum spend value (amount) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param weeklySpend Value for Double
     */
    @JsonSetter("WeeklySpend")
    public void setWeeklySpend(Double weeklySpend) {
        this.weeklySpend = OptionalNullable.of(weeklySpend);
    }

    /**
     * UnSetter for WeeklySpend.
     * Maximum spend value (amount) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetWeeklySpend() {
        weeklySpend = null;
    }

    /**
     * Internal Getter for MonthlySpend.
     * Maximum spend value (amount) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("MonthlySpend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetMonthlySpend() {
        return this.monthlySpend;
    }

    /**
     * Getter for MonthlySpend.
     * Maximum spend value (amount) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getMonthlySpend() {
        return OptionalNullable.getFrom(monthlySpend);
    }

    /**
     * Setter for MonthlySpend.
     * Maximum spend value (amount) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param monthlySpend Value for Double
     */
    @JsonSetter("MonthlySpend")
    public void setMonthlySpend(Double monthlySpend) {
        this.monthlySpend = OptionalNullable.of(monthlySpend);
    }

    /**
     * UnSetter for MonthlySpend.
     * Maximum spend value (amount) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetMonthlySpend() {
        monthlySpend = null;
    }

    /**
     * Internal Getter for PerTransactionSpend.
     * Maximum spend value (amount) allowed per transaction. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("PerTransactionSpend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetPerTransactionSpend() {
        return this.perTransactionSpend;
    }

    /**
     * Getter for PerTransactionSpend.
     * Maximum spend value (amount) allowed per transaction. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Double
     */
    public Double getPerTransactionSpend() {
        return OptionalNullable.getFrom(perTransactionSpend);
    }

    /**
     * Setter for PerTransactionSpend.
     * Maximum spend value (amount) allowed per transaction. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @param perTransactionSpend Value for Double
     */
    @JsonSetter("PerTransactionSpend")
    public void setPerTransactionSpend(Double perTransactionSpend) {
        this.perTransactionSpend = OptionalNullable.of(perTransactionSpend);
    }

    /**
     * UnSetter for PerTransactionSpend.
     * Maximum spend value (amount) allowed per transaction. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     */
    public void unsetPerTransactionSpend() {
        perTransactionSpend = null;
    }

    /**
     * Internal Getter for DailyVolume.
     * Maximum volume (quantity) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Integer
     */
    @JsonGetter("DailyVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDailyVolume() {
        return this.dailyVolume;
    }

    /**
     * Getter for DailyVolume.
     * Maximum volume (quantity) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Integer
     */
    public Integer getDailyVolume() {
        return OptionalNullable.getFrom(dailyVolume);
    }

    /**
     * Setter for DailyVolume.
     * Maximum volume (quantity) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param dailyVolume Value for Integer
     */
    @JsonSetter("DailyVolume")
    public void setDailyVolume(Integer dailyVolume) {
        this.dailyVolume = OptionalNullable.of(dailyVolume);
    }

    /**
     * UnSetter for DailyVolume.
     * Maximum volume (quantity) allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetDailyVolume() {
        dailyVolume = null;
    }

    /**
     * Internal Getter for WeeklyVolume.
     * Maximum volume (quantity) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Integer
     */
    @JsonGetter("WeeklyVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetWeeklyVolume() {
        return this.weeklyVolume;
    }

    /**
     * Getter for WeeklyVolume.
     * Maximum volume (quantity) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Integer
     */
    public Integer getWeeklyVolume() {
        return OptionalNullable.getFrom(weeklyVolume);
    }

    /**
     * Setter for WeeklyVolume.
     * Maximum volume (quantity) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param weeklyVolume Value for Integer
     */
    @JsonSetter("WeeklyVolume")
    public void setWeeklyVolume(Integer weeklyVolume) {
        this.weeklyVolume = OptionalNullable.of(weeklyVolume);
    }

    /**
     * UnSetter for WeeklyVolume.
     * Maximum volume (quantity) allowed per week. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetWeeklyVolume() {
        weeklyVolume = null;
    }

    /**
     * Internal Getter for MonthlyVolume.
     * Maximum volume (quantity) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Integer
     */
    @JsonGetter("MonthlyVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMonthlyVolume() {
        return this.monthlyVolume;
    }

    /**
     * Getter for MonthlyVolume.
     * Maximum volume (quantity) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Integer
     */
    public Integer getMonthlyVolume() {
        return OptionalNullable.getFrom(monthlyVolume);
    }

    /**
     * Setter for MonthlyVolume.
     * Maximum volume (quantity) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param monthlyVolume Value for Integer
     */
    @JsonSetter("MonthlyVolume")
    public void setMonthlyVolume(Integer monthlyVolume) {
        this.monthlyVolume = OptionalNullable.of(monthlyVolume);
    }

    /**
     * UnSetter for MonthlyVolume.
     * Maximum volume (quantity) allowed per month. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetMonthlyVolume() {
        monthlyVolume = null;
    }

    /**
     * Internal Getter for PerTransactionVolume.
     * Maximum volume (quantity) allowed per transaction. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Integer
     */
    @JsonGetter("PerTransactionVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPerTransactionVolume() {
        return this.perTransactionVolume;
    }

    /**
     * Getter for PerTransactionVolume.
     * Maximum volume (quantity) allowed per transaction. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Integer
     */
    public Integer getPerTransactionVolume() {
        return OptionalNullable.getFrom(perTransactionVolume);
    }

    /**
     * Setter for PerTransactionVolume.
     * Maximum volume (quantity) allowed per transaction. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param perTransactionVolume Value for Integer
     */
    @JsonSetter("PerTransactionVolume")
    public void setPerTransactionVolume(Integer perTransactionVolume) {
        this.perTransactionVolume = OptionalNullable.of(perTransactionVolume);
    }

    /**
     * UnSetter for PerTransactionVolume.
     * Maximum volume (quantity) allowed per transaction. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetPerTransactionVolume() {
        perTransactionVolume = null;
    }

    /**
     * Internal Getter for DailyTransactionCount.
     * Maximum number of transactions allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("DailyTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDailyTransactionCount() {
        return this.dailyTransactionCount;
    }

    /**
     * Getter for DailyTransactionCount.
     * Maximum number of transactions allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getDailyTransactionCount() {
        return OptionalNullable.getFrom(dailyTransactionCount);
    }

    /**
     * Setter for DailyTransactionCount.
     * Maximum number of transactions allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param dailyTransactionCount Value for Double
     */
    @JsonSetter("DailyTransactionCount")
    public void setDailyTransactionCount(Double dailyTransactionCount) {
        this.dailyTransactionCount = OptionalNullable.of(dailyTransactionCount);
    }

    /**
     * UnSetter for DailyTransactionCount.
     * Maximum number of transactions allowed per day. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetDailyTransactionCount() {
        dailyTransactionCount = null;
    }

    /**
     * Internal Getter for WeeklyTransactionCount.
     * Maximum number of transactions allowed per week. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("WeeklyTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetWeeklyTransactionCount() {
        return this.weeklyTransactionCount;
    }

    /**
     * Getter for WeeklyTransactionCount.
     * Maximum number of transactions allowed per week. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getWeeklyTransactionCount() {
        return OptionalNullable.getFrom(weeklyTransactionCount);
    }

    /**
     * Setter for WeeklyTransactionCount.
     * Maximum number of transactions allowed per week. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param weeklyTransactionCount Value for Double
     */
    @JsonSetter("WeeklyTransactionCount")
    public void setWeeklyTransactionCount(Double weeklyTransactionCount) {
        this.weeklyTransactionCount = OptionalNullable.of(weeklyTransactionCount);
    }

    /**
     * UnSetter for WeeklyTransactionCount.
     * Maximum number of transactions allowed per week. Optional The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetWeeklyTransactionCount() {
        weeklyTransactionCount = null;
    }

    /**
     * Internal Getter for MonthlyTransactionCount.
     * Maximum number of transactions allowed per month. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("MonthlyTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetMonthlyTransactionCount() {
        return this.monthlyTransactionCount;
    }

    /**
     * Getter for MonthlyTransactionCount.
     * Maximum number of transactions allowed per month. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getMonthlyTransactionCount() {
        return OptionalNullable.getFrom(monthlyTransactionCount);
    }

    /**
     * Setter for MonthlyTransactionCount.
     * Maximum number of transactions allowed per month. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param monthlyTransactionCount Value for Double
     */
    @JsonSetter("MonthlyTransactionCount")
    public void setMonthlyTransactionCount(Double monthlyTransactionCount) {
        this.monthlyTransactionCount = OptionalNullable.of(monthlyTransactionCount);
    }

    /**
     * UnSetter for MonthlyTransactionCount.
     * Maximum number of transactions allowed per month. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetMonthlyTransactionCount() {
        monthlyTransactionCount = null;
    }

    /**
     * Internal Getter for AnnualSpend.
     * Maximum spend value (amount) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("AnnualSpend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAnnualSpend() {
        return this.annualSpend;
    }

    /**
     * Getter for AnnualSpend.
     * Maximum spend value (amount) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getAnnualSpend() {
        return OptionalNullable.getFrom(annualSpend);
    }

    /**
     * Setter for AnnualSpend.
     * Maximum spend value (amount) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param annualSpend Value for Double
     */
    @JsonSetter("AnnualSpend")
    public void setAnnualSpend(Double annualSpend) {
        this.annualSpend = OptionalNullable.of(annualSpend);
    }

    /**
     * UnSetter for AnnualSpend.
     * Maximum spend value (amount) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetAnnualSpend() {
        annualSpend = null;
    }

    /**
     * Internal Getter for LifeTimeSpend.
     * Maximum spend value (amount) allowed in card’s life time. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("LifeTimeSpend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLifeTimeSpend() {
        return this.lifeTimeSpend;
    }

    /**
     * Getter for LifeTimeSpend.
     * Maximum spend value (amount) allowed in card’s life time. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Double
     */
    public Double getLifeTimeSpend() {
        return OptionalNullable.getFrom(lifeTimeSpend);
    }

    /**
     * Setter for LifeTimeSpend.
     * Maximum spend value (amount) allowed in card’s life time. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @param lifeTimeSpend Value for Double
     */
    @JsonSetter("LifeTimeSpend")
    public void setLifeTimeSpend(Double lifeTimeSpend) {
        this.lifeTimeSpend = OptionalNullable.of(lifeTimeSpend);
    }

    /**
     * UnSetter for LifeTimeSpend.
     * Maximum spend value (amount) allowed in card’s life time. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     */
    public void unsetLifeTimeSpend() {
        lifeTimeSpend = null;
    }

    /**
     * Internal Getter for AnnualVolume.
     * Maximum volume (quantity) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("AnnualVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAnnualVolume() {
        return this.annualVolume;
    }

    /**
     * Getter for AnnualVolume.
     * Maximum volume (quantity) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getAnnualVolume() {
        return OptionalNullable.getFrom(annualVolume);
    }

    /**
     * Setter for AnnualVolume.
     * Maximum volume (quantity) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param annualVolume Value for Double
     */
    @JsonSetter("AnnualVolume")
    public void setAnnualVolume(Double annualVolume) {
        this.annualVolume = OptionalNullable.of(annualVolume);
    }

    /**
     * UnSetter for AnnualVolume.
     * Maximum volume (quantity) allowed per annum. Optional The value ‘0’ represents not set. If
     * Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetAnnualVolume() {
        annualVolume = null;
    }

    /**
     * Internal Getter for LifeTimeVolume.
     * Maximum volume (quantity) allowed in card’s life time. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("LifeTimeVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLifeTimeVolume() {
        return this.lifeTimeVolume;
    }

    /**
     * Getter for LifeTimeVolume.
     * Maximum volume (quantity) allowed in card’s life time. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Double
     */
    public Double getLifeTimeVolume() {
        return OptionalNullable.getFrom(lifeTimeVolume);
    }

    /**
     * Setter for LifeTimeVolume.
     * Maximum volume (quantity) allowed in card’s life time. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @param lifeTimeVolume Value for Double
     */
    @JsonSetter("LifeTimeVolume")
    public void setLifeTimeVolume(Double lifeTimeVolume) {
        this.lifeTimeVolume = OptionalNullable.of(lifeTimeVolume);
    }

    /**
     * UnSetter for LifeTimeVolume.
     * Maximum volume (quantity) allowed in card’s life time. Optional The value ‘0’ represents not
     * set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     */
    public void unsetLifeTimeVolume() {
        lifeTimeVolume = null;
    }

    /**
     * Internal Getter for AnnualTransactionCount.
     * Maximum number of transactions allowed per annum. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("AnnualTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAnnualTransactionCount() {
        return this.annualTransactionCount;
    }

    /**
     * Getter for AnnualTransactionCount.
     * Maximum number of transactions allowed per annum. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @return Returns the Double
     */
    public Double getAnnualTransactionCount() {
        return OptionalNullable.getFrom(annualTransactionCount);
    }

    /**
     * Setter for AnnualTransactionCount.
     * Maximum number of transactions allowed per annum. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     * @param annualTransactionCount Value for Double
     */
    @JsonSetter("AnnualTransactionCount")
    public void setAnnualTransactionCount(Double annualTransactionCount) {
        this.annualTransactionCount = OptionalNullable.of(annualTransactionCount);
    }

    /**
     * UnSetter for AnnualTransactionCount.
     * Maximum number of transactions allowed per annum. Optional. The value ‘0’ represents not set.
     * If Values is passed as null, will be considered as inherited. Valid range: 0 to 9999999999
     */
    public void unsetAnnualTransactionCount() {
        annualTransactionCount = null;
    }

    /**
     * Internal Getter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed in card’s lifetime. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Internal Double
     */
    @JsonGetter("LifeTimeTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLifeTimeTransactionCount() {
        return this.lifeTimeTransactionCount;
    }

    /**
     * Getter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed in card’s lifetime. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @return Returns the Double
     */
    public Double getLifeTimeTransactionCount() {
        return OptionalNullable.getFrom(lifeTimeTransactionCount);
    }

    /**
     * Setter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed in card’s lifetime. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     * @param lifeTimeTransactionCount Value for Double
     */
    @JsonSetter("LifeTimeTransactionCount")
    public void setLifeTimeTransactionCount(Double lifeTimeTransactionCount) {
        this.lifeTimeTransactionCount = OptionalNullable.of(lifeTimeTransactionCount);
    }

    /**
     * UnSetter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed in card’s lifetime. Optional The value ‘0’ represents
     * not set. If Values is passed as null, will be considered as inherited. Valid range: 0 to
     * 9999999999
     */
    public void unsetLifeTimeTransactionCount() {
        lifeTimeTransactionCount = null;
    }

    /**
     * Converts this UsageRestrictions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UsageRestrictions [" + "dailySpend=" + dailySpend + ", weeklySpend=" + weeklySpend
                + ", monthlySpend=" + monthlySpend + ", perTransactionSpend=" + perTransactionSpend
                + ", dailyVolume=" + dailyVolume + ", weeklyVolume=" + weeklyVolume
                + ", monthlyVolume=" + monthlyVolume + ", perTransactionVolume="
                + perTransactionVolume + ", dailyTransactionCount=" + dailyTransactionCount
                + ", weeklyTransactionCount=" + weeklyTransactionCount
                + ", monthlyTransactionCount=" + monthlyTransactionCount + ", annualSpend="
                + annualSpend + ", lifeTimeSpend=" + lifeTimeSpend + ", annualVolume="
                + annualVolume + ", lifeTimeVolume=" + lifeTimeVolume + ", annualTransactionCount="
                + annualTransactionCount + ", lifeTimeTransactionCount=" + lifeTimeTransactionCount
                + "]";
    }

    /**
     * Builds a new {@link UsageRestrictions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UsageRestrictions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.dailySpend = internalGetDailySpend();
        builder.weeklySpend = internalGetWeeklySpend();
        builder.monthlySpend = internalGetMonthlySpend();
        builder.perTransactionSpend = internalGetPerTransactionSpend();
        builder.dailyVolume = internalGetDailyVolume();
        builder.weeklyVolume = internalGetWeeklyVolume();
        builder.monthlyVolume = internalGetMonthlyVolume();
        builder.perTransactionVolume = internalGetPerTransactionVolume();
        builder.dailyTransactionCount = internalGetDailyTransactionCount();
        builder.weeklyTransactionCount = internalGetWeeklyTransactionCount();
        builder.monthlyTransactionCount = internalGetMonthlyTransactionCount();
        builder.annualSpend = internalGetAnnualSpend();
        builder.lifeTimeSpend = internalGetLifeTimeSpend();
        builder.annualVolume = internalGetAnnualVolume();
        builder.lifeTimeVolume = internalGetLifeTimeVolume();
        builder.annualTransactionCount = internalGetAnnualTransactionCount();
        builder.lifeTimeTransactionCount = internalGetLifeTimeTransactionCount();
        return builder;
    }

    /**
     * Class to build instances of {@link UsageRestrictions}.
     */
    public static class Builder {
        private OptionalNullable<Double> dailySpend;
        private OptionalNullable<Double> weeklySpend;
        private OptionalNullable<Double> monthlySpend;
        private OptionalNullable<Double> perTransactionSpend;
        private OptionalNullable<Integer> dailyVolume;
        private OptionalNullable<Integer> weeklyVolume;
        private OptionalNullable<Integer> monthlyVolume;
        private OptionalNullable<Integer> perTransactionVolume;
        private OptionalNullable<Double> dailyTransactionCount;
        private OptionalNullable<Double> weeklyTransactionCount;
        private OptionalNullable<Double> monthlyTransactionCount;
        private OptionalNullable<Double> annualSpend;
        private OptionalNullable<Double> lifeTimeSpend;
        private OptionalNullable<Double> annualVolume;
        private OptionalNullable<Double> lifeTimeVolume;
        private OptionalNullable<Double> annualTransactionCount;
        private OptionalNullable<Double> lifeTimeTransactionCount;



        /**
         * Setter for dailySpend.
         * @param  dailySpend  Double value for dailySpend.
         * @return Builder
         */
        public Builder dailySpend(Double dailySpend) {
            this.dailySpend = OptionalNullable.of(dailySpend);
            return this;
        }

        /**
         * UnSetter for dailySpend.
         * @return Builder
         */
        public Builder unsetDailySpend() {
            dailySpend = null;
            return this;
        }

        /**
         * Setter for weeklySpend.
         * @param  weeklySpend  Double value for weeklySpend.
         * @return Builder
         */
        public Builder weeklySpend(Double weeklySpend) {
            this.weeklySpend = OptionalNullable.of(weeklySpend);
            return this;
        }

        /**
         * UnSetter for weeklySpend.
         * @return Builder
         */
        public Builder unsetWeeklySpend() {
            weeklySpend = null;
            return this;
        }

        /**
         * Setter for monthlySpend.
         * @param  monthlySpend  Double value for monthlySpend.
         * @return Builder
         */
        public Builder monthlySpend(Double monthlySpend) {
            this.monthlySpend = OptionalNullable.of(monthlySpend);
            return this;
        }

        /**
         * UnSetter for monthlySpend.
         * @return Builder
         */
        public Builder unsetMonthlySpend() {
            monthlySpend = null;
            return this;
        }

        /**
         * Setter for perTransactionSpend.
         * @param  perTransactionSpend  Double value for perTransactionSpend.
         * @return Builder
         */
        public Builder perTransactionSpend(Double perTransactionSpend) {
            this.perTransactionSpend = OptionalNullable.of(perTransactionSpend);
            return this;
        }

        /**
         * UnSetter for perTransactionSpend.
         * @return Builder
         */
        public Builder unsetPerTransactionSpend() {
            perTransactionSpend = null;
            return this;
        }

        /**
         * Setter for dailyVolume.
         * @param  dailyVolume  Integer value for dailyVolume.
         * @return Builder
         */
        public Builder dailyVolume(Integer dailyVolume) {
            this.dailyVolume = OptionalNullable.of(dailyVolume);
            return this;
        }

        /**
         * UnSetter for dailyVolume.
         * @return Builder
         */
        public Builder unsetDailyVolume() {
            dailyVolume = null;
            return this;
        }

        /**
         * Setter for weeklyVolume.
         * @param  weeklyVolume  Integer value for weeklyVolume.
         * @return Builder
         */
        public Builder weeklyVolume(Integer weeklyVolume) {
            this.weeklyVolume = OptionalNullable.of(weeklyVolume);
            return this;
        }

        /**
         * UnSetter for weeklyVolume.
         * @return Builder
         */
        public Builder unsetWeeklyVolume() {
            weeklyVolume = null;
            return this;
        }

        /**
         * Setter for monthlyVolume.
         * @param  monthlyVolume  Integer value for monthlyVolume.
         * @return Builder
         */
        public Builder monthlyVolume(Integer monthlyVolume) {
            this.monthlyVolume = OptionalNullable.of(monthlyVolume);
            return this;
        }

        /**
         * UnSetter for monthlyVolume.
         * @return Builder
         */
        public Builder unsetMonthlyVolume() {
            monthlyVolume = null;
            return this;
        }

        /**
         * Setter for perTransactionVolume.
         * @param  perTransactionVolume  Integer value for perTransactionVolume.
         * @return Builder
         */
        public Builder perTransactionVolume(Integer perTransactionVolume) {
            this.perTransactionVolume = OptionalNullable.of(perTransactionVolume);
            return this;
        }

        /**
         * UnSetter for perTransactionVolume.
         * @return Builder
         */
        public Builder unsetPerTransactionVolume() {
            perTransactionVolume = null;
            return this;
        }

        /**
         * Setter for dailyTransactionCount.
         * @param  dailyTransactionCount  Double value for dailyTransactionCount.
         * @return Builder
         */
        public Builder dailyTransactionCount(Double dailyTransactionCount) {
            this.dailyTransactionCount = OptionalNullable.of(dailyTransactionCount);
            return this;
        }

        /**
         * UnSetter for dailyTransactionCount.
         * @return Builder
         */
        public Builder unsetDailyTransactionCount() {
            dailyTransactionCount = null;
            return this;
        }

        /**
         * Setter for weeklyTransactionCount.
         * @param  weeklyTransactionCount  Double value for weeklyTransactionCount.
         * @return Builder
         */
        public Builder weeklyTransactionCount(Double weeklyTransactionCount) {
            this.weeklyTransactionCount = OptionalNullable.of(weeklyTransactionCount);
            return this;
        }

        /**
         * UnSetter for weeklyTransactionCount.
         * @return Builder
         */
        public Builder unsetWeeklyTransactionCount() {
            weeklyTransactionCount = null;
            return this;
        }

        /**
         * Setter for monthlyTransactionCount.
         * @param  monthlyTransactionCount  Double value for monthlyTransactionCount.
         * @return Builder
         */
        public Builder monthlyTransactionCount(Double monthlyTransactionCount) {
            this.monthlyTransactionCount = OptionalNullable.of(monthlyTransactionCount);
            return this;
        }

        /**
         * UnSetter for monthlyTransactionCount.
         * @return Builder
         */
        public Builder unsetMonthlyTransactionCount() {
            monthlyTransactionCount = null;
            return this;
        }

        /**
         * Setter for annualSpend.
         * @param  annualSpend  Double value for annualSpend.
         * @return Builder
         */
        public Builder annualSpend(Double annualSpend) {
            this.annualSpend = OptionalNullable.of(annualSpend);
            return this;
        }

        /**
         * UnSetter for annualSpend.
         * @return Builder
         */
        public Builder unsetAnnualSpend() {
            annualSpend = null;
            return this;
        }

        /**
         * Setter for lifeTimeSpend.
         * @param  lifeTimeSpend  Double value for lifeTimeSpend.
         * @return Builder
         */
        public Builder lifeTimeSpend(Double lifeTimeSpend) {
            this.lifeTimeSpend = OptionalNullable.of(lifeTimeSpend);
            return this;
        }

        /**
         * UnSetter for lifeTimeSpend.
         * @return Builder
         */
        public Builder unsetLifeTimeSpend() {
            lifeTimeSpend = null;
            return this;
        }

        /**
         * Setter for annualVolume.
         * @param  annualVolume  Double value for annualVolume.
         * @return Builder
         */
        public Builder annualVolume(Double annualVolume) {
            this.annualVolume = OptionalNullable.of(annualVolume);
            return this;
        }

        /**
         * UnSetter for annualVolume.
         * @return Builder
         */
        public Builder unsetAnnualVolume() {
            annualVolume = null;
            return this;
        }

        /**
         * Setter for lifeTimeVolume.
         * @param  lifeTimeVolume  Double value for lifeTimeVolume.
         * @return Builder
         */
        public Builder lifeTimeVolume(Double lifeTimeVolume) {
            this.lifeTimeVolume = OptionalNullable.of(lifeTimeVolume);
            return this;
        }

        /**
         * UnSetter for lifeTimeVolume.
         * @return Builder
         */
        public Builder unsetLifeTimeVolume() {
            lifeTimeVolume = null;
            return this;
        }

        /**
         * Setter for annualTransactionCount.
         * @param  annualTransactionCount  Double value for annualTransactionCount.
         * @return Builder
         */
        public Builder annualTransactionCount(Double annualTransactionCount) {
            this.annualTransactionCount = OptionalNullable.of(annualTransactionCount);
            return this;
        }

        /**
         * UnSetter for annualTransactionCount.
         * @return Builder
         */
        public Builder unsetAnnualTransactionCount() {
            annualTransactionCount = null;
            return this;
        }

        /**
         * Setter for lifeTimeTransactionCount.
         * @param  lifeTimeTransactionCount  Double value for lifeTimeTransactionCount.
         * @return Builder
         */
        public Builder lifeTimeTransactionCount(Double lifeTimeTransactionCount) {
            this.lifeTimeTransactionCount = OptionalNullable.of(lifeTimeTransactionCount);
            return this;
        }

        /**
         * UnSetter for lifeTimeTransactionCount.
         * @return Builder
         */
        public Builder unsetLifeTimeTransactionCount() {
            lifeTimeTransactionCount = null;
            return this;
        }

        /**
         * Builds a new {@link UsageRestrictions} object using the set fields.
         * @return {@link UsageRestrictions}
         */
        public UsageRestrictions build() {
            return new UsageRestrictions(dailySpend, weeklySpend, monthlySpend, perTransactionSpend,
                    dailyVolume, weeklyVolume, monthlyVolume, perTransactionVolume,
                    dailyTransactionCount, weeklyTransactionCount, monthlyTransactionCount,
                    annualSpend, lifeTimeSpend, annualVolume, lifeTimeVolume,
                    annualTransactionCount, lifeTimeTransactionCount);
        }
    }
}
