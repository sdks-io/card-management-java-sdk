/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for RestrictionSearchCardResponseDataItems type.
 */
public class RestrictionSearchCardResponseDataItems {
    private Integer bundleId;
    private SearchCardResponseRestrictions restrictions;
    private OptionalNullable<String> restrictionCurrencyCode;
    private OptionalNullable<String> restrictionCurrencySymbol;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountName;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> cardTypeCode;
    private OptionalNullable<Integer> cardTypeId;
    private OptionalNullable<String> cardTypeName;
    private OptionalNullable<String> colCoCurrencyCode;
    private OptionalNullable<String> colCoCurrencySymbol;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> expiryDate;
    private Boolean isCRT;
    private Boolean isFleet;
    private Boolean isInternational;
    private Boolean isNational;
    private Boolean isPartnerSitesIncluded;
    private Boolean isShellSitesOnly;
    private OptionalNullable<String> issueDate;
    private OptionalNullable<Integer> issueNumber;
    private Boolean isSuperseded;
    private Boolean isVirtualCard;
    private OptionalNullable<String> pAN;
    private OptionalNullable<String> purchaseCategoryCode;
    private OptionalNullable<Integer> purchaseCategoryId;
    private OptionalNullable<String> purchaseCategoryName;
    private OptionalNullable<String> statusDescription;
    private OptionalNullable<Integer> statusId;
    private OptionalNullable<String> vRN;
    private OptionalNullable<Integer> mediumTypeID;
    private OptionalNullable<String> mediumType;

    /**
     * Default constructor.
     */
    public RestrictionSearchCardResponseDataItems() {
    }

    /**
     * Initialization constructor.
     * @param  bundleId  Integer value for bundleId.
     * @param  restrictions  SearchCardResponseRestrictions value for restrictions.
     * @param  restrictionCurrencyCode  String value for restrictionCurrencyCode.
     * @param  restrictionCurrencySymbol  String value for restrictionCurrencySymbol.
     * @param  accountId  Integer value for accountId.
     * @param  accountName  String value for accountName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  cardId  Integer value for cardId.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  colCoCurrencyCode  String value for colCoCurrencyCode.
     * @param  colCoCurrencySymbol  String value for colCoCurrencySymbol.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  driverName  String value for driverName.
     * @param  expiryDate  String value for expiryDate.
     * @param  isCRT  Boolean value for isCRT.
     * @param  isFleet  Boolean value for isFleet.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isNational  Boolean value for isNational.
     * @param  isPartnerSitesIncluded  Boolean value for isPartnerSitesIncluded.
     * @param  isShellSitesOnly  Boolean value for isShellSitesOnly.
     * @param  issueDate  String value for issueDate.
     * @param  issueNumber  Integer value for issueNumber.
     * @param  isSuperseded  Boolean value for isSuperseded.
     * @param  isVirtualCard  Boolean value for isVirtualCard.
     * @param  pAN  String value for pAN.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  purchaseCategoryName  String value for purchaseCategoryName.
     * @param  statusDescription  String value for statusDescription.
     * @param  statusId  Integer value for statusId.
     * @param  vRN  String value for vRN.
     * @param  mediumTypeID  Integer value for mediumTypeID.
     * @param  mediumType  String value for mediumType.
     */
    public RestrictionSearchCardResponseDataItems(
            Integer bundleId,
            SearchCardResponseRestrictions restrictions,
            String restrictionCurrencyCode,
            String restrictionCurrencySymbol,
            Integer accountId,
            String accountName,
            String accountNumber,
            String accountShortName,
            Integer cardId,
            String cardTypeCode,
            Integer cardTypeId,
            String cardTypeName,
            String colCoCurrencyCode,
            String colCoCurrencySymbol,
            String currencyCode,
            String currencySymbol,
            String driverName,
            String expiryDate,
            Boolean isCRT,
            Boolean isFleet,
            Boolean isInternational,
            Boolean isNational,
            Boolean isPartnerSitesIncluded,
            Boolean isShellSitesOnly,
            String issueDate,
            Integer issueNumber,
            Boolean isSuperseded,
            Boolean isVirtualCard,
            String pAN,
            String purchaseCategoryCode,
            Integer purchaseCategoryId,
            String purchaseCategoryName,
            String statusDescription,
            Integer statusId,
            String vRN,
            Integer mediumTypeID,
            String mediumType) {
        this.bundleId = bundleId;
        this.restrictions = restrictions;
        this.restrictionCurrencyCode = OptionalNullable.of(restrictionCurrencyCode);
        this.restrictionCurrencySymbol = OptionalNullable.of(restrictionCurrencySymbol);
        this.accountId = OptionalNullable.of(accountId);
        this.accountName = OptionalNullable.of(accountName);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.cardId = OptionalNullable.of(cardId);
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
        this.cardTypeId = OptionalNullable.of(cardTypeId);
        this.cardTypeName = OptionalNullable.of(cardTypeName);
        this.colCoCurrencyCode = OptionalNullable.of(colCoCurrencyCode);
        this.colCoCurrencySymbol = OptionalNullable.of(colCoCurrencySymbol);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.driverName = OptionalNullable.of(driverName);
        this.expiryDate = OptionalNullable.of(expiryDate);
        this.isCRT = isCRT;
        this.isFleet = isFleet;
        this.isInternational = isInternational;
        this.isNational = isNational;
        this.isPartnerSitesIncluded = isPartnerSitesIncluded;
        this.isShellSitesOnly = isShellSitesOnly;
        this.issueDate = OptionalNullable.of(issueDate);
        this.issueNumber = OptionalNullable.of(issueNumber);
        this.isSuperseded = isSuperseded;
        this.isVirtualCard = isVirtualCard;
        this.pAN = OptionalNullable.of(pAN);
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
        this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
        this.statusDescription = OptionalNullable.of(statusDescription);
        this.statusId = OptionalNullable.of(statusId);
        this.vRN = OptionalNullable.of(vRN);
        this.mediumTypeID = OptionalNullable.of(mediumTypeID);
        this.mediumType = OptionalNullable.of(mediumType);
    }

    /**
     * Initialization constructor.
     * @param  bundleId  Integer value for bundleId.
     * @param  restrictions  SearchCardResponseRestrictions value for restrictions.
     * @param  restrictionCurrencyCode  String value for restrictionCurrencyCode.
     * @param  restrictionCurrencySymbol  String value for restrictionCurrencySymbol.
     * @param  accountId  Integer value for accountId.
     * @param  accountName  String value for accountName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  cardId  Integer value for cardId.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  colCoCurrencyCode  String value for colCoCurrencyCode.
     * @param  colCoCurrencySymbol  String value for colCoCurrencySymbol.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  driverName  String value for driverName.
     * @param  expiryDate  String value for expiryDate.
     * @param  isCRT  Boolean value for isCRT.
     * @param  isFleet  Boolean value for isFleet.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isNational  Boolean value for isNational.
     * @param  isPartnerSitesIncluded  Boolean value for isPartnerSitesIncluded.
     * @param  isShellSitesOnly  Boolean value for isShellSitesOnly.
     * @param  issueDate  String value for issueDate.
     * @param  issueNumber  Integer value for issueNumber.
     * @param  isSuperseded  Boolean value for isSuperseded.
     * @param  isVirtualCard  Boolean value for isVirtualCard.
     * @param  pAN  String value for pAN.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  purchaseCategoryName  String value for purchaseCategoryName.
     * @param  statusDescription  String value for statusDescription.
     * @param  statusId  Integer value for statusId.
     * @param  vRN  String value for vRN.
     * @param  mediumTypeID  Integer value for mediumTypeID.
     * @param  mediumType  String value for mediumType.
     */

    protected RestrictionSearchCardResponseDataItems(Integer bundleId,
            SearchCardResponseRestrictions restrictions,
            OptionalNullable<String> restrictionCurrencyCode,
            OptionalNullable<String> restrictionCurrencySymbol, OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountName, OptionalNullable<String> accountNumber,
            OptionalNullable<String> accountShortName, OptionalNullable<Integer> cardId,
            OptionalNullable<String> cardTypeCode, OptionalNullable<Integer> cardTypeId,
            OptionalNullable<String> cardTypeName, OptionalNullable<String> colCoCurrencyCode,
            OptionalNullable<String> colCoCurrencySymbol, OptionalNullable<String> currencyCode,
            OptionalNullable<String> currencySymbol, OptionalNullable<String> driverName,
            OptionalNullable<String> expiryDate, Boolean isCRT, Boolean isFleet,
            Boolean isInternational, Boolean isNational, Boolean isPartnerSitesIncluded,
            Boolean isShellSitesOnly, OptionalNullable<String> issueDate,
            OptionalNullable<Integer> issueNumber, Boolean isSuperseded, Boolean isVirtualCard,
            OptionalNullable<String> pAN, OptionalNullable<String> purchaseCategoryCode,
            OptionalNullable<Integer> purchaseCategoryId,
            OptionalNullable<String> purchaseCategoryName,
            OptionalNullable<String> statusDescription, OptionalNullable<Integer> statusId,
            OptionalNullable<String> vRN, OptionalNullable<Integer> mediumTypeID,
            OptionalNullable<String> mediumType) {
        this.bundleId = bundleId;
        this.restrictions = restrictions;
        this.restrictionCurrencyCode = restrictionCurrencyCode;
        this.restrictionCurrencySymbol = restrictionCurrencySymbol;
        this.accountId = accountId;
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.cardId = cardId;
        this.cardTypeCode = cardTypeCode;
        this.cardTypeId = cardTypeId;
        this.cardTypeName = cardTypeName;
        this.colCoCurrencyCode = colCoCurrencyCode;
        this.colCoCurrencySymbol = colCoCurrencySymbol;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.driverName = driverName;
        this.expiryDate = expiryDate;
        this.isCRT = isCRT;
        this.isFleet = isFleet;
        this.isInternational = isInternational;
        this.isNational = isNational;
        this.isPartnerSitesIncluded = isPartnerSitesIncluded;
        this.isShellSitesOnly = isShellSitesOnly;
        this.issueDate = issueDate;
        this.issueNumber = issueNumber;
        this.isSuperseded = isSuperseded;
        this.isVirtualCard = isVirtualCard;
        this.pAN = pAN;
        this.purchaseCategoryCode = purchaseCategoryCode;
        this.purchaseCategoryId = purchaseCategoryId;
        this.purchaseCategoryName = purchaseCategoryName;
        this.statusDescription = statusDescription;
        this.statusId = statusId;
        this.vRN = vRN;
        this.mediumTypeID = mediumTypeID;
        this.mediumType = mediumType;
    }

    /**
     * Getter for BundleId.
     * Bundle Id associated with card
     * @return Returns the Integer
     */
    @JsonGetter("BundleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getBundleId() {
        return bundleId;
    }

    /**
     * Setter for BundleId.
     * Bundle Id associated with card
     * @param bundleId Value for Integer
     */
    @JsonSetter("BundleId")
    public void setBundleId(Integer bundleId) {
        this.bundleId = bundleId;
    }

    /**
     * Getter for Restrictions.
     * @return Returns the SearchCardResponseRestrictions
     */
    @JsonGetter("Restrictions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SearchCardResponseRestrictions getRestrictions() {
        return restrictions;
    }

    /**
     * Setter for Restrictions.
     * @param restrictions Value for SearchCardResponseRestrictions
     */
    @JsonSetter("Restrictions")
    public void setRestrictions(SearchCardResponseRestrictions restrictions) {
        this.restrictions = restrictions;
    }

    /**
     * Internal Getter for RestrictionCurrencyCode.
     * ISO currency code of the country.
     * @return Returns the Internal String
     */
    @JsonGetter("RestrictionCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRestrictionCurrencyCode() {
        return this.restrictionCurrencyCode;
    }

    /**
     * Getter for RestrictionCurrencyCode.
     * ISO currency code of the country.
     * @return Returns the String
     */
    public String getRestrictionCurrencyCode() {
        return OptionalNullable.getFrom(restrictionCurrencyCode);
    }

    /**
     * Setter for RestrictionCurrencyCode.
     * ISO currency code of the country.
     * @param restrictionCurrencyCode Value for String
     */
    @JsonSetter("RestrictionCurrencyCode")
    public void setRestrictionCurrencyCode(String restrictionCurrencyCode) {
        this.restrictionCurrencyCode = OptionalNullable.of(restrictionCurrencyCode);
    }

    /**
     * UnSetter for RestrictionCurrencyCode.
     * ISO currency code of the country.
     */
    public void unsetRestrictionCurrencyCode() {
        restrictionCurrencyCode = null;
    }

    /**
     * Internal Getter for RestrictionCurrencySymbol.
     * Currency symbol of the country.
     * @return Returns the Internal String
     */
    @JsonGetter("RestrictionCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRestrictionCurrencySymbol() {
        return this.restrictionCurrencySymbol;
    }

    /**
     * Getter for RestrictionCurrencySymbol.
     * Currency symbol of the country.
     * @return Returns the String
     */
    public String getRestrictionCurrencySymbol() {
        return OptionalNullable.getFrom(restrictionCurrencySymbol);
    }

    /**
     * Setter for RestrictionCurrencySymbol.
     * Currency symbol of the country.
     * @param restrictionCurrencySymbol Value for String
     */
    @JsonSetter("RestrictionCurrencySymbol")
    public void setRestrictionCurrencySymbol(String restrictionCurrencySymbol) {
        this.restrictionCurrencySymbol = OptionalNullable.of(restrictionCurrencySymbol);
    }

    /**
     * UnSetter for RestrictionCurrencySymbol.
     * Currency symbol of the country.
     */
    public void unsetRestrictionCurrencySymbol() {
        restrictionCurrencySymbol = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account ID
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account ID
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account ID
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountName.
     * Account Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Account Name
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Account Name
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Account Name
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * AccountShortName
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * AccountShortName
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * AccountShortName
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * AccountShortName
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeCode() {
        return this.cardTypeCode;
    }

    /**
     * Getter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     * @return Returns the String
     */
    public String getCardTypeCode() {
        return OptionalNullable.getFrom(cardTypeCode);
    }

    /**
     * Setter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     * @param cardTypeCode Value for String
     */
    @JsonSetter("CardTypeCode")
    public void setCardTypeCode(String cardTypeCode) {
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
    }

    /**
     * UnSetter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public void unsetCardTypeCode() {
        cardTypeCode = null;
    }

    /**
     * Internal Getter for CardTypeId.
     * Card Type ID Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardTypeId() {
        return this.cardTypeId;
    }

    /**
     * Getter for CardTypeId.
     * Card Type ID Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     * @return Returns the Integer
     */
    public Integer getCardTypeId() {
        return OptionalNullable.getFrom(cardTypeId);
    }

    /**
     * Setter for CardTypeId.
     * Card Type ID Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     * @param cardTypeId Value for Integer
     */
    @JsonSetter("CardTypeId")
    public void setCardTypeId(Integer cardTypeId) {
        this.cardTypeId = OptionalNullable.of(cardTypeId);
    }

    /**
     * UnSetter for CardTypeId.
     * Card Type ID Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     */
    public void unsetCardTypeId() {
        cardTypeId = null;
    }

    /**
     * Internal Getter for CardTypeName.
     * Card Type Name Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeName() {
        return this.cardTypeName;
    }

    /**
     * Getter for CardTypeName.
     * Card Type Name Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     * @return Returns the String
     */
    public String getCardTypeName() {
        return OptionalNullable.getFrom(cardTypeName);
    }

    /**
     * Setter for CardTypeName.
     * Card Type Name Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     * @param cardTypeName Value for String
     */
    @JsonSetter("CardTypeName")
    public void setCardTypeName(String cardTypeName) {
        this.cardTypeName = OptionalNullable.of(cardTypeName);
    }

    /**
     * UnSetter for CardTypeName.
     * Card Type Name Example Id &amp; Description: 1 - Philippines CRT 7077861 2- Philippines Fleet
     * 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG
     * KONG 7077821
     */
    public void unsetCardTypeName() {
        cardTypeName = null;
    }

    /**
     * Internal Getter for ColCoCurrencyCode.
     * ISO currency code of the country
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCurrencyCode() {
        return this.colCoCurrencyCode;
    }

    /**
     * Getter for ColCoCurrencyCode.
     * ISO currency code of the country
     * @return Returns the String
     */
    public String getColCoCurrencyCode() {
        return OptionalNullable.getFrom(colCoCurrencyCode);
    }

    /**
     * Setter for ColCoCurrencyCode.
     * ISO currency code of the country
     * @param colCoCurrencyCode Value for String
     */
    @JsonSetter("ColCoCurrencyCode")
    public void setColCoCurrencyCode(String colCoCurrencyCode) {
        this.colCoCurrencyCode = OptionalNullable.of(colCoCurrencyCode);
    }

    /**
     * UnSetter for ColCoCurrencyCode.
     * ISO currency code of the country
     */
    public void unsetColCoCurrencyCode() {
        colCoCurrencyCode = null;
    }

    /**
     * Internal Getter for ColCoCurrencySymbol.
     * Currency symbol of the country
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCurrencySymbol() {
        return this.colCoCurrencySymbol;
    }

    /**
     * Getter for ColCoCurrencySymbol.
     * Currency symbol of the country
     * @return Returns the String
     */
    public String getColCoCurrencySymbol() {
        return OptionalNullable.getFrom(colCoCurrencySymbol);
    }

    /**
     * Setter for ColCoCurrencySymbol.
     * Currency symbol of the country
     * @param colCoCurrencySymbol Value for String
     */
    @JsonSetter("ColCoCurrencySymbol")
    public void setColCoCurrencySymbol(String colCoCurrencySymbol) {
        this.colCoCurrencySymbol = OptionalNullable.of(colCoCurrencySymbol);
    }

    /**
     * UnSetter for ColCoCurrencySymbol.
     * Currency symbol of the country
     */
    public void unsetColCoCurrencySymbol() {
        colCoCurrencySymbol = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO currency code of the Customer Currency
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO currency code of the Customer Currency
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO currency code of the Customer Currency
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO currency code of the Customer Currency
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Currency symbol of the Customer Currency Code
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Currency symbol of the Customer Currency Code
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Currency symbol of the Customer Currency Code
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Currency symbol of the Customer Currency Code
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver name
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver name
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver name
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver name
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for ExpiryDate.
     * Expiry date of the card Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("ExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiryDate() {
        return this.expiryDate;
    }

    /**
     * Getter for ExpiryDate.
     * Expiry date of the card Format: yyyyMMdd
     * @return Returns the String
     */
    public String getExpiryDate() {
        return OptionalNullable.getFrom(expiryDate);
    }

    /**
     * Setter for ExpiryDate.
     * Expiry date of the card Format: yyyyMMdd
     * @param expiryDate Value for String
     */
    @JsonSetter("ExpiryDate")
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = OptionalNullable.of(expiryDate);
    }

    /**
     * UnSetter for ExpiryDate.
     * Expiry date of the card Format: yyyyMMdd
     */
    public void unsetExpiryDate() {
        expiryDate = null;
    }

    /**
     * Getter for IsCRT.
     * True if it is a CRT type card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsCRT")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsCRT() {
        return isCRT;
    }

    /**
     * Setter for IsCRT.
     * True if it is a CRT type card, else false
     * @param isCRT Value for Boolean
     */
    @JsonSetter("IsCRT")
    public void setIsCRT(Boolean isCRT) {
        this.isCRT = isCRT;
    }

    /**
     * Getter for IsFleet.
     * True if it is a Fleet type card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsFleet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsFleet() {
        return isFleet;
    }

    /**
     * Setter for IsFleet.
     * True if it is a Fleet type card, else false
     * @param isFleet Value for Boolean
     */
    @JsonSetter("IsFleet")
    public void setIsFleet(Boolean isFleet) {
        this.isFleet = isFleet;
    }

    /**
     * Getter for IsInternational.
     * True if it is an international card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsInternational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsInternational() {
        return isInternational;
    }

    /**
     * Setter for IsInternational.
     * True if it is an international card, else false
     * @param isInternational Value for Boolean
     */
    @JsonSetter("IsInternational")
    public void setIsInternational(Boolean isInternational) {
        this.isInternational = isInternational;
    }

    /**
     * Getter for IsNational.
     * True if it is a national card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsNational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsNational() {
        return isNational;
    }

    /**
     * Setter for IsNational.
     * True if it is a national card, else false
     * @param isNational Value for Boolean
     */
    @JsonSetter("IsNational")
    public void setIsNational(Boolean isNational) {
        this.isNational = isNational;
    }

    /**
     * Getter for IsPartnerSitesIncluded.
     * True if it is allowed at all partner sites, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsPartnerSitesIncluded")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsPartnerSitesIncluded() {
        return isPartnerSitesIncluded;
    }

    /**
     * Setter for IsPartnerSitesIncluded.
     * True if it is allowed at all partner sites, else false
     * @param isPartnerSitesIncluded Value for Boolean
     */
    @JsonSetter("IsPartnerSitesIncluded")
    public void setIsPartnerSitesIncluded(Boolean isPartnerSitesIncluded) {
        this.isPartnerSitesIncluded = isPartnerSitesIncluded;
    }

    /**
     * Getter for IsShellSitesOnly.
     * True if it is only allowed at Shell sites, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsShellSitesOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsShellSitesOnly() {
        return isShellSitesOnly;
    }

    /**
     * Setter for IsShellSitesOnly.
     * True if it is only allowed at Shell sites, else false
     * @param isShellSitesOnly Value for Boolean
     */
    @JsonSetter("IsShellSitesOnly")
    public void setIsShellSitesOnly(Boolean isShellSitesOnly) {
        this.isShellSitesOnly = isShellSitesOnly;
    }

    /**
     * Internal Getter for IssueDate.
     * Issue date Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("IssueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssueDate() {
        return this.issueDate;
    }

    /**
     * Getter for IssueDate.
     * Issue date Format: yyyyMMdd
     * @return Returns the String
     */
    public String getIssueDate() {
        return OptionalNullable.getFrom(issueDate);
    }

    /**
     * Setter for IssueDate.
     * Issue date Format: yyyyMMdd
     * @param issueDate Value for String
     */
    @JsonSetter("IssueDate")
    public void setIssueDate(String issueDate) {
        this.issueDate = OptionalNullable.of(issueDate);
    }

    /**
     * UnSetter for IssueDate.
     * Issue date Format: yyyyMMdd
     */
    public void unsetIssueDate() {
        issueDate = null;
    }

    /**
     * Internal Getter for IssueNumber.
     * Issue Number
     * @return Returns the Internal Integer
     */
    @JsonGetter("IssueNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIssueNumber() {
        return this.issueNumber;
    }

    /**
     * Getter for IssueNumber.
     * Issue Number
     * @return Returns the Integer
     */
    public Integer getIssueNumber() {
        return OptionalNullable.getFrom(issueNumber);
    }

    /**
     * Setter for IssueNumber.
     * Issue Number
     * @param issueNumber Value for Integer
     */
    @JsonSetter("IssueNumber")
    public void setIssueNumber(Integer issueNumber) {
        this.issueNumber = OptionalNullable.of(issueNumber);
    }

    /**
     * UnSetter for IssueNumber.
     * Issue Number
     */
    public void unsetIssueNumber() {
        issueNumber = null;
    }

    /**
     * Getter for IsSuperseded.
     * True if a new card is issued with the same PAN, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsSuperseded")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsSuperseded() {
        return isSuperseded;
    }

    /**
     * Setter for IsSuperseded.
     * True if a new card is issued with the same PAN, else false
     * @param isSuperseded Value for Boolean
     */
    @JsonSetter("IsSuperseded")
    public void setIsSuperseded(Boolean isSuperseded) {
        this.isSuperseded = isSuperseded;
    }

    /**
     * Getter for IsVirtualCard.
     * True if it is a virtual card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsVirtualCard")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsVirtualCard() {
        return isVirtualCard;
    }

    /**
     * Setter for IsVirtualCard.
     * True if it is a virtual card, else false
     * @param isVirtualCard Value for Boolean
     */
    @JsonSetter("IsVirtualCard")
    public void setIsVirtualCard(Boolean isVirtualCard) {
        this.isVirtualCard = isVirtualCard;
    }

    /**
     * Internal Getter for PAN.
     * Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("PAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPAN() {
        return this.pAN;
    }

    /**
     * Getter for PAN.
     * Card PAN
     * @return Returns the String
     */
    public String getPAN() {
        return OptionalNullable.getFrom(pAN);
    }

    /**
     * Setter for PAN.
     * Card PAN
     * @param pAN Value for String
     */
    @JsonSetter("PAN")
    public void setPAN(String pAN) {
        this.pAN = OptionalNullable.of(pAN);
    }

    /**
     * UnSetter for PAN.
     * Card PAN
     */
    public void unsetPAN() {
        pAN = null;
    }

    /**
     * Internal Getter for PurchaseCategoryCode.
     * Purchase category code Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryCode() {
        return this.purchaseCategoryCode;
    }

    /**
     * Getter for PurchaseCategoryCode.
     * Purchase category code Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     * @return Returns the String
     */
    public String getPurchaseCategoryCode() {
        return OptionalNullable.getFrom(purchaseCategoryCode);
    }

    /**
     * Setter for PurchaseCategoryCode.
     * Purchase category code Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     * @param purchaseCategoryCode Value for String
     */
    @JsonSetter("PurchaseCategoryCode")
    public void setPurchaseCategoryCode(String purchaseCategoryCode) {
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
    }

    /**
     * UnSetter for PurchaseCategoryCode.
     * Purchase category code Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     */
    public void unsetPurchaseCategoryCode() {
        purchaseCategoryCode = null;
    }

    /**
     * Internal Getter for PurchaseCategoryId.
     * Purchase category Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("PurchaseCategoryId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPurchaseCategoryId() {
        return this.purchaseCategoryId;
    }

    /**
     * Getter for PurchaseCategoryId.
     * Purchase category Id
     * @return Returns the Integer
     */
    public Integer getPurchaseCategoryId() {
        return OptionalNullable.getFrom(purchaseCategoryId);
    }

    /**
     * Setter for PurchaseCategoryId.
     * Purchase category Id
     * @param purchaseCategoryId Value for Integer
     */
    @JsonSetter("PurchaseCategoryId")
    public void setPurchaseCategoryId(Integer purchaseCategoryId) {
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
    }

    /**
     * UnSetter for PurchaseCategoryId.
     * Purchase category Id
     */
    public void unsetPurchaseCategoryId() {
        purchaseCategoryId = null;
    }

    /**
     * Internal Getter for PurchaseCategoryName.
     * Purchase category name Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryName() {
        return this.purchaseCategoryName;
    }

    /**
     * Getter for PurchaseCategoryName.
     * Purchase category name Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     * @return Returns the String
     */
    public String getPurchaseCategoryName() {
        return OptionalNullable.getFrom(purchaseCategoryName);
    }

    /**
     * Setter for PurchaseCategoryName.
     * Purchase category name Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     * @param purchaseCategoryName Value for String
     */
    @JsonSetter("PurchaseCategoryName")
    public void setPurchaseCategoryName(String purchaseCategoryName) {
        this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
    }

    /**
     * UnSetter for PurchaseCategoryName.
     * Purchase category name Example: 0 - All Fuels (without VP) and Lubricants 1 - FuelSave only 2
     * - FuelSave and Lubricants 3 - No Restrictions 4 - VP and FuelSave 5 - Diesel ONLY 6 - Diesel
     * and Lubricants 7 - VP and Lubricants 8 - VP and FuelSave and Lubricants
     */
    public void unsetPurchaseCategoryName() {
        purchaseCategoryName = null;
    }

    /**
     * Internal Getter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)
     * @return Returns the Internal String
     */
    @JsonGetter("StatusDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatusDescription() {
        return this.statusDescription;
    }

    /**
     * Getter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)
     * @return Returns the String
     */
    public String getStatusDescription() {
        return OptionalNullable.getFrom(statusDescription);
    }

    /**
     * Setter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)
     * @param statusDescription Value for String
     */
    @JsonSetter("StatusDescription")
    public void setStatusDescription(String statusDescription) {
        this.statusDescription = OptionalNullable.of(statusDescription);
    }

    /**
     * UnSetter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)
     */
    public void unsetStatusDescription() {
        statusDescription = null;
    }

    /**
     * Internal Getter for StatusId.
     * Card Status id
     * @return Returns the Internal Integer
     */
    @JsonGetter("StatusId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetStatusId() {
        return this.statusId;
    }

    /**
     * Getter for StatusId.
     * Card Status id
     * @return Returns the Integer
     */
    public Integer getStatusId() {
        return OptionalNullable.getFrom(statusId);
    }

    /**
     * Setter for StatusId.
     * Card Status id
     * @param statusId Value for Integer
     */
    @JsonSetter("StatusId")
    public void setStatusId(Integer statusId) {
        this.statusId = OptionalNullable.of(statusId);
    }

    /**
     * UnSetter for StatusId.
     * Card Status id
     */
    public void unsetStatusId() {
        statusId = null;
    }

    /**
     * Internal Getter for VRN.
     * Vehicle registration number
     * @return Returns the Internal String
     */
    @JsonGetter("VRN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVRN() {
        return this.vRN;
    }

    /**
     * Getter for VRN.
     * Vehicle registration number
     * @return Returns the String
     */
    public String getVRN() {
        return OptionalNullable.getFrom(vRN);
    }

    /**
     * Setter for VRN.
     * Vehicle registration number
     * @param vRN Value for String
     */
    @JsonSetter("VRN")
    public void setVRN(String vRN) {
        this.vRN = OptionalNullable.of(vRN);
    }

    /**
     * UnSetter for VRN.
     * Vehicle registration number
     */
    public void unsetVRN() {
        vRN = null;
    }

    /**
     * Internal Getter for MediumTypeID.
     * Id of the medium type identifier. Example: 1,2,4 Full list below: 1 - Fuel Card 2 - Fuel Card
     * with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 - Virtual Card 7 - NPII Token 8 –
     * Smartpay
     * @return Returns the Internal Integer
     */
    @JsonGetter("MediumTypeID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMediumTypeID() {
        return this.mediumTypeID;
    }

    /**
     * Getter for MediumTypeID.
     * Id of the medium type identifier. Example: 1,2,4 Full list below: 1 - Fuel Card 2 - Fuel Card
     * with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 - Virtual Card 7 - NPII Token 8 –
     * Smartpay
     * @return Returns the Integer
     */
    public Integer getMediumTypeID() {
        return OptionalNullable.getFrom(mediumTypeID);
    }

    /**
     * Setter for MediumTypeID.
     * Id of the medium type identifier. Example: 1,2,4 Full list below: 1 - Fuel Card 2 - Fuel Card
     * with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 - Virtual Card 7 - NPII Token 8 –
     * Smartpay
     * @param mediumTypeID Value for Integer
     */
    @JsonSetter("MediumTypeID")
    public void setMediumTypeID(Integer mediumTypeID) {
        this.mediumTypeID = OptionalNullable.of(mediumTypeID);
    }

    /**
     * UnSetter for MediumTypeID.
     * Id of the medium type identifier. Example: 1,2,4 Full list below: 1 - Fuel Card 2 - Fuel Card
     * with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 - Virtual Card 7 - NPII Token 8 –
     * Smartpay
     */
    public void unsetMediumTypeID() {
        mediumTypeID = null;
    }

    /**
     * Internal Getter for MediumType.
     * Name of the medium type identifier. Example: Fuel Card, Fuel Card with EV, Key fob Full list
     * below: 1 - Fuel Card 2 - Fuel Card with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 -
     * Virtual Card 7 - NPII Token 8 - Smartpay
     * @return Returns the Internal String
     */
    @JsonGetter("MediumType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMediumType() {
        return this.mediumType;
    }

    /**
     * Getter for MediumType.
     * Name of the medium type identifier. Example: Fuel Card, Fuel Card with EV, Key fob Full list
     * below: 1 - Fuel Card 2 - Fuel Card with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 -
     * Virtual Card 7 - NPII Token 8 - Smartpay
     * @return Returns the String
     */
    public String getMediumType() {
        return OptionalNullable.getFrom(mediumType);
    }

    /**
     * Setter for MediumType.
     * Name of the medium type identifier. Example: Fuel Card, Fuel Card with EV, Key fob Full list
     * below: 1 - Fuel Card 2 - Fuel Card with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 -
     * Virtual Card 7 - NPII Token 8 - Smartpay
     * @param mediumType Value for String
     */
    @JsonSetter("MediumType")
    public void setMediumType(String mediumType) {
        this.mediumType = OptionalNullable.of(mediumType);
    }

    /**
     * UnSetter for MediumType.
     * Name of the medium type identifier. Example: Fuel Card, Fuel Card with EV, Key fob Full list
     * below: 1 - Fuel Card 2 - Fuel Card with EV 4 - Fuel Card and Key fob Card 5 - Key fob 6 -
     * Virtual Card 7 - NPII Token 8 - Smartpay
     */
    public void unsetMediumType() {
        mediumType = null;
    }

    /**
     * Converts this RestrictionSearchCardResponseDataItems into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RestrictionSearchCardResponseDataItems [" + "bundleId=" + bundleId
                + ", restrictions=" + restrictions + ", restrictionCurrencyCode="
                + restrictionCurrencyCode + ", restrictionCurrencySymbol="
                + restrictionCurrencySymbol + ", accountId=" + accountId + ", accountName="
                + accountName + ", accountNumber=" + accountNumber + ", accountShortName="
                + accountShortName + ", cardId=" + cardId + ", cardTypeCode=" + cardTypeCode
                + ", cardTypeId=" + cardTypeId + ", cardTypeName=" + cardTypeName
                + ", colCoCurrencyCode=" + colCoCurrencyCode + ", colCoCurrencySymbol="
                + colCoCurrencySymbol + ", currencyCode=" + currencyCode + ", currencySymbol="
                + currencySymbol + ", driverName=" + driverName + ", expiryDate=" + expiryDate
                + ", isCRT=" + isCRT + ", isFleet=" + isFleet + ", isInternational="
                + isInternational + ", isNational=" + isNational + ", isPartnerSitesIncluded="
                + isPartnerSitesIncluded + ", isShellSitesOnly=" + isShellSitesOnly + ", issueDate="
                + issueDate + ", issueNumber=" + issueNumber + ", isSuperseded=" + isSuperseded
                + ", isVirtualCard=" + isVirtualCard + ", pAN=" + pAN + ", purchaseCategoryCode="
                + purchaseCategoryCode + ", purchaseCategoryId=" + purchaseCategoryId
                + ", purchaseCategoryName=" + purchaseCategoryName + ", statusDescription="
                + statusDescription + ", statusId=" + statusId + ", vRN=" + vRN + ", mediumTypeID="
                + mediumTypeID + ", mediumType=" + mediumType + "]";
    }

    /**
     * Builds a new {@link RestrictionSearchCardResponseDataItems.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RestrictionSearchCardResponseDataItems.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .bundleId(getBundleId())
                .restrictions(getRestrictions())
                .isCRT(getIsCRT())
                .isFleet(getIsFleet())
                .isInternational(getIsInternational())
                .isNational(getIsNational())
                .isPartnerSitesIncluded(getIsPartnerSitesIncluded())
                .isShellSitesOnly(getIsShellSitesOnly())
                .isSuperseded(getIsSuperseded())
                .isVirtualCard(getIsVirtualCard());
        builder.restrictionCurrencyCode = internalGetRestrictionCurrencyCode();
        builder.restrictionCurrencySymbol = internalGetRestrictionCurrencySymbol();
        builder.accountId = internalGetAccountId();
        builder.accountName = internalGetAccountName();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.cardId = internalGetCardId();
        builder.cardTypeCode = internalGetCardTypeCode();
        builder.cardTypeId = internalGetCardTypeId();
        builder.cardTypeName = internalGetCardTypeName();
        builder.colCoCurrencyCode = internalGetColCoCurrencyCode();
        builder.colCoCurrencySymbol = internalGetColCoCurrencySymbol();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.driverName = internalGetDriverName();
        builder.expiryDate = internalGetExpiryDate();
        builder.issueDate = internalGetIssueDate();
        builder.issueNumber = internalGetIssueNumber();
        builder.pAN = internalGetPAN();
        builder.purchaseCategoryCode = internalGetPurchaseCategoryCode();
        builder.purchaseCategoryId = internalGetPurchaseCategoryId();
        builder.purchaseCategoryName = internalGetPurchaseCategoryName();
        builder.statusDescription = internalGetStatusDescription();
        builder.statusId = internalGetStatusId();
        builder.vRN = internalGetVRN();
        builder.mediumTypeID = internalGetMediumTypeID();
        builder.mediumType = internalGetMediumType();
        return builder;
    }

    /**
     * Class to build instances of {@link RestrictionSearchCardResponseDataItems}.
     */
    public static class Builder {
        private Integer bundleId;
        private SearchCardResponseRestrictions restrictions;
        private OptionalNullable<String> restrictionCurrencyCode;
        private OptionalNullable<String> restrictionCurrencySymbol;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountName;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> cardTypeCode;
        private OptionalNullable<Integer> cardTypeId;
        private OptionalNullable<String> cardTypeName;
        private OptionalNullable<String> colCoCurrencyCode;
        private OptionalNullable<String> colCoCurrencySymbol;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> expiryDate;
        private Boolean isCRT;
        private Boolean isFleet;
        private Boolean isInternational;
        private Boolean isNational;
        private Boolean isPartnerSitesIncluded;
        private Boolean isShellSitesOnly;
        private OptionalNullable<String> issueDate;
        private OptionalNullable<Integer> issueNumber;
        private Boolean isSuperseded;
        private Boolean isVirtualCard;
        private OptionalNullable<String> pAN;
        private OptionalNullable<String> purchaseCategoryCode;
        private OptionalNullable<Integer> purchaseCategoryId;
        private OptionalNullable<String> purchaseCategoryName;
        private OptionalNullable<String> statusDescription;
        private OptionalNullable<Integer> statusId;
        private OptionalNullable<String> vRN;
        private OptionalNullable<Integer> mediumTypeID;
        private OptionalNullable<String> mediumType;



        /**
         * Setter for bundleId.
         * @param  bundleId  Integer value for bundleId.
         * @return Builder
         */
        public Builder bundleId(Integer bundleId) {
            this.bundleId = bundleId;
            return this;
        }

        /**
         * Setter for restrictions.
         * @param  restrictions  SearchCardResponseRestrictions value for restrictions.
         * @return Builder
         */
        public Builder restrictions(SearchCardResponseRestrictions restrictions) {
            this.restrictions = restrictions;
            return this;
        }

        /**
         * Setter for restrictionCurrencyCode.
         * @param  restrictionCurrencyCode  String value for restrictionCurrencyCode.
         * @return Builder
         */
        public Builder restrictionCurrencyCode(String restrictionCurrencyCode) {
            this.restrictionCurrencyCode = OptionalNullable.of(restrictionCurrencyCode);
            return this;
        }

        /**
         * UnSetter for restrictionCurrencyCode.
         * @return Builder
         */
        public Builder unsetRestrictionCurrencyCode() {
            restrictionCurrencyCode = null;
            return this;
        }

        /**
         * Setter for restrictionCurrencySymbol.
         * @param  restrictionCurrencySymbol  String value for restrictionCurrencySymbol.
         * @return Builder
         */
        public Builder restrictionCurrencySymbol(String restrictionCurrencySymbol) {
            this.restrictionCurrencySymbol = OptionalNullable.of(restrictionCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for restrictionCurrencySymbol.
         * @return Builder
         */
        public Builder unsetRestrictionCurrencySymbol() {
            restrictionCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for cardTypeCode.
         * @param  cardTypeCode  String value for cardTypeCode.
         * @return Builder
         */
        public Builder cardTypeCode(String cardTypeCode) {
            this.cardTypeCode = OptionalNullable.of(cardTypeCode);
            return this;
        }

        /**
         * UnSetter for cardTypeCode.
         * @return Builder
         */
        public Builder unsetCardTypeCode() {
            cardTypeCode = null;
            return this;
        }

        /**
         * Setter for cardTypeId.
         * @param  cardTypeId  Integer value for cardTypeId.
         * @return Builder
         */
        public Builder cardTypeId(Integer cardTypeId) {
            this.cardTypeId = OptionalNullable.of(cardTypeId);
            return this;
        }

        /**
         * UnSetter for cardTypeId.
         * @return Builder
         */
        public Builder unsetCardTypeId() {
            cardTypeId = null;
            return this;
        }

        /**
         * Setter for cardTypeName.
         * @param  cardTypeName  String value for cardTypeName.
         * @return Builder
         */
        public Builder cardTypeName(String cardTypeName) {
            this.cardTypeName = OptionalNullable.of(cardTypeName);
            return this;
        }

        /**
         * UnSetter for cardTypeName.
         * @return Builder
         */
        public Builder unsetCardTypeName() {
            cardTypeName = null;
            return this;
        }

        /**
         * Setter for colCoCurrencyCode.
         * @param  colCoCurrencyCode  String value for colCoCurrencyCode.
         * @return Builder
         */
        public Builder colCoCurrencyCode(String colCoCurrencyCode) {
            this.colCoCurrencyCode = OptionalNullable.of(colCoCurrencyCode);
            return this;
        }

        /**
         * UnSetter for colCoCurrencyCode.
         * @return Builder
         */
        public Builder unsetColCoCurrencyCode() {
            colCoCurrencyCode = null;
            return this;
        }

        /**
         * Setter for colCoCurrencySymbol.
         * @param  colCoCurrencySymbol  String value for colCoCurrencySymbol.
         * @return Builder
         */
        public Builder colCoCurrencySymbol(String colCoCurrencySymbol) {
            this.colCoCurrencySymbol = OptionalNullable.of(colCoCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for colCoCurrencySymbol.
         * @return Builder
         */
        public Builder unsetColCoCurrencySymbol() {
            colCoCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for expiryDate.
         * @param  expiryDate  String value for expiryDate.
         * @return Builder
         */
        public Builder expiryDate(String expiryDate) {
            this.expiryDate = OptionalNullable.of(expiryDate);
            return this;
        }

        /**
         * UnSetter for expiryDate.
         * @return Builder
         */
        public Builder unsetExpiryDate() {
            expiryDate = null;
            return this;
        }

        /**
         * Setter for isCRT.
         * @param  isCRT  Boolean value for isCRT.
         * @return Builder
         */
        public Builder isCRT(Boolean isCRT) {
            this.isCRT = isCRT;
            return this;
        }

        /**
         * Setter for isFleet.
         * @param  isFleet  Boolean value for isFleet.
         * @return Builder
         */
        public Builder isFleet(Boolean isFleet) {
            this.isFleet = isFleet;
            return this;
        }

        /**
         * Setter for isInternational.
         * @param  isInternational  Boolean value for isInternational.
         * @return Builder
         */
        public Builder isInternational(Boolean isInternational) {
            this.isInternational = isInternational;
            return this;
        }

        /**
         * Setter for isNational.
         * @param  isNational  Boolean value for isNational.
         * @return Builder
         */
        public Builder isNational(Boolean isNational) {
            this.isNational = isNational;
            return this;
        }

        /**
         * Setter for isPartnerSitesIncluded.
         * @param  isPartnerSitesIncluded  Boolean value for isPartnerSitesIncluded.
         * @return Builder
         */
        public Builder isPartnerSitesIncluded(Boolean isPartnerSitesIncluded) {
            this.isPartnerSitesIncluded = isPartnerSitesIncluded;
            return this;
        }

        /**
         * Setter for isShellSitesOnly.
         * @param  isShellSitesOnly  Boolean value for isShellSitesOnly.
         * @return Builder
         */
        public Builder isShellSitesOnly(Boolean isShellSitesOnly) {
            this.isShellSitesOnly = isShellSitesOnly;
            return this;
        }

        /**
         * Setter for issueDate.
         * @param  issueDate  String value for issueDate.
         * @return Builder
         */
        public Builder issueDate(String issueDate) {
            this.issueDate = OptionalNullable.of(issueDate);
            return this;
        }

        /**
         * UnSetter for issueDate.
         * @return Builder
         */
        public Builder unsetIssueDate() {
            issueDate = null;
            return this;
        }

        /**
         * Setter for issueNumber.
         * @param  issueNumber  Integer value for issueNumber.
         * @return Builder
         */
        public Builder issueNumber(Integer issueNumber) {
            this.issueNumber = OptionalNullable.of(issueNumber);
            return this;
        }

        /**
         * UnSetter for issueNumber.
         * @return Builder
         */
        public Builder unsetIssueNumber() {
            issueNumber = null;
            return this;
        }

        /**
         * Setter for isSuperseded.
         * @param  isSuperseded  Boolean value for isSuperseded.
         * @return Builder
         */
        public Builder isSuperseded(Boolean isSuperseded) {
            this.isSuperseded = isSuperseded;
            return this;
        }

        /**
         * Setter for isVirtualCard.
         * @param  isVirtualCard  Boolean value for isVirtualCard.
         * @return Builder
         */
        public Builder isVirtualCard(Boolean isVirtualCard) {
            this.isVirtualCard = isVirtualCard;
            return this;
        }

        /**
         * Setter for pAN.
         * @param  pAN  String value for pAN.
         * @return Builder
         */
        public Builder pAN(String pAN) {
            this.pAN = OptionalNullable.of(pAN);
            return this;
        }

        /**
         * UnSetter for pAN.
         * @return Builder
         */
        public Builder unsetPAN() {
            pAN = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryCode.
         * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
         * @return Builder
         */
        public Builder purchaseCategoryCode(String purchaseCategoryCode) {
            this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryCode.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryCode() {
            purchaseCategoryCode = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryId.
         * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
         * @return Builder
         */
        public Builder purchaseCategoryId(Integer purchaseCategoryId) {
            this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryId.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryId() {
            purchaseCategoryId = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryName.
         * @param  purchaseCategoryName  String value for purchaseCategoryName.
         * @return Builder
         */
        public Builder purchaseCategoryName(String purchaseCategoryName) {
            this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryName.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryName() {
            purchaseCategoryName = null;
            return this;
        }

        /**
         * Setter for statusDescription.
         * @param  statusDescription  String value for statusDescription.
         * @return Builder
         */
        public Builder statusDescription(String statusDescription) {
            this.statusDescription = OptionalNullable.of(statusDescription);
            return this;
        }

        /**
         * UnSetter for statusDescription.
         * @return Builder
         */
        public Builder unsetStatusDescription() {
            statusDescription = null;
            return this;
        }

        /**
         * Setter for statusId.
         * @param  statusId  Integer value for statusId.
         * @return Builder
         */
        public Builder statusId(Integer statusId) {
            this.statusId = OptionalNullable.of(statusId);
            return this;
        }

        /**
         * UnSetter for statusId.
         * @return Builder
         */
        public Builder unsetStatusId() {
            statusId = null;
            return this;
        }

        /**
         * Setter for vRN.
         * @param  vRN  String value for vRN.
         * @return Builder
         */
        public Builder vRN(String vRN) {
            this.vRN = OptionalNullable.of(vRN);
            return this;
        }

        /**
         * UnSetter for vRN.
         * @return Builder
         */
        public Builder unsetVRN() {
            vRN = null;
            return this;
        }

        /**
         * Setter for mediumTypeID.
         * @param  mediumTypeID  Integer value for mediumTypeID.
         * @return Builder
         */
        public Builder mediumTypeID(Integer mediumTypeID) {
            this.mediumTypeID = OptionalNullable.of(mediumTypeID);
            return this;
        }

        /**
         * UnSetter for mediumTypeID.
         * @return Builder
         */
        public Builder unsetMediumTypeID() {
            mediumTypeID = null;
            return this;
        }

        /**
         * Setter for mediumType.
         * @param  mediumType  String value for mediumType.
         * @return Builder
         */
        public Builder mediumType(String mediumType) {
            this.mediumType = OptionalNullable.of(mediumType);
            return this;
        }

        /**
         * UnSetter for mediumType.
         * @return Builder
         */
        public Builder unsetMediumType() {
            mediumType = null;
            return this;
        }

        /**
         * Builds a new {@link RestrictionSearchCardResponseDataItems} object using the set fields.
         * @return {@link RestrictionSearchCardResponseDataItems}
         */
        public RestrictionSearchCardResponseDataItems build() {
            return new RestrictionSearchCardResponseDataItems(bundleId, restrictions,
                    restrictionCurrencyCode, restrictionCurrencySymbol, accountId, accountName,
                    accountNumber, accountShortName, cardId, cardTypeCode, cardTypeId, cardTypeName,
                    colCoCurrencyCode, colCoCurrencySymbol, currencyCode, currencySymbol,
                    driverName, expiryDate, isCRT, isFleet, isInternational, isNational,
                    isPartnerSitesIncluded, isShellSitesOnly, issueDate, issueNumber, isSuperseded,
                    isVirtualCard, pAN, purchaseCategoryCode, purchaseCategoryId,
                    purchaseCategoryName, statusDescription, statusId, vRN, mediumTypeID,
                    mediumType);
        }
    }
}
