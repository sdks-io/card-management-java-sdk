/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for CardDetail type.
 */
public class CardDetail {
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> cardTypeId;
    private OptionalNullable<Integer> tokenTypeId;
    private OptionalNullable<String> embossText;
    private OptionalNullable<String> vRN;
    private OptionalNullable<String> driverName;
    private Boolean odometerInputRequired;
    private Boolean fleetIdInputRequired;
    private OptionalNullable<Integer> purchaseCategoryId;
    private String selfSelectedEncryptedPIN;
    private OptionalNullable<String> selfSelectedPINKeyID;
    private OptionalNullable<String> selfSelectedPINSessionKey;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private Boolean isNewCardGroup;
    private Boolean embossCardGroup;
    private Integer cardDeliveryType;
    private CardContact cardContact;
    private OptionalNullable<Integer> pINDeliveryAddressType;
    private Integer pINAdviceType;
    private PINContact pINContact;
    private Boolean notifyCaller;
    private OptionalNullable<String> caller;
    private Boolean notifyCallerOnSync;
    private Boolean validateFleetId;
    private OptionalNullable<String> fleetOption;
    private OptionalNullable<String> bundleId;
    private OptionalNullable<String> usageRestrictionAction;
    private OptionalNullable<String> productRestrictionAction;
    private List<String> products;
    private List<String> productGroups;
    private OptionalNullable<String> expiryDate;
    private OptionalNullable<String> clientReferenceId;
    private CardDetailAutoRenewEnum autoRenew;

    /**
     * Default constructor.
     */
    public CardDetail() {
    }

    /**
     * Initialization constructor.
     * @param  cardDeliveryType  Integer value for cardDeliveryType.
     * @param  pINAdviceType  Integer value for pINAdviceType.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  tokenTypeId  Integer value for tokenTypeId.
     * @param  embossText  String value for embossText.
     * @param  vRN  String value for vRN.
     * @param  driverName  String value for driverName.
     * @param  odometerInputRequired  Boolean value for odometerInputRequired.
     * @param  fleetIdInputRequired  Boolean value for fleetIdInputRequired.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  selfSelectedEncryptedPIN  String value for selfSelectedEncryptedPIN.
     * @param  selfSelectedPINKeyID  String value for selfSelectedPINKeyID.
     * @param  selfSelectedPINSessionKey  String value for selfSelectedPINSessionKey.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  isNewCardGroup  Boolean value for isNewCardGroup.
     * @param  embossCardGroup  Boolean value for embossCardGroup.
     * @param  cardContact  CardContact value for cardContact.
     * @param  pINDeliveryAddressType  Integer value for pINDeliveryAddressType.
     * @param  pINContact  PINContact value for pINContact.
     * @param  notifyCaller  Boolean value for notifyCaller.
     * @param  caller  String value for caller.
     * @param  notifyCallerOnSync  Boolean value for notifyCallerOnSync.
     * @param  validateFleetId  Boolean value for validateFleetId.
     * @param  fleetOption  String value for fleetOption.
     * @param  bundleId  String value for bundleId.
     * @param  usageRestrictionAction  String value for usageRestrictionAction.
     * @param  productRestrictionAction  String value for productRestrictionAction.
     * @param  products  List of String value for products.
     * @param  productGroups  List of String value for productGroups.
     * @param  expiryDate  String value for expiryDate.
     * @param  clientReferenceId  String value for clientReferenceId.
     * @param  autoRenew  CardDetailAutoRenewEnum value for autoRenew.
     */
    public CardDetail(
            Integer cardDeliveryType,
            Integer pINAdviceType,
            Integer payerId,
            String payerNumber,
            Integer accountId,
            String accountNumber,
            Integer colCoCode,
            Integer colCoId,
            Integer cardTypeId,
            Integer tokenTypeId,
            String embossText,
            String vRN,
            String driverName,
            Boolean odometerInputRequired,
            Boolean fleetIdInputRequired,
            Integer purchaseCategoryId,
            String selfSelectedEncryptedPIN,
            String selfSelectedPINKeyID,
            String selfSelectedPINSessionKey,
            Integer cardGroupId,
            String cardGroupName,
            Boolean isNewCardGroup,
            Boolean embossCardGroup,
            CardContact cardContact,
            Integer pINDeliveryAddressType,
            PINContact pINContact,
            Boolean notifyCaller,
            String caller,
            Boolean notifyCallerOnSync,
            Boolean validateFleetId,
            String fleetOption,
            String bundleId,
            String usageRestrictionAction,
            String productRestrictionAction,
            List<String> products,
            List<String> productGroups,
            String expiryDate,
            String clientReferenceId,
            CardDetailAutoRenewEnum autoRenew) {
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.colCoId = OptionalNullable.of(colCoId);
        this.cardTypeId = OptionalNullable.of(cardTypeId);
        this.tokenTypeId = OptionalNullable.of(tokenTypeId);
        this.embossText = OptionalNullable.of(embossText);
        this.vRN = OptionalNullable.of(vRN);
        this.driverName = OptionalNullable.of(driverName);
        this.odometerInputRequired = odometerInputRequired;
        this.fleetIdInputRequired = fleetIdInputRequired;
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
        this.selfSelectedEncryptedPIN = selfSelectedEncryptedPIN;
        this.selfSelectedPINKeyID = OptionalNullable.of(selfSelectedPINKeyID);
        this.selfSelectedPINSessionKey = OptionalNullable.of(selfSelectedPINSessionKey);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.isNewCardGroup = isNewCardGroup;
        this.embossCardGroup = embossCardGroup;
        this.cardDeliveryType = cardDeliveryType;
        this.cardContact = cardContact;
        this.pINDeliveryAddressType = OptionalNullable.of(pINDeliveryAddressType);
        this.pINAdviceType = pINAdviceType;
        this.pINContact = pINContact;
        this.notifyCaller = notifyCaller;
        this.caller = OptionalNullable.of(caller);
        this.notifyCallerOnSync = notifyCallerOnSync;
        this.validateFleetId = validateFleetId;
        this.fleetOption = OptionalNullable.of(fleetOption);
        this.bundleId = OptionalNullable.of(bundleId);
        this.usageRestrictionAction = OptionalNullable.of(usageRestrictionAction);
        this.productRestrictionAction = OptionalNullable.of(productRestrictionAction);
        this.products = products;
        this.productGroups = productGroups;
        this.expiryDate = OptionalNullable.of(expiryDate);
        this.clientReferenceId = OptionalNullable.of(clientReferenceId);
        this.autoRenew = autoRenew;
    }

    /**
     * Initialization constructor.
     * @param  cardDeliveryType  Integer value for cardDeliveryType.
     * @param  pINAdviceType  Integer value for pINAdviceType.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  tokenTypeId  Integer value for tokenTypeId.
     * @param  embossText  String value for embossText.
     * @param  vRN  String value for vRN.
     * @param  driverName  String value for driverName.
     * @param  odometerInputRequired  Boolean value for odometerInputRequired.
     * @param  fleetIdInputRequired  Boolean value for fleetIdInputRequired.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  selfSelectedEncryptedPIN  String value for selfSelectedEncryptedPIN.
     * @param  selfSelectedPINKeyID  String value for selfSelectedPINKeyID.
     * @param  selfSelectedPINSessionKey  String value for selfSelectedPINSessionKey.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  isNewCardGroup  Boolean value for isNewCardGroup.
     * @param  embossCardGroup  Boolean value for embossCardGroup.
     * @param  cardContact  CardContact value for cardContact.
     * @param  pINDeliveryAddressType  Integer value for pINDeliveryAddressType.
     * @param  pINContact  PINContact value for pINContact.
     * @param  notifyCaller  Boolean value for notifyCaller.
     * @param  caller  String value for caller.
     * @param  notifyCallerOnSync  Boolean value for notifyCallerOnSync.
     * @param  validateFleetId  Boolean value for validateFleetId.
     * @param  fleetOption  String value for fleetOption.
     * @param  bundleId  String value for bundleId.
     * @param  usageRestrictionAction  String value for usageRestrictionAction.
     * @param  productRestrictionAction  String value for productRestrictionAction.
     * @param  products  List of String value for products.
     * @param  productGroups  List of String value for productGroups.
     * @param  expiryDate  String value for expiryDate.
     * @param  clientReferenceId  String value for clientReferenceId.
     * @param  autoRenew  CardDetailAutoRenewEnum value for autoRenew.
     */

    protected CardDetail(Integer cardDeliveryType, Integer pINAdviceType,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<Integer> colCoCode, OptionalNullable<Integer> colCoId,
            OptionalNullable<Integer> cardTypeId, OptionalNullable<Integer> tokenTypeId,
            OptionalNullable<String> embossText, OptionalNullable<String> vRN,
            OptionalNullable<String> driverName, Boolean odometerInputRequired,
            Boolean fleetIdInputRequired, OptionalNullable<Integer> purchaseCategoryId,
            String selfSelectedEncryptedPIN, OptionalNullable<String> selfSelectedPINKeyID,
            OptionalNullable<String> selfSelectedPINSessionKey,
            OptionalNullable<Integer> cardGroupId, OptionalNullable<String> cardGroupName,
            Boolean isNewCardGroup, Boolean embossCardGroup, CardContact cardContact,
            OptionalNullable<Integer> pINDeliveryAddressType, PINContact pINContact,
            Boolean notifyCaller, OptionalNullable<String> caller, Boolean notifyCallerOnSync,
            Boolean validateFleetId, OptionalNullable<String> fleetOption,
            OptionalNullable<String> bundleId, OptionalNullable<String> usageRestrictionAction,
            OptionalNullable<String> productRestrictionAction, List<String> products,
            List<String> productGroups, OptionalNullable<String> expiryDate,
            OptionalNullable<String> clientReferenceId, CardDetailAutoRenewEnum autoRenew) {
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.colCoCode = colCoCode;
        this.colCoId = colCoId;
        this.cardTypeId = cardTypeId;
        this.tokenTypeId = tokenTypeId;
        this.embossText = embossText;
        this.vRN = vRN;
        this.driverName = driverName;
        this.odometerInputRequired = odometerInputRequired;
        this.fleetIdInputRequired = fleetIdInputRequired;
        this.purchaseCategoryId = purchaseCategoryId;
        this.selfSelectedEncryptedPIN = selfSelectedEncryptedPIN;
        this.selfSelectedPINKeyID = selfSelectedPINKeyID;
        this.selfSelectedPINSessionKey = selfSelectedPINSessionKey;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.isNewCardGroup = isNewCardGroup;
        this.embossCardGroup = embossCardGroup;
        this.cardDeliveryType = cardDeliveryType;
        this.cardContact = cardContact;
        this.pINDeliveryAddressType = pINDeliveryAddressType;
        this.pINAdviceType = pINAdviceType;
        this.pINContact = pINContact;
        this.notifyCaller = notifyCaller;
        this.caller = caller;
        this.notifyCallerOnSync = notifyCallerOnSync;
        this.validateFleetId = validateFleetId;
        this.fleetOption = fleetOption;
        this.bundleId = bundleId;
        this.usageRestrictionAction = usageRestrictionAction;
        this.productRestrictionAction = productRestrictionAction;
        this.products = products;
        this.productGroups = productGroups;
        this.expiryDate = expiryDate;
        this.clientReferenceId = clientReferenceId;
        this.autoRenew = autoRenew;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer.&lt;br /&gt; Optional if PayerNumber is passed else Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer.&lt;br /&gt; Optional if PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer.&lt;br /&gt; Optional if PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer.&lt;br /&gt; Optional if PayerNumber is passed else Mandatory
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account ID of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account ID of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account ID of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account ID of the customer.&lt;br /&gt; Optional if AccountNumber is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the customer.&lt;br /&gt; Optional if AccountId is passed, else mandatory.&lt;br /&gt;
     * This input is a search criterion, if given.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.&lt;br /&gt; Mandatory for serviced OUs
     * such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries
     * if ColCoID is provided.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.&lt;br /&gt; Mandatory for serviced OUs
     * such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries
     * if ColCoID is provided.
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.&lt;br /&gt; Mandatory for serviced OUs
     * such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries
     * if ColCoID is provided.
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.&lt;br /&gt; Mandatory for serviced OUs
     * such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries
     * if ColCoID is provided.
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id of the selected payer.&lt;br /&gt; Optional If ColCo Code is passed else
     * Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer.&lt;br /&gt; Optional If ColCo Code is passed else
     * Mandatory
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer.&lt;br /&gt; Optional If ColCo Code is passed else
     * Mandatory
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id of the selected payer.&lt;br /&gt; Optional If ColCo Code is passed else
     * Mandatory
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for CardTypeId.
     * Card Type ID&lt;br /&gt; Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardTypeId() {
        return this.cardTypeId;
    }

    /**
     * Getter for CardTypeId.
     * Card Type ID&lt;br /&gt; Mandatory
     * @return Returns the Integer
     */
    public Integer getCardTypeId() {
        return OptionalNullable.getFrom(cardTypeId);
    }

    /**
     * Setter for CardTypeId.
     * Card Type ID&lt;br /&gt; Mandatory
     * @param cardTypeId Value for Integer
     */
    @JsonSetter("CardTypeId")
    public void setCardTypeId(Integer cardTypeId) {
        this.cardTypeId = OptionalNullable.of(cardTypeId);
    }

    /**
     * UnSetter for CardTypeId.
     * Card Type ID&lt;br /&gt; Mandatory
     */
    public void unsetCardTypeId() {
        cardTypeId = null;
    }

    /**
     * Internal Getter for TokenTypeId.
     * Token Type Id – Linked to the selected card type&lt;br /&gt; Optional&lt;br /&gt; Default – Assign the
     * default token type associated with the card type of the card being created.&lt;br /&gt; The default
     * value will be set by the background process and an error (code 12009) will be thrown by the
     * background process when default value is not identified or invalid token type id is passed in
     * the request.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TokenTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTokenTypeId() {
        return this.tokenTypeId;
    }

    /**
     * Getter for TokenTypeId.
     * Token Type Id – Linked to the selected card type&lt;br /&gt; Optional&lt;br /&gt; Default – Assign the
     * default token type associated with the card type of the card being created.&lt;br /&gt; The default
     * value will be set by the background process and an error (code 12009) will be thrown by the
     * background process when default value is not identified or invalid token type id is passed in
     * the request.
     * @return Returns the Integer
     */
    public Integer getTokenTypeId() {
        return OptionalNullable.getFrom(tokenTypeId);
    }

    /**
     * Setter for TokenTypeId.
     * Token Type Id – Linked to the selected card type&lt;br /&gt; Optional&lt;br /&gt; Default – Assign the
     * default token type associated with the card type of the card being created.&lt;br /&gt; The default
     * value will be set by the background process and an error (code 12009) will be thrown by the
     * background process when default value is not identified or invalid token type id is passed in
     * the request.
     * @param tokenTypeId Value for Integer
     */
    @JsonSetter("TokenTypeId")
    public void setTokenTypeId(Integer tokenTypeId) {
        this.tokenTypeId = OptionalNullable.of(tokenTypeId);
    }

    /**
     * UnSetter for TokenTypeId.
     * Token Type Id – Linked to the selected card type&lt;br /&gt; Optional&lt;br /&gt; Default – Assign the
     * default token type associated with the card type of the card being created.&lt;br /&gt; The default
     * value will be set by the background process and an error (code 12009) will be thrown by the
     * background process when default value is not identified or invalid token type id is passed in
     * the request.
     */
    public void unsetTokenTypeId() {
        tokenTypeId = null;
    }

    /**
     * Internal Getter for EmbossText.
     * Text to be printed on the card as Account Name.&lt;br /&gt; Optional – When not provided default
     * emboss text associated with the card type will be embossed.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value should be validated against a configured list of allowed characters.&lt;br /&gt;
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     * @return Returns the Internal String
     */
    @JsonGetter("EmbossText")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmbossText() {
        return this.embossText;
    }

    /**
     * Getter for EmbossText.
     * Text to be printed on the card as Account Name.&lt;br /&gt; Optional – When not provided default
     * emboss text associated with the card type will be embossed.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value should be validated against a configured list of allowed characters.&lt;br /&gt;
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     * @return Returns the String
     */
    public String getEmbossText() {
        return OptionalNullable.getFrom(embossText);
    }

    /**
     * Setter for EmbossText.
     * Text to be printed on the card as Account Name.&lt;br /&gt; Optional – When not provided default
     * emboss text associated with the card type will be embossed.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value should be validated against a configured list of allowed characters.&lt;br /&gt;
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     * @param embossText Value for String
     */
    @JsonSetter("EmbossText")
    public void setEmbossText(String embossText) {
        this.embossText = OptionalNullable.of(embossText);
    }

    /**
     * UnSetter for EmbossText.
     * Text to be printed on the card as Account Name.&lt;br /&gt; Optional – When not provided default
     * emboss text associated with the card type will be embossed.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value should be validated against a configured list of allowed characters.&lt;br /&gt;
     * [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]
     */
    public void unsetEmbossText() {
        embossText = null;
    }

    /**
     * Internal Getter for VRN.
     * Vehicle registration number.&lt;br/&gt; Optional when DriverName is passed else mandatory.&lt;br/&gt;
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.&lt;br /&gt; Max length: 24&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] . &lt;/br&gt;Note: If Driver Name is null or
     * empty, max allowed characters for VRN is 16. When Driver Name is provided, max allowed
     * characters for VRN is 24.
     * @return Returns the Internal String
     */
    @JsonGetter("VRN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVRN() {
        return this.vRN;
    }

    /**
     * Getter for VRN.
     * Vehicle registration number.&lt;br/&gt; Optional when DriverName is passed else mandatory.&lt;br/&gt;
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.&lt;br /&gt; Max length: 24&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] . &lt;/br&gt;Note: If Driver Name is null or
     * empty, max allowed characters for VRN is 16. When Driver Name is provided, max allowed
     * characters for VRN is 24.
     * @return Returns the String
     */
    public String getVRN() {
        return OptionalNullable.getFrom(vRN);
    }

    /**
     * Setter for VRN.
     * Vehicle registration number.&lt;br/&gt; Optional when DriverName is passed else mandatory.&lt;br/&gt;
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.&lt;br /&gt; Max length: 24&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] . &lt;/br&gt;Note: If Driver Name is null or
     * empty, max allowed characters for VRN is 16. When Driver Name is provided, max allowed
     * characters for VRN is 24.
     * @param vRN Value for String
     */
    @JsonSetter("VRN")
    public void setVRN(String vRN) {
        this.vRN = OptionalNullable.of(vRN);
    }

    /**
     * UnSetter for VRN.
     * Vehicle registration number.&lt;br/&gt; Optional when DriverName is passed else mandatory.&lt;br/&gt;
     * Mandatory when ColCo setting is marked as ‘VRN mandatory’.&lt;br /&gt; Max length: 24&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ] . &lt;/br&gt;Note: If Driver Name is null or
     * empty, max allowed characters for VRN is 16. When Driver Name is provided, max allowed
     * characters for VRN is 24.
     */
    public void unsetVRN() {
        vRN = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver Name.&lt;br /&gt; Optional when VRN is passed else mandatory.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]&lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver Name.&lt;br /&gt; Optional when VRN is passed else mandatory.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]&lt;br /&gt;
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver Name.&lt;br /&gt; Optional when VRN is passed else mandatory.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]&lt;br /&gt;
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver Name.&lt;br /&gt; Optional when VRN is passed else mandatory.&lt;br /&gt; Max length: 27&lt;br /&gt; The
     * value will be validated against a configured list of allowed characters.&lt;br /&gt; Default value
     * for the configuration is: [-0-9A-Z,/''.&amp; ÄÖÜÅÆÉØ]&lt;br /&gt;
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Getter for OdometerInputRequired.
     * Odometer Input to be enabled on the card&lt;br /&gt; Optional.&lt;br /&gt; Default is False
     * @return Returns the Boolean
     */
    @JsonGetter("OdometerInputRequired")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getOdometerInputRequired() {
        return odometerInputRequired;
    }

    /**
     * Setter for OdometerInputRequired.
     * Odometer Input to be enabled on the card&lt;br /&gt; Optional.&lt;br /&gt; Default is False
     * @param odometerInputRequired Value for Boolean
     */
    @JsonSetter("OdometerInputRequired")
    public void setOdometerInputRequired(Boolean odometerInputRequired) {
        this.odometerInputRequired = odometerInputRequired;
    }

    /**
     * Getter for FleetIdInputRequired.
     * FleetId Input to be enabled on the card&lt;br /&gt; Optional.&lt;br /&gt; Default is False&lt;br /&gt; Note: If
     * AllowFleetIdInput settings of the account is disabled and this flag is marked true in the
     * request, then request will be processed with VRN input required enabled instead of Fleet Id
     * input required
     * @return Returns the Boolean
     */
    @JsonGetter("FleetIdInputRequired")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFleetIdInputRequired() {
        return fleetIdInputRequired;
    }

    /**
     * Setter for FleetIdInputRequired.
     * FleetId Input to be enabled on the card&lt;br /&gt; Optional.&lt;br /&gt; Default is False&lt;br /&gt; Note: If
     * AllowFleetIdInput settings of the account is disabled and this flag is marked true in the
     * request, then request will be processed with VRN input required enabled instead of Fleet Id
     * input required
     * @param fleetIdInputRequired Value for Boolean
     */
    @JsonSetter("FleetIdInputRequired")
    public void setFleetIdInputRequired(Boolean fleetIdInputRequired) {
        this.fleetIdInputRequired = fleetIdInputRequired;
    }

    /**
     * Internal Getter for PurchaseCategoryId.
     * Purchase category Id&lt;br /&gt; Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("PurchaseCategoryId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPurchaseCategoryId() {
        return this.purchaseCategoryId;
    }

    /**
     * Getter for PurchaseCategoryId.
     * Purchase category Id&lt;br /&gt; Mandatory
     * @return Returns the Integer
     */
    public Integer getPurchaseCategoryId() {
        return OptionalNullable.getFrom(purchaseCategoryId);
    }

    /**
     * Setter for PurchaseCategoryId.
     * Purchase category Id&lt;br /&gt; Mandatory
     * @param purchaseCategoryId Value for Integer
     */
    @JsonSetter("PurchaseCategoryId")
    public void setPurchaseCategoryId(Integer purchaseCategoryId) {
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
    }

    /**
     * UnSetter for PurchaseCategoryId.
     * Purchase category Id&lt;br /&gt; Mandatory
     */
    public void unsetPurchaseCategoryId() {
        purchaseCategoryId = null;
    }

    /**
     * Getter for SelfSelectedEncryptedPIN.
     * The encrypted value of self-selected PIN.&lt;br /&gt; Optional – When not provided, the PIN will be
     * auto generated(if the card token type supports PIN) and delivered based on the given PIN
     * delivery option.&lt;br /&gt; Max Length: 256
     * @return Returns the String
     */
    @JsonGetter("SelfSelectedEncryptedPIN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSelfSelectedEncryptedPIN() {
        return selfSelectedEncryptedPIN;
    }

    /**
     * Setter for SelfSelectedEncryptedPIN.
     * The encrypted value of self-selected PIN.&lt;br /&gt; Optional – When not provided, the PIN will be
     * auto generated(if the card token type supports PIN) and delivered based on the given PIN
     * delivery option.&lt;br /&gt; Max Length: 256
     * @param selfSelectedEncryptedPIN Value for String
     */
    @JsonSetter("SelfSelectedEncryptedPIN")
    public void setSelfSelectedEncryptedPIN(String selfSelectedEncryptedPIN) {
        this.selfSelectedEncryptedPIN = selfSelectedEncryptedPIN;
    }

    /**
     * Internal Getter for SelfSelectedPINKeyID.
     * KeyId of the PIN encrypted value.&lt;br /&gt; Mandatory, if opted for self-selected PIN else
     * optional.&lt;br /&gt; Max Length: 30
     * @return Returns the Internal String
     */
    @JsonGetter("SelfSelectedPINKeyID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSelfSelectedPINKeyID() {
        return this.selfSelectedPINKeyID;
    }

    /**
     * Getter for SelfSelectedPINKeyID.
     * KeyId of the PIN encrypted value.&lt;br /&gt; Mandatory, if opted for self-selected PIN else
     * optional.&lt;br /&gt; Max Length: 30
     * @return Returns the String
     */
    public String getSelfSelectedPINKeyID() {
        return OptionalNullable.getFrom(selfSelectedPINKeyID);
    }

    /**
     * Setter for SelfSelectedPINKeyID.
     * KeyId of the PIN encrypted value.&lt;br /&gt; Mandatory, if opted for self-selected PIN else
     * optional.&lt;br /&gt; Max Length: 30
     * @param selfSelectedPINKeyID Value for String
     */
    @JsonSetter("SelfSelectedPINKeyID")
    public void setSelfSelectedPINKeyID(String selfSelectedPINKeyID) {
        this.selfSelectedPINKeyID = OptionalNullable.of(selfSelectedPINKeyID);
    }

    /**
     * UnSetter for SelfSelectedPINKeyID.
     * KeyId of the PIN encrypted value.&lt;br /&gt; Mandatory, if opted for self-selected PIN else
     * optional.&lt;br /&gt; Max Length: 30
     */
    public void unsetSelfSelectedPINKeyID() {
        selfSelectedPINKeyID = null;
    }

    /**
     * Internal Getter for SelfSelectedPINSessionKey.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.&lt;br /&gt; The
     * encode message forms are provided to clients by another API (“TCS”).&lt;br /&gt; Instructions to
     * encrypt the PIN is covered in the related API specifications document.&lt;br /&gt; Mandatory –If
     * opted for self-selected PIN else optional. Max Length: 1024
     * @return Returns the Internal String
     */
    @JsonGetter("SelfSelectedPINSessionKey")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSelfSelectedPINSessionKey() {
        return this.selfSelectedPINSessionKey;
    }

    /**
     * Getter for SelfSelectedPINSessionKey.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.&lt;br /&gt; The
     * encode message forms are provided to clients by another API (“TCS”).&lt;br /&gt; Instructions to
     * encrypt the PIN is covered in the related API specifications document.&lt;br /&gt; Mandatory –If
     * opted for self-selected PIN else optional. Max Length: 1024
     * @return Returns the String
     */
    public String getSelfSelectedPINSessionKey() {
        return OptionalNullable.getFrom(selfSelectedPINSessionKey);
    }

    /**
     * Setter for SelfSelectedPINSessionKey.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.&lt;br /&gt; The
     * encode message forms are provided to clients by another API (“TCS”).&lt;br /&gt; Instructions to
     * encrypt the PIN is covered in the related API specifications document.&lt;br /&gt; Mandatory –If
     * opted for self-selected PIN else optional. Max Length: 1024
     * @param selfSelectedPINSessionKey Value for String
     */
    @JsonSetter("SelfSelectedPINSessionKey")
    public void setSelfSelectedPINSessionKey(String selfSelectedPINSessionKey) {
        this.selfSelectedPINSessionKey = OptionalNullable.of(selfSelectedPINSessionKey);
    }

    /**
     * UnSetter for SelfSelectedPINSessionKey.
     * Encoded message of the TCS form which is used for encrypting the PIN of this card.&lt;br /&gt; The
     * encode message forms are provided to clients by another API (“TCS”).&lt;br /&gt; Instructions to
     * encrypt the PIN is covered in the related API specifications document.&lt;br /&gt; Mandatory –If
     * opted for self-selected PIN else optional. Max Length: 1024
     */
    public void unsetSelfSelectedPINSessionKey() {
        selfSelectedPINSessionKey = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group ID&lt;br /&gt; Optional
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group ID&lt;br /&gt; Optional
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group ID&lt;br /&gt; Optional
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group ID&lt;br /&gt; Optional
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card group name&lt;br /&gt; This field is mandatory when IsNewCardGroup parameter is set to
     * true.&lt;br /&gt; Maximum field length: 40&lt;br /&gt; The value will be validated against a configured
     * list of allowed characters.&lt;br /&gt; Default value for the configuration is: [0-9A-Z.]
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card group name&lt;br /&gt; This field is mandatory when IsNewCardGroup parameter is set to
     * true.&lt;br /&gt; Maximum field length: 40&lt;br /&gt; The value will be validated against a configured
     * list of allowed characters.&lt;br /&gt; Default value for the configuration is: [0-9A-Z.]
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card group name&lt;br /&gt; This field is mandatory when IsNewCardGroup parameter is set to
     * true.&lt;br /&gt; Maximum field length: 40&lt;br /&gt; The value will be validated against a configured
     * list of allowed characters.&lt;br /&gt; Default value for the configuration is: [0-9A-Z.]
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card group name&lt;br /&gt; This field is mandatory when IsNewCardGroup parameter is set to
     * true.&lt;br /&gt; Maximum field length: 40&lt;br /&gt; The value will be validated against a configured
     * list of allowed characters.&lt;br /&gt; Default value for the configuration is: [0-9A-Z.]
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Getter for IsNewCardGroup.
     * This need to be set to true if the card group needs to be created prior to processing the
     * card order and the card needs to be assigned to the newly created card group.&lt;br /&gt;
     * Optional&lt;br /&gt; Default - False
     * @return Returns the Boolean
     */
    @JsonGetter("IsNewCardGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsNewCardGroup() {
        return isNewCardGroup;
    }

    /**
     * Setter for IsNewCardGroup.
     * This need to be set to true if the card group needs to be created prior to processing the
     * card order and the card needs to be assigned to the newly created card group.&lt;br /&gt;
     * Optional&lt;br /&gt; Default - False
     * @param isNewCardGroup Value for Boolean
     */
    @JsonSetter("IsNewCardGroup")
    public void setIsNewCardGroup(Boolean isNewCardGroup) {
        this.isNewCardGroup = isNewCardGroup;
    }

    /**
     * Getter for EmbossCardGroup.
     * This should be set to true if the card group name needs to be printed on the newly created
     * card under a new card group.&lt;br /&gt; Optional&lt;br /&gt; Default – False&lt;br /&gt; Note: This value will
     * be considered only if a new CardGroup is created for the Card.(i.e.when IsNewCardGroup is
     * true) If the Card is added to an existing CardGroup, the property ‘PrintOnCard’ set for the
     * CardGroup will determine whether the CardGroupName should be embossed on the Card.
     * @return Returns the Boolean
     */
    @JsonGetter("EmbossCardGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getEmbossCardGroup() {
        return embossCardGroup;
    }

    /**
     * Setter for EmbossCardGroup.
     * This should be set to true if the card group name needs to be printed on the newly created
     * card under a new card group.&lt;br /&gt; Optional&lt;br /&gt; Default – False&lt;br /&gt; Note: This value will
     * be considered only if a new CardGroup is created for the Card.(i.e.when IsNewCardGroup is
     * true) If the Card is added to an existing CardGroup, the property ‘PrintOnCard’ set for the
     * CardGroup will determine whether the CardGroupName should be embossed on the Card.
     * @param embossCardGroup Value for Boolean
     */
    @JsonSetter("EmbossCardGroup")
    public void setEmbossCardGroup(Boolean embossCardGroup) {
        this.embossCardGroup = embossCardGroup;
    }

    /**
     * Getter for CardDeliveryType.
     * Card delivery type.&lt;br /&gt; Mandatory &lt;br /&gt; Allowed Value: &lt;br /&gt; 1. Customer Address(Default)
     * &lt;br /&gt; 2. New Delivery Address
     * @return Returns the Integer
     */
    @JsonGetter("CardDeliveryType")
    public Integer getCardDeliveryType() {
        return cardDeliveryType;
    }

    /**
     * Setter for CardDeliveryType.
     * Card delivery type.&lt;br /&gt; Mandatory &lt;br /&gt; Allowed Value: &lt;br /&gt; 1. Customer Address(Default)
     * &lt;br /&gt; 2. New Delivery Address
     * @param cardDeliveryType Value for Integer
     */
    @JsonSetter("CardDeliveryType")
    public void setCardDeliveryType(Integer cardDeliveryType) {
        this.cardDeliveryType = cardDeliveryType;
    }

    /**
     * Getter for CardContact.
     * @return Returns the CardContact
     */
    @JsonGetter("CardContact")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CardContact getCardContact() {
        return cardContact;
    }

    /**
     * Setter for CardContact.
     * @param cardContact Value for CardContact
     */
    @JsonSetter("CardContact")
    public void setCardContact(CardContact cardContact) {
        this.cardContact = cardContact;
    }

    /**
     * Internal Getter for PINDeliveryAddressType.
     * PIN delivery address type selection.&lt;br /&gt; Optional&lt;br /&gt; Allowed Values:&lt;br /&gt; 1. Customer
     * Address(Default)&lt;br /&gt; 2. Card Address&lt;br /&gt; 3. New Delivery Address
     * @return Returns the Internal Integer
     */
    @JsonGetter("PINDeliveryAddressType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPINDeliveryAddressType() {
        return this.pINDeliveryAddressType;
    }

    /**
     * Getter for PINDeliveryAddressType.
     * PIN delivery address type selection.&lt;br /&gt; Optional&lt;br /&gt; Allowed Values:&lt;br /&gt; 1. Customer
     * Address(Default)&lt;br /&gt; 2. Card Address&lt;br /&gt; 3. New Delivery Address
     * @return Returns the Integer
     */
    public Integer getPINDeliveryAddressType() {
        return OptionalNullable.getFrom(pINDeliveryAddressType);
    }

    /**
     * Setter for PINDeliveryAddressType.
     * PIN delivery address type selection.&lt;br /&gt; Optional&lt;br /&gt; Allowed Values:&lt;br /&gt; 1. Customer
     * Address(Default)&lt;br /&gt; 2. Card Address&lt;br /&gt; 3. New Delivery Address
     * @param pINDeliveryAddressType Value for Integer
     */
    @JsonSetter("PINDeliveryAddressType")
    public void setPINDeliveryAddressType(Integer pINDeliveryAddressType) {
        this.pINDeliveryAddressType = OptionalNullable.of(pINDeliveryAddressType);
    }

    /**
     * UnSetter for PINDeliveryAddressType.
     * PIN delivery address type selection.&lt;br /&gt; Optional&lt;br /&gt; Allowed Values:&lt;br /&gt; 1. Customer
     * Address(Default)&lt;br /&gt; 2. Card Address&lt;br /&gt; 3. New Delivery Address
     */
    public void unsetPINDeliveryAddressType() {
        pINDeliveryAddressType = null;
    }

    /**
     * Getter for PINAdviceType.
     * PIN delivery method.&lt;br /&gt; Mandatory&lt;br /&gt; Allowed Values:&lt;br /&gt; 1. Paper&lt;br /&gt; 2. Email&lt;br
     * /&gt; 3. SMS&lt;br /&gt; 4. None &lt;br /&gt; **Note:** Paper delivery not applicable for selfselctedPIN
     * type
     * @return Returns the Integer
     */
    @JsonGetter("PINAdviceType")
    public Integer getPINAdviceType() {
        return pINAdviceType;
    }

    /**
     * Setter for PINAdviceType.
     * PIN delivery method.&lt;br /&gt; Mandatory&lt;br /&gt; Allowed Values:&lt;br /&gt; 1. Paper&lt;br /&gt; 2. Email&lt;br
     * /&gt; 3. SMS&lt;br /&gt; 4. None &lt;br /&gt; **Note:** Paper delivery not applicable for selfselctedPIN
     * type
     * @param pINAdviceType Value for Integer
     */
    @JsonSetter("PINAdviceType")
    public void setPINAdviceType(Integer pINAdviceType) {
        this.pINAdviceType = pINAdviceType;
    }

    /**
     * Getter for PINContact.
     * @return Returns the PINContact
     */
    @JsonGetter("PINContact")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PINContact getPINContact() {
        return pINContact;
    }

    /**
     * Setter for PINContact.
     * @param pINContact Value for PINContact
     */
    @JsonSetter("PINContact")
    public void setPINContact(PINContact pINContact) {
        this.pINContact = pINContact;
    }

    /**
     * Getter for NotifyCaller.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failure after the card order is processed. This webhook
     * feature has to be subscribed by the customer prior to use , please refer the API
     * documentation for the more details.
     * @return Returns the Boolean
     */
    @JsonGetter("NotifyCaller")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNotifyCaller() {
        return notifyCaller;
    }

    /**
     * Setter for NotifyCaller.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failure after the card order is processed. This webhook
     * feature has to be subscribed by the customer prior to use , please refer the API
     * documentation for the more details.
     * @param notifyCaller Value for Boolean
     */
    @JsonSetter("NotifyCaller")
    public void setNotifyCaller(Boolean notifyCaller) {
        this.notifyCaller = notifyCaller;
    }

    /**
     * Internal Getter for Caller.
     * The caller to be notified with the status of the card order.&lt;br /&gt; Mandatory, if NotifyCaller
     * is true.&lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed values:&lt;br /&gt; • “NextGenUI”: This value
     * to be used by next gen UI application.&lt;br /&gt; • “FleetHubUILifeTime”: This value to be used by
     * Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive
     * @return Returns the Internal String
     */
    @JsonGetter("Caller")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCaller() {
        return this.caller;
    }

    /**
     * Getter for Caller.
     * The caller to be notified with the status of the card order.&lt;br /&gt; Mandatory, if NotifyCaller
     * is true.&lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed values:&lt;br /&gt; • “NextGenUI”: This value
     * to be used by next gen UI application.&lt;br /&gt; • “FleetHubUILifeTime”: This value to be used by
     * Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive
     * @return Returns the String
     */
    public String getCaller() {
        return OptionalNullable.getFrom(caller);
    }

    /**
     * Setter for Caller.
     * The caller to be notified with the status of the card order.&lt;br /&gt; Mandatory, if NotifyCaller
     * is true.&lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed values:&lt;br /&gt; • “NextGenUI”: This value
     * to be used by next gen UI application.&lt;br /&gt; • “FleetHubUILifeTime”: This value to be used by
     * Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive
     * @param caller Value for String
     */
    @JsonSetter("Caller")
    public void setCaller(String caller) {
        this.caller = OptionalNullable.of(caller);
    }

    /**
     * UnSetter for Caller.
     * The caller to be notified with the status of the card order.&lt;br /&gt; Mandatory, if NotifyCaller
     * is true.&lt;br /&gt; Maximum field length: 20&lt;br /&gt; Allowed values:&lt;br /&gt; • “NextGenUI”: This value
     * to be used by next gen UI application.&lt;br /&gt; • “FleetHubUILifeTime”: This value to be used by
     * Fleet Hub UI application for life time restriction cards.&lt;br /&gt; Note: The values passed in
     * this field are case insensitive
     */
    public void unsetCaller() {
        caller = null;
    }

    /**
     * Getter for NotifyCallerOnSync.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failed after the processed card is synced with Gateway.
     * @return Returns the Boolean
     */
    @JsonGetter("NotifyCallerOnSync")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNotifyCallerOnSync() {
        return notifyCallerOnSync;
    }

    /**
     * Setter for NotifyCallerOnSync.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; If true, the caller would be notified
     * back with the status as success or failed after the processed card is synced with Gateway.
     * @param notifyCallerOnSync Value for Boolean
     */
    @JsonSetter("NotifyCallerOnSync")
    public void setNotifyCallerOnSync(Boolean notifyCallerOnSync) {
        this.notifyCallerOnSync = notifyCallerOnSync;
    }

    /**
     * Getter for ValidateFleetId.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; For cards ordered with Validate Fleet
     * Id parameter set to true, CFGW will be notified to enable this validation for the card.&lt;br /&gt;
     * Note: When “FleetIdInputRequired” is not set on the card, validate fleet id will be
     * considered false regardless of the value passed on this parameter.
     * @return Returns the Boolean
     */
    @JsonGetter("ValidateFleetId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getValidateFleetId() {
        return validateFleetId;
    }

    /**
     * Setter for ValidateFleetId.
     * True/False.&lt;br /&gt; Optional.&lt;br /&gt; Default: False&lt;br /&gt; For cards ordered with Validate Fleet
     * Id parameter set to true, CFGW will be notified to enable this validation for the card.&lt;br /&gt;
     * Note: When “FleetIdInputRequired” is not set on the card, validate fleet id will be
     * considered false regardless of the value passed on this parameter.
     * @param validateFleetId Value for Boolean
     */
    @JsonSetter("ValidateFleetId")
    public void setValidateFleetId(Boolean validateFleetId) {
        this.validateFleetId = validateFleetId;
    }

    /**
     * Internal Getter for FleetOption.
     * Type of action will be performed for the card when the fleet Id is validated.&lt;br /&gt;
     * Optional.&lt;br /&gt; Default: NO_VALIDATION&lt;br /&gt; Allowed values:&lt;br /&gt; • ALERT&lt;br /&gt; • DECLINE&lt;br
     * /&gt; • DECLINE_ALERT&lt;br /&gt; • NO_VALIDATION&lt;br /&gt; Note: When FleetIdOption is not provided and
     * validatefleetid is true then by default allowed value is NO_VALIDATION.
     * @return Returns the Internal String
     */
    @JsonGetter("FleetOption")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetOption() {
        return this.fleetOption;
    }

    /**
     * Getter for FleetOption.
     * Type of action will be performed for the card when the fleet Id is validated.&lt;br /&gt;
     * Optional.&lt;br /&gt; Default: NO_VALIDATION&lt;br /&gt; Allowed values:&lt;br /&gt; • ALERT&lt;br /&gt; • DECLINE&lt;br
     * /&gt; • DECLINE_ALERT&lt;br /&gt; • NO_VALIDATION&lt;br /&gt; Note: When FleetIdOption is not provided and
     * validatefleetid is true then by default allowed value is NO_VALIDATION.
     * @return Returns the String
     */
    public String getFleetOption() {
        return OptionalNullable.getFrom(fleetOption);
    }

    /**
     * Setter for FleetOption.
     * Type of action will be performed for the card when the fleet Id is validated.&lt;br /&gt;
     * Optional.&lt;br /&gt; Default: NO_VALIDATION&lt;br /&gt; Allowed values:&lt;br /&gt; • ALERT&lt;br /&gt; • DECLINE&lt;br
     * /&gt; • DECLINE_ALERT&lt;br /&gt; • NO_VALIDATION&lt;br /&gt; Note: When FleetIdOption is not provided and
     * validatefleetid is true then by default allowed value is NO_VALIDATION.
     * @param fleetOption Value for String
     */
    @JsonSetter("FleetOption")
    public void setFleetOption(String fleetOption) {
        this.fleetOption = OptionalNullable.of(fleetOption);
    }

    /**
     * UnSetter for FleetOption.
     * Type of action will be performed for the card when the fleet Id is validated.&lt;br /&gt;
     * Optional.&lt;br /&gt; Default: NO_VALIDATION&lt;br /&gt; Allowed values:&lt;br /&gt; • ALERT&lt;br /&gt; • DECLINE&lt;br
     * /&gt; • DECLINE_ALERT&lt;br /&gt; • NO_VALIDATION&lt;br /&gt; Note: When FleetIdOption is not provided and
     * validatefleetid is true then by default allowed value is NO_VALIDATION.
     */
    public void unsetFleetOption() {
        fleetOption = null;
    }

    /**
     * Internal Getter for BundleId.
     * Gateway Bundle Id to which the ordered card will be added.&lt;br /&gt; Optional.&lt;br /&gt; When a valid
     * bundle Id is passed, upon successful processing of Card Order, the card will be added to the
     * provided bundle in Gateway. If card bundle has crossed the limit of 500 cards or if the card
     * bundle is not available in the gateway then the background services will fail to added the
     * card to the bundle.
     * @return Returns the Internal String
     */
    @JsonGetter("BundleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBundleId() {
        return this.bundleId;
    }

    /**
     * Getter for BundleId.
     * Gateway Bundle Id to which the ordered card will be added.&lt;br /&gt; Optional.&lt;br /&gt; When a valid
     * bundle Id is passed, upon successful processing of Card Order, the card will be added to the
     * provided bundle in Gateway. If card bundle has crossed the limit of 500 cards or if the card
     * bundle is not available in the gateway then the background services will fail to added the
     * card to the bundle.
     * @return Returns the String
     */
    public String getBundleId() {
        return OptionalNullable.getFrom(bundleId);
    }

    /**
     * Setter for BundleId.
     * Gateway Bundle Id to which the ordered card will be added.&lt;br /&gt; Optional.&lt;br /&gt; When a valid
     * bundle Id is passed, upon successful processing of Card Order, the card will be added to the
     * provided bundle in Gateway. If card bundle has crossed the limit of 500 cards or if the card
     * bundle is not available in the gateway then the background services will fail to added the
     * card to the bundle.
     * @param bundleId Value for String
     */
    @JsonSetter("BundleId")
    public void setBundleId(String bundleId) {
        this.bundleId = OptionalNullable.of(bundleId);
    }

    /**
     * UnSetter for BundleId.
     * Gateway Bundle Id to which the ordered card will be added.&lt;br /&gt; Optional.&lt;br /&gt; When a valid
     * bundle Id is passed, upon successful processing of Card Order, the card will be added to the
     * provided bundle in Gateway. If card bundle has crossed the limit of 500 cards or if the card
     * bundle is not available in the gateway then the background services will fail to added the
     * card to the bundle.
     */
    public void unsetBundleId() {
        bundleId = null;
    }

    /**
     * Internal Getter for UsageRestrictionAction.
     * The value indicates what actions is to be performed with respect to usage restrictions on the
     * card being ordered.&lt;br /&gt; UsageRestrictionAction is mandatory when bundle Id is passed. Else
     * ignored.&lt;br /&gt; Allowed values: –&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None
     * @return Returns the Internal String
     */
    @JsonGetter("UsageRestrictionAction")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUsageRestrictionAction() {
        return this.usageRestrictionAction;
    }

    /**
     * Getter for UsageRestrictionAction.
     * The value indicates what actions is to be performed with respect to usage restrictions on the
     * card being ordered.&lt;br /&gt; UsageRestrictionAction is mandatory when bundle Id is passed. Else
     * ignored.&lt;br /&gt; Allowed values: –&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None
     * @return Returns the String
     */
    public String getUsageRestrictionAction() {
        return OptionalNullable.getFrom(usageRestrictionAction);
    }

    /**
     * Setter for UsageRestrictionAction.
     * The value indicates what actions is to be performed with respect to usage restrictions on the
     * card being ordered.&lt;br /&gt; UsageRestrictionAction is mandatory when bundle Id is passed. Else
     * ignored.&lt;br /&gt; Allowed values: –&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None
     * @param usageRestrictionAction Value for String
     */
    @JsonSetter("UsageRestrictionAction")
    public void setUsageRestrictionAction(String usageRestrictionAction) {
        this.usageRestrictionAction = OptionalNullable.of(usageRestrictionAction);
    }

    /**
     * UnSetter for UsageRestrictionAction.
     * The value indicates what actions is to be performed with respect to usage restrictions on the
     * card being ordered.&lt;br /&gt; UsageRestrictionAction is mandatory when bundle Id is passed. Else
     * ignored.&lt;br /&gt; Allowed values: –&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None
     */
    public void unsetUsageRestrictionAction() {
        usageRestrictionAction = null;
    }

    /**
     * Internal Getter for ProductRestrictionAction.
     * The value indicates what actions is to be performed with respect to product restrictions on
     * the card being ordered.&lt;br /&gt; ProductRestrictionAction is mandatory when bundle Id is passed.
     * Else ignored.&lt;br /&gt; Allowed values: -&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None&lt;br /&gt; Note:
     * This field is applicable when product restrictions
     * @return Returns the Internal String
     */
    @JsonGetter("ProductRestrictionAction")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductRestrictionAction() {
        return this.productRestrictionAction;
    }

    /**
     * Getter for ProductRestrictionAction.
     * The value indicates what actions is to be performed with respect to product restrictions on
     * the card being ordered.&lt;br /&gt; ProductRestrictionAction is mandatory when bundle Id is passed.
     * Else ignored.&lt;br /&gt; Allowed values: -&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None&lt;br /&gt; Note:
     * This field is applicable when product restrictions
     * @return Returns the String
     */
    public String getProductRestrictionAction() {
        return OptionalNullable.getFrom(productRestrictionAction);
    }

    /**
     * Setter for ProductRestrictionAction.
     * The value indicates what actions is to be performed with respect to product restrictions on
     * the card being ordered.&lt;br /&gt; ProductRestrictionAction is mandatory when bundle Id is passed.
     * Else ignored.&lt;br /&gt; Allowed values: -&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None&lt;br /&gt; Note:
     * This field is applicable when product restrictions
     * @param productRestrictionAction Value for String
     */
    @JsonSetter("ProductRestrictionAction")
    public void setProductRestrictionAction(String productRestrictionAction) {
        this.productRestrictionAction = OptionalNullable.of(productRestrictionAction);
    }

    /**
     * UnSetter for ProductRestrictionAction.
     * The value indicates what actions is to be performed with respect to product restrictions on
     * the card being ordered.&lt;br /&gt; ProductRestrictionAction is mandatory when bundle Id is passed.
     * Else ignored.&lt;br /&gt; Allowed values: -&lt;br /&gt; • Update&lt;br /&gt; • Default&lt;br /&gt; • None&lt;br /&gt; Note:
     * This field is applicable when product restrictions
     */
    public void unsetProductRestrictionAction() {
        productRestrictionAction = null;
    }

    /**
     * Getter for Products.
     * An array of 3-digit global product codes.&lt;br /&gt; Optional.&lt;br /&gt; Default restrictions will be
     * applied both products and product groups are null or empty.&lt;br /&gt; Note: This field is
     * applicable when product restrictions are migrated to CFGW else, it will be ignored.
     * @return Returns the List of String
     */
    @JsonGetter("Products")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getProducts() {
        return products;
    }

    /**
     * Setter for Products.
     * An array of 3-digit global product codes.&lt;br /&gt; Optional.&lt;br /&gt; Default restrictions will be
     * applied both products and product groups are null or empty.&lt;br /&gt; Note: This field is
     * applicable when product restrictions are migrated to CFGW else, it will be ignored.
     * @param products Value for List of String
     */
    @JsonSetter("Products")
    public void setProducts(List<String> products) {
        this.products = products;
    }

    /**
     * Getter for ProductGroups.
     * An array of product group ids.&lt;br /&gt; Optional.&lt;br /&gt; Default restrictions will be applied
     * both products and product groups are null or empty.&lt;br /&gt; Note: This field is applicable when
     * product restrictions are migrated to CFGW else, it will be ignored
     * @return Returns the List of String
     */
    @JsonGetter("ProductGroups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getProductGroups() {
        return productGroups;
    }

    /**
     * Setter for ProductGroups.
     * An array of product group ids.&lt;br /&gt; Optional.&lt;br /&gt; Default restrictions will be applied
     * both products and product groups are null or empty.&lt;br /&gt; Note: This field is applicable when
     * product restrictions are migrated to CFGW else, it will be ignored
     * @param productGroups Value for List of String
     */
    @JsonSetter("ProductGroups")
    public void setProductGroups(List<String> productGroups) {
        this.productGroups = productGroups;
    }

    /**
     * Internal Getter for ExpiryDate.
     * Expiry Date for newly created card to be update in cards plot form.&lt;br /&gt; Optional.&lt;br /&gt;
     * Format: MMyy&lt;br /&gt; If not apply default Expiry Date.&lt;br /&gt; Note: There is a limit to the
     * ExpiryDate which the user can choose for the Card. The expiry date which can be set for a
     * card depends on the Card Type and the associated business rules for the OU. If the user
     * chooses a later ExpiryDate than the allowed value for the CardType for the OU, Default
     * Assigned Expiry Date will be applied on the card.
     * @return Returns the Internal String
     */
    @JsonGetter("ExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiryDate() {
        return this.expiryDate;
    }

    /**
     * Getter for ExpiryDate.
     * Expiry Date for newly created card to be update in cards plot form.&lt;br /&gt; Optional.&lt;br /&gt;
     * Format: MMyy&lt;br /&gt; If not apply default Expiry Date.&lt;br /&gt; Note: There is a limit to the
     * ExpiryDate which the user can choose for the Card. The expiry date which can be set for a
     * card depends on the Card Type and the associated business rules for the OU. If the user
     * chooses a later ExpiryDate than the allowed value for the CardType for the OU, Default
     * Assigned Expiry Date will be applied on the card.
     * @return Returns the String
     */
    public String getExpiryDate() {
        return OptionalNullable.getFrom(expiryDate);
    }

    /**
     * Setter for ExpiryDate.
     * Expiry Date for newly created card to be update in cards plot form.&lt;br /&gt; Optional.&lt;br /&gt;
     * Format: MMyy&lt;br /&gt; If not apply default Expiry Date.&lt;br /&gt; Note: There is a limit to the
     * ExpiryDate which the user can choose for the Card. The expiry date which can be set for a
     * card depends on the Card Type and the associated business rules for the OU. If the user
     * chooses a later ExpiryDate than the allowed value for the CardType for the OU, Default
     * Assigned Expiry Date will be applied on the card.
     * @param expiryDate Value for String
     */
    @JsonSetter("ExpiryDate")
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = OptionalNullable.of(expiryDate);
    }

    /**
     * UnSetter for ExpiryDate.
     * Expiry Date for newly created card to be update in cards plot form.&lt;br /&gt; Optional.&lt;br /&gt;
     * Format: MMyy&lt;br /&gt; If not apply default Expiry Date.&lt;br /&gt; Note: There is a limit to the
     * ExpiryDate which the user can choose for the Card. The expiry date which can be set for a
     * card depends on the Card Type and the associated business rules for the OU. If the user
     * chooses a later ExpiryDate than the allowed value for the CardType for the OU, Default
     * Assigned Expiry Date will be applied on the card.
     */
    public void unsetExpiryDate() {
        expiryDate = null;
    }

    /**
     * Internal Getter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the
     * client.This will be playback in the ordercard enquiry&lt;br /&gt; Optional
     * @return Returns the Internal String
     */
    @JsonGetter("ClientReferenceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetClientReferenceId() {
        return this.clientReferenceId;
    }

    /**
     * Getter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the
     * client.This will be playback in the ordercard enquiry&lt;br /&gt; Optional
     * @return Returns the String
     */
    public String getClientReferenceId() {
        return OptionalNullable.getFrom(clientReferenceId);
    }

    /**
     * Setter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the
     * client.This will be playback in the ordercard enquiry&lt;br /&gt; Optional
     * @param clientReferenceId Value for String
     */
    @JsonSetter("ClientReferenceId")
    public void setClientReferenceId(String clientReferenceId) {
        this.clientReferenceId = OptionalNullable.of(clientReferenceId);
    }

    /**
     * UnSetter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the
     * client.This will be playback in the ordercard enquiry&lt;br /&gt; Optional
     */
    public void unsetClientReferenceId() {
        clientReferenceId = null;
    }

    /**
     * Getter for AutoRenew.
     * @return Returns the CardDetailAutoRenewEnum
     */
    @JsonGetter("AutoRenew")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CardDetailAutoRenewEnum getAutoRenew() {
        return autoRenew;
    }

    /**
     * Setter for AutoRenew.
     * @param autoRenew Value for CardDetailAutoRenewEnum
     */
    @JsonSetter("AutoRenew")
    public void setAutoRenew(CardDetailAutoRenewEnum autoRenew) {
        this.autoRenew = autoRenew;
    }

    /**
     * Converts this CardDetail into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CardDetail [" + "cardDeliveryType=" + cardDeliveryType + ", pINAdviceType="
                + pINAdviceType + ", payerId=" + payerId + ", payerNumber=" + payerNumber
                + ", accountId=" + accountId + ", accountNumber=" + accountNumber + ", colCoCode="
                + colCoCode + ", colCoId=" + colCoId + ", cardTypeId=" + cardTypeId
                + ", tokenTypeId=" + tokenTypeId + ", embossText=" + embossText + ", vRN=" + vRN
                + ", driverName=" + driverName + ", odometerInputRequired=" + odometerInputRequired
                + ", fleetIdInputRequired=" + fleetIdInputRequired + ", purchaseCategoryId="
                + purchaseCategoryId + ", selfSelectedEncryptedPIN=" + selfSelectedEncryptedPIN
                + ", selfSelectedPINKeyID=" + selfSelectedPINKeyID + ", selfSelectedPINSessionKey="
                + selfSelectedPINSessionKey + ", cardGroupId=" + cardGroupId + ", cardGroupName="
                + cardGroupName + ", isNewCardGroup=" + isNewCardGroup + ", embossCardGroup="
                + embossCardGroup + ", cardContact=" + cardContact + ", pINDeliveryAddressType="
                + pINDeliveryAddressType + ", pINContact=" + pINContact + ", notifyCaller="
                + notifyCaller + ", caller=" + caller + ", notifyCallerOnSync=" + notifyCallerOnSync
                + ", validateFleetId=" + validateFleetId + ", fleetOption=" + fleetOption
                + ", bundleId=" + bundleId + ", usageRestrictionAction=" + usageRestrictionAction
                + ", productRestrictionAction=" + productRestrictionAction + ", products="
                + products + ", productGroups=" + productGroups + ", expiryDate=" + expiryDate
                + ", clientReferenceId=" + clientReferenceId + ", autoRenew=" + autoRenew + "]";
    }

    /**
     * Builds a new {@link CardDetail.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CardDetail.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(cardDeliveryType, pINAdviceType)
                .odometerInputRequired(getOdometerInputRequired())
                .fleetIdInputRequired(getFleetIdInputRequired())
                .selfSelectedEncryptedPIN(getSelfSelectedEncryptedPIN())
                .isNewCardGroup(getIsNewCardGroup())
                .embossCardGroup(getEmbossCardGroup())
                .cardContact(getCardContact())
                .pINContact(getPINContact())
                .notifyCaller(getNotifyCaller())
                .notifyCallerOnSync(getNotifyCallerOnSync())
                .validateFleetId(getValidateFleetId())
                .products(getProducts())
                .productGroups(getProductGroups())
                .autoRenew(getAutoRenew());
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.colCoCode = internalGetColCoCode();
        builder.colCoId = internalGetColCoId();
        builder.cardTypeId = internalGetCardTypeId();
        builder.tokenTypeId = internalGetTokenTypeId();
        builder.embossText = internalGetEmbossText();
        builder.vRN = internalGetVRN();
        builder.driverName = internalGetDriverName();
        builder.purchaseCategoryId = internalGetPurchaseCategoryId();
        builder.selfSelectedPINKeyID = internalGetSelfSelectedPINKeyID();
        builder.selfSelectedPINSessionKey = internalGetSelfSelectedPINSessionKey();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.pINDeliveryAddressType = internalGetPINDeliveryAddressType();
        builder.caller = internalGetCaller();
        builder.fleetOption = internalGetFleetOption();
        builder.bundleId = internalGetBundleId();
        builder.usageRestrictionAction = internalGetUsageRestrictionAction();
        builder.productRestrictionAction = internalGetProductRestrictionAction();
        builder.expiryDate = internalGetExpiryDate();
        builder.clientReferenceId = internalGetClientReferenceId();
        return builder;
    }

    /**
     * Class to build instances of {@link CardDetail}.
     */
    public static class Builder {
        private Integer cardDeliveryType;
        private Integer pINAdviceType;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> cardTypeId;
        private OptionalNullable<Integer> tokenTypeId;
        private OptionalNullable<String> embossText;
        private OptionalNullable<String> vRN;
        private OptionalNullable<String> driverName;
        private Boolean odometerInputRequired;
        private Boolean fleetIdInputRequired;
        private OptionalNullable<Integer> purchaseCategoryId;
        private String selfSelectedEncryptedPIN;
        private OptionalNullable<String> selfSelectedPINKeyID;
        private OptionalNullable<String> selfSelectedPINSessionKey;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private Boolean isNewCardGroup;
        private Boolean embossCardGroup;
        private CardContact cardContact;
        private OptionalNullable<Integer> pINDeliveryAddressType;
        private PINContact pINContact;
        private Boolean notifyCaller;
        private OptionalNullable<String> caller;
        private Boolean notifyCallerOnSync;
        private Boolean validateFleetId;
        private OptionalNullable<String> fleetOption;
        private OptionalNullable<String> bundleId;
        private OptionalNullable<String> usageRestrictionAction;
        private OptionalNullable<String> productRestrictionAction;
        private List<String> products;
        private List<String> productGroups;
        private OptionalNullable<String> expiryDate;
        private OptionalNullable<String> clientReferenceId;
        private CardDetailAutoRenewEnum autoRenew;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  cardDeliveryType  Integer value for cardDeliveryType.
         * @param  pINAdviceType  Integer value for pINAdviceType.
         */
        public Builder(Integer cardDeliveryType, Integer pINAdviceType) {
            this.cardDeliveryType = cardDeliveryType;
            this.pINAdviceType = pINAdviceType;
        }

        /**
         * Setter for cardDeliveryType.
         * @param  cardDeliveryType  Integer value for cardDeliveryType.
         * @return Builder
         */
        public Builder cardDeliveryType(Integer cardDeliveryType) {
            this.cardDeliveryType = cardDeliveryType;
            return this;
        }

        /**
         * Setter for pINAdviceType.
         * @param  pINAdviceType  Integer value for pINAdviceType.
         * @return Builder
         */
        public Builder pINAdviceType(Integer pINAdviceType) {
            this.pINAdviceType = pINAdviceType;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for cardTypeId.
         * @param  cardTypeId  Integer value for cardTypeId.
         * @return Builder
         */
        public Builder cardTypeId(Integer cardTypeId) {
            this.cardTypeId = OptionalNullable.of(cardTypeId);
            return this;
        }

        /**
         * UnSetter for cardTypeId.
         * @return Builder
         */
        public Builder unsetCardTypeId() {
            cardTypeId = null;
            return this;
        }

        /**
         * Setter for tokenTypeId.
         * @param  tokenTypeId  Integer value for tokenTypeId.
         * @return Builder
         */
        public Builder tokenTypeId(Integer tokenTypeId) {
            this.tokenTypeId = OptionalNullable.of(tokenTypeId);
            return this;
        }

        /**
         * UnSetter for tokenTypeId.
         * @return Builder
         */
        public Builder unsetTokenTypeId() {
            tokenTypeId = null;
            return this;
        }

        /**
         * Setter for embossText.
         * @param  embossText  String value for embossText.
         * @return Builder
         */
        public Builder embossText(String embossText) {
            this.embossText = OptionalNullable.of(embossText);
            return this;
        }

        /**
         * UnSetter for embossText.
         * @return Builder
         */
        public Builder unsetEmbossText() {
            embossText = null;
            return this;
        }

        /**
         * Setter for vRN.
         * @param  vRN  String value for vRN.
         * @return Builder
         */
        public Builder vRN(String vRN) {
            this.vRN = OptionalNullable.of(vRN);
            return this;
        }

        /**
         * UnSetter for vRN.
         * @return Builder
         */
        public Builder unsetVRN() {
            vRN = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for odometerInputRequired.
         * @param  odometerInputRequired  Boolean value for odometerInputRequired.
         * @return Builder
         */
        public Builder odometerInputRequired(Boolean odometerInputRequired) {
            this.odometerInputRequired = odometerInputRequired;
            return this;
        }

        /**
         * Setter for fleetIdInputRequired.
         * @param  fleetIdInputRequired  Boolean value for fleetIdInputRequired.
         * @return Builder
         */
        public Builder fleetIdInputRequired(Boolean fleetIdInputRequired) {
            this.fleetIdInputRequired = fleetIdInputRequired;
            return this;
        }

        /**
         * Setter for purchaseCategoryId.
         * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
         * @return Builder
         */
        public Builder purchaseCategoryId(Integer purchaseCategoryId) {
            this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryId.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryId() {
            purchaseCategoryId = null;
            return this;
        }

        /**
         * Setter for selfSelectedEncryptedPIN.
         * @param  selfSelectedEncryptedPIN  String value for selfSelectedEncryptedPIN.
         * @return Builder
         */
        public Builder selfSelectedEncryptedPIN(String selfSelectedEncryptedPIN) {
            this.selfSelectedEncryptedPIN = selfSelectedEncryptedPIN;
            return this;
        }

        /**
         * Setter for selfSelectedPINKeyID.
         * @param  selfSelectedPINKeyID  String value for selfSelectedPINKeyID.
         * @return Builder
         */
        public Builder selfSelectedPINKeyID(String selfSelectedPINKeyID) {
            this.selfSelectedPINKeyID = OptionalNullable.of(selfSelectedPINKeyID);
            return this;
        }

        /**
         * UnSetter for selfSelectedPINKeyID.
         * @return Builder
         */
        public Builder unsetSelfSelectedPINKeyID() {
            selfSelectedPINKeyID = null;
            return this;
        }

        /**
         * Setter for selfSelectedPINSessionKey.
         * @param  selfSelectedPINSessionKey  String value for selfSelectedPINSessionKey.
         * @return Builder
         */
        public Builder selfSelectedPINSessionKey(String selfSelectedPINSessionKey) {
            this.selfSelectedPINSessionKey = OptionalNullable.of(selfSelectedPINSessionKey);
            return this;
        }

        /**
         * UnSetter for selfSelectedPINSessionKey.
         * @return Builder
         */
        public Builder unsetSelfSelectedPINSessionKey() {
            selfSelectedPINSessionKey = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for isNewCardGroup.
         * @param  isNewCardGroup  Boolean value for isNewCardGroup.
         * @return Builder
         */
        public Builder isNewCardGroup(Boolean isNewCardGroup) {
            this.isNewCardGroup = isNewCardGroup;
            return this;
        }

        /**
         * Setter for embossCardGroup.
         * @param  embossCardGroup  Boolean value for embossCardGroup.
         * @return Builder
         */
        public Builder embossCardGroup(Boolean embossCardGroup) {
            this.embossCardGroup = embossCardGroup;
            return this;
        }

        /**
         * Setter for cardContact.
         * @param  cardContact  CardContact value for cardContact.
         * @return Builder
         */
        public Builder cardContact(CardContact cardContact) {
            this.cardContact = cardContact;
            return this;
        }

        /**
         * Setter for pINDeliveryAddressType.
         * @param  pINDeliveryAddressType  Integer value for pINDeliveryAddressType.
         * @return Builder
         */
        public Builder pINDeliveryAddressType(Integer pINDeliveryAddressType) {
            this.pINDeliveryAddressType = OptionalNullable.of(pINDeliveryAddressType);
            return this;
        }

        /**
         * UnSetter for pINDeliveryAddressType.
         * @return Builder
         */
        public Builder unsetPINDeliveryAddressType() {
            pINDeliveryAddressType = null;
            return this;
        }

        /**
         * Setter for pINContact.
         * @param  pINContact  PINContact value for pINContact.
         * @return Builder
         */
        public Builder pINContact(PINContact pINContact) {
            this.pINContact = pINContact;
            return this;
        }

        /**
         * Setter for notifyCaller.
         * @param  notifyCaller  Boolean value for notifyCaller.
         * @return Builder
         */
        public Builder notifyCaller(Boolean notifyCaller) {
            this.notifyCaller = notifyCaller;
            return this;
        }

        /**
         * Setter for caller.
         * @param  caller  String value for caller.
         * @return Builder
         */
        public Builder caller(String caller) {
            this.caller = OptionalNullable.of(caller);
            return this;
        }

        /**
         * UnSetter for caller.
         * @return Builder
         */
        public Builder unsetCaller() {
            caller = null;
            return this;
        }

        /**
         * Setter for notifyCallerOnSync.
         * @param  notifyCallerOnSync  Boolean value for notifyCallerOnSync.
         * @return Builder
         */
        public Builder notifyCallerOnSync(Boolean notifyCallerOnSync) {
            this.notifyCallerOnSync = notifyCallerOnSync;
            return this;
        }

        /**
         * Setter for validateFleetId.
         * @param  validateFleetId  Boolean value for validateFleetId.
         * @return Builder
         */
        public Builder validateFleetId(Boolean validateFleetId) {
            this.validateFleetId = validateFleetId;
            return this;
        }

        /**
         * Setter for fleetOption.
         * @param  fleetOption  String value for fleetOption.
         * @return Builder
         */
        public Builder fleetOption(String fleetOption) {
            this.fleetOption = OptionalNullable.of(fleetOption);
            return this;
        }

        /**
         * UnSetter for fleetOption.
         * @return Builder
         */
        public Builder unsetFleetOption() {
            fleetOption = null;
            return this;
        }

        /**
         * Setter for bundleId.
         * @param  bundleId  String value for bundleId.
         * @return Builder
         */
        public Builder bundleId(String bundleId) {
            this.bundleId = OptionalNullable.of(bundleId);
            return this;
        }

        /**
         * UnSetter for bundleId.
         * @return Builder
         */
        public Builder unsetBundleId() {
            bundleId = null;
            return this;
        }

        /**
         * Setter for usageRestrictionAction.
         * @param  usageRestrictionAction  String value for usageRestrictionAction.
         * @return Builder
         */
        public Builder usageRestrictionAction(String usageRestrictionAction) {
            this.usageRestrictionAction = OptionalNullable.of(usageRestrictionAction);
            return this;
        }

        /**
         * UnSetter for usageRestrictionAction.
         * @return Builder
         */
        public Builder unsetUsageRestrictionAction() {
            usageRestrictionAction = null;
            return this;
        }

        /**
         * Setter for productRestrictionAction.
         * @param  productRestrictionAction  String value for productRestrictionAction.
         * @return Builder
         */
        public Builder productRestrictionAction(String productRestrictionAction) {
            this.productRestrictionAction = OptionalNullable.of(productRestrictionAction);
            return this;
        }

        /**
         * UnSetter for productRestrictionAction.
         * @return Builder
         */
        public Builder unsetProductRestrictionAction() {
            productRestrictionAction = null;
            return this;
        }

        /**
         * Setter for products.
         * @param  products  List of String value for products.
         * @return Builder
         */
        public Builder products(List<String> products) {
            this.products = products;
            return this;
        }

        /**
         * Setter for productGroups.
         * @param  productGroups  List of String value for productGroups.
         * @return Builder
         */
        public Builder productGroups(List<String> productGroups) {
            this.productGroups = productGroups;
            return this;
        }

        /**
         * Setter for expiryDate.
         * @param  expiryDate  String value for expiryDate.
         * @return Builder
         */
        public Builder expiryDate(String expiryDate) {
            this.expiryDate = OptionalNullable.of(expiryDate);
            return this;
        }

        /**
         * UnSetter for expiryDate.
         * @return Builder
         */
        public Builder unsetExpiryDate() {
            expiryDate = null;
            return this;
        }

        /**
         * Setter for clientReferenceId.
         * @param  clientReferenceId  String value for clientReferenceId.
         * @return Builder
         */
        public Builder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = OptionalNullable.of(clientReferenceId);
            return this;
        }

        /**
         * UnSetter for clientReferenceId.
         * @return Builder
         */
        public Builder unsetClientReferenceId() {
            clientReferenceId = null;
            return this;
        }

        /**
         * Setter for autoRenew.
         * @param  autoRenew  CardDetailAutoRenewEnum value for autoRenew.
         * @return Builder
         */
        public Builder autoRenew(CardDetailAutoRenewEnum autoRenew) {
            this.autoRenew = autoRenew;
            return this;
        }

        /**
         * Builds a new {@link CardDetail} object using the set fields.
         * @return {@link CardDetail}
         */
        public CardDetail build() {
            return new CardDetail(cardDeliveryType, pINAdviceType, payerId, payerNumber, accountId,
                    accountNumber, colCoCode, colCoId, cardTypeId, tokenTypeId, embossText, vRN,
                    driverName, odometerInputRequired, fleetIdInputRequired, purchaseCategoryId,
                    selfSelectedEncryptedPIN, selfSelectedPINKeyID, selfSelectedPINSessionKey,
                    cardGroupId, cardGroupName, isNewCardGroup, embossCardGroup, cardContact,
                    pINDeliveryAddressType, pINContact, notifyCaller, caller, notifyCallerOnSync,
                    validateFleetId, fleetOption, bundleId, usageRestrictionAction,
                    productRestrictionAction, products, productGroups, expiryDate,
                    clientReferenceId, autoRenew);
        }
    }
}
