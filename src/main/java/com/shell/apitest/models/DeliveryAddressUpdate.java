/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for DeliveryAddressUpdate type.
 */
public class DeliveryAddressUpdate {
    private Integer cardId;
    private String pAN;
    private String cardExpiryDate;
    private boolean useCustomerDefaultAddress;
    private UpdateCardRenewalAddress2 updateCardRenewalAddress;

    /**
     * Default constructor.
     */
    public DeliveryAddressUpdate() {
    }

    /**
     * Initialization constructor.
     * @param  useCustomerDefaultAddress  boolean value for useCustomerDefaultAddress.
     * @param  cardId  Integer value for cardId.
     * @param  pAN  String value for pAN.
     * @param  cardExpiryDate  String value for cardExpiryDate.
     * @param  updateCardRenewalAddress  UpdateCardRenewalAddress2 value for
     *         updateCardRenewalAddress.
     */
    public DeliveryAddressUpdate(
            boolean useCustomerDefaultAddress,
            Integer cardId,
            String pAN,
            String cardExpiryDate,
            UpdateCardRenewalAddress2 updateCardRenewalAddress) {
        this.cardId = cardId;
        this.pAN = pAN;
        this.cardExpiryDate = cardExpiryDate;
        this.useCustomerDefaultAddress = useCustomerDefaultAddress;
        this.updateCardRenewalAddress = updateCardRenewalAddress;
    }

    /**
     * Getter for CardId.
     * Card Id of the card. Optional if PAN is passed, else Mandatory.
     * @return Returns the Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCardId() {
        return cardId;
    }

    /**
     * Setter for CardId.
     * Card Id of the card. Optional if PAN is passed, else Mandatory.
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = cardId;
    }

    /**
     * Getter for PAN.
     * PAN of the card. Optional if CardId is passed, else Mandatory. Note: - PAN &amp; ExpiryDate
     * parameters will be considered only if CardId &amp; PANID are not provided.
     * @return Returns the String
     */
    @JsonGetter("PAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPAN() {
        return pAN;
    }

    /**
     * Setter for PAN.
     * PAN of the card. Optional if CardId is passed, else Mandatory. Note: - PAN &amp; ExpiryDate
     * parameters will be considered only if CardId &amp; PANID are not provided.
     * @param pAN Value for String
     */
    @JsonSetter("PAN")
    public void setPAN(String pAN) {
        this.pAN = pAN;
    }

    /**
     * Getter for CardExpiryDate.
     * Expiry date of the card. Mandatory if PAN is passed, else optional. Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("CardExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCardExpiryDate() {
        return cardExpiryDate;
    }

    /**
     * Setter for CardExpiryDate.
     * Expiry date of the card. Mandatory if PAN is passed, else optional. Format: yyyyMMdd
     * @param cardExpiryDate Value for String
     */
    @JsonSetter("CardExpiryDate")
    public void setCardExpiryDate(String cardExpiryDate) {
        this.cardExpiryDate = cardExpiryDate;
    }

    /**
     * Getter for UseCustomerDefaultAddress.
     * Whether to use the default delivery address configured at customer (or card group) level as
     * the delivery address for this card. Mandatory Note: If value is false then
     * ‘UpdateCardRenewalAddress’ is mandatory. If value set to ‘True’ then
     * ‘UpdateCardRenewalAddress’ may be null/empty. It will be ignored if provided.
     * @return Returns the boolean
     */
    @JsonGetter("UseCustomerDefaultAddress")
    public boolean getUseCustomerDefaultAddress() {
        return useCustomerDefaultAddress;
    }

    /**
     * Setter for UseCustomerDefaultAddress.
     * Whether to use the default delivery address configured at customer (or card group) level as
     * the delivery address for this card. Mandatory Note: If value is false then
     * ‘UpdateCardRenewalAddress’ is mandatory. If value set to ‘True’ then
     * ‘UpdateCardRenewalAddress’ may be null/empty. It will be ignored if provided.
     * @param useCustomerDefaultAddress Value for boolean
     */
    @JsonSetter("UseCustomerDefaultAddress")
    public void setUseCustomerDefaultAddress(boolean useCustomerDefaultAddress) {
        this.useCustomerDefaultAddress = useCustomerDefaultAddress;
    }

    /**
     * Getter for UpdateCardRenewalAddress.
     * @return Returns the UpdateCardRenewalAddress2
     */
    @JsonGetter("UpdateCardRenewalAddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UpdateCardRenewalAddress2 getUpdateCardRenewalAddress() {
        return updateCardRenewalAddress;
    }

    /**
     * Setter for UpdateCardRenewalAddress.
     * @param updateCardRenewalAddress Value for UpdateCardRenewalAddress2
     */
    @JsonSetter("UpdateCardRenewalAddress")
    public void setUpdateCardRenewalAddress(UpdateCardRenewalAddress2 updateCardRenewalAddress) {
        this.updateCardRenewalAddress = updateCardRenewalAddress;
    }

    /**
     * Converts this DeliveryAddressUpdate into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DeliveryAddressUpdate [" + "useCustomerDefaultAddress=" + useCustomerDefaultAddress
                + ", cardId=" + cardId + ", pAN=" + pAN + ", cardExpiryDate=" + cardExpiryDate
                + ", updateCardRenewalAddress=" + updateCardRenewalAddress + "]";
    }

    /**
     * Builds a new {@link DeliveryAddressUpdate.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DeliveryAddressUpdate.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(useCustomerDefaultAddress)
                .cardId(getCardId())
                .pAN(getPAN())
                .cardExpiryDate(getCardExpiryDate())
                .updateCardRenewalAddress(getUpdateCardRenewalAddress());
        return builder;
    }

    /**
     * Class to build instances of {@link DeliveryAddressUpdate}.
     */
    public static class Builder {
        private boolean useCustomerDefaultAddress;
        private Integer cardId;
        private String pAN;
        private String cardExpiryDate;
        private UpdateCardRenewalAddress2 updateCardRenewalAddress;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  useCustomerDefaultAddress  boolean value for useCustomerDefaultAddress.
         */
        public Builder(boolean useCustomerDefaultAddress) {
            this.useCustomerDefaultAddress = useCustomerDefaultAddress;
        }

        /**
         * Setter for useCustomerDefaultAddress.
         * @param  useCustomerDefaultAddress  boolean value for useCustomerDefaultAddress.
         * @return Builder
         */
        public Builder useCustomerDefaultAddress(boolean useCustomerDefaultAddress) {
            this.useCustomerDefaultAddress = useCustomerDefaultAddress;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = cardId;
            return this;
        }

        /**
         * Setter for pAN.
         * @param  pAN  String value for pAN.
         * @return Builder
         */
        public Builder pAN(String pAN) {
            this.pAN = pAN;
            return this;
        }

        /**
         * Setter for cardExpiryDate.
         * @param  cardExpiryDate  String value for cardExpiryDate.
         * @return Builder
         */
        public Builder cardExpiryDate(String cardExpiryDate) {
            this.cardExpiryDate = cardExpiryDate;
            return this;
        }

        /**
         * Setter for updateCardRenewalAddress.
         * @param  updateCardRenewalAddress  UpdateCardRenewalAddress2 value for
         *         updateCardRenewalAddress.
         * @return Builder
         */
        public Builder updateCardRenewalAddress(
                UpdateCardRenewalAddress2 updateCardRenewalAddress) {
            this.updateCardRenewalAddress = updateCardRenewalAddress;
            return this;
        }

        /**
         * Builds a new {@link DeliveryAddressUpdate} object using the set fields.
         * @return {@link DeliveryAddressUpdate}
         */
        public DeliveryAddressUpdate build() {
            return new DeliveryAddressUpdate(useCustomerDefaultAddress, cardId, pAN, cardExpiryDate,
                    updateCardRenewalAddress);
        }
    }
}
