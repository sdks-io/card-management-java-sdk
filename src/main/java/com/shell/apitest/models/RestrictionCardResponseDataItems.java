/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for RestrictionCardResponseDataItems type.
 */
public class RestrictionCardResponseDataItems {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> dayTimeRestrictionDescription;
    private OptionalNullable<String> dayTimeRestrictionStatus;
    private OptionalNullable<String> locationRestrictionDescription;
    private OptionalNullable<String> locationRestrictionStatus;
    private OptionalNullable<String> pAN;
    private OptionalNullable<String> productRestrictionDescription;
    private OptionalNullable<String> productRestrictionStatus;
    private OptionalNullable<String> usageRestrictionDescription;
    private OptionalNullable<String> usageRestrictionStatus;
    private OptionalNullable<String> validationErrorCode;
    private OptionalNullable<String> validationErrorDescription;

    /**
     * Default constructor.
     */
    public RestrictionCardResponseDataItems() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardId  Integer value for cardId.
     * @param  dayTimeRestrictionDescription  String value for dayTimeRestrictionDescription.
     * @param  dayTimeRestrictionStatus  String value for dayTimeRestrictionStatus.
     * @param  locationRestrictionDescription  String value for locationRestrictionDescription.
     * @param  locationRestrictionStatus  String value for locationRestrictionStatus.
     * @param  pAN  String value for pAN.
     * @param  productRestrictionDescription  String value for productRestrictionDescription.
     * @param  productRestrictionStatus  String value for productRestrictionStatus.
     * @param  usageRestrictionDescription  String value for usageRestrictionDescription.
     * @param  usageRestrictionStatus  String value for usageRestrictionStatus.
     * @param  validationErrorCode  String value for validationErrorCode.
     * @param  validationErrorDescription  String value for validationErrorDescription.
     */
    public RestrictionCardResponseDataItems(
            Integer accountId,
            String accountNumber,
            Integer cardId,
            String dayTimeRestrictionDescription,
            String dayTimeRestrictionStatus,
            String locationRestrictionDescription,
            String locationRestrictionStatus,
            String pAN,
            String productRestrictionDescription,
            String productRestrictionStatus,
            String usageRestrictionDescription,
            String usageRestrictionStatus,
            String validationErrorCode,
            String validationErrorDescription) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.cardId = OptionalNullable.of(cardId);
        this.dayTimeRestrictionDescription = OptionalNullable.of(dayTimeRestrictionDescription);
        this.dayTimeRestrictionStatus = OptionalNullable.of(dayTimeRestrictionStatus);
        this.locationRestrictionDescription = OptionalNullable.of(locationRestrictionDescription);
        this.locationRestrictionStatus = OptionalNullable.of(locationRestrictionStatus);
        this.pAN = OptionalNullable.of(pAN);
        this.productRestrictionDescription = OptionalNullable.of(productRestrictionDescription);
        this.productRestrictionStatus = OptionalNullable.of(productRestrictionStatus);
        this.usageRestrictionDescription = OptionalNullable.of(usageRestrictionDescription);
        this.usageRestrictionStatus = OptionalNullable.of(usageRestrictionStatus);
        this.validationErrorCode = OptionalNullable.of(validationErrorCode);
        this.validationErrorDescription = OptionalNullable.of(validationErrorDescription);
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardId  Integer value for cardId.
     * @param  dayTimeRestrictionDescription  String value for dayTimeRestrictionDescription.
     * @param  dayTimeRestrictionStatus  String value for dayTimeRestrictionStatus.
     * @param  locationRestrictionDescription  String value for locationRestrictionDescription.
     * @param  locationRestrictionStatus  String value for locationRestrictionStatus.
     * @param  pAN  String value for pAN.
     * @param  productRestrictionDescription  String value for productRestrictionDescription.
     * @param  productRestrictionStatus  String value for productRestrictionStatus.
     * @param  usageRestrictionDescription  String value for usageRestrictionDescription.
     * @param  usageRestrictionStatus  String value for usageRestrictionStatus.
     * @param  validationErrorCode  String value for validationErrorCode.
     * @param  validationErrorDescription  String value for validationErrorDescription.
     */

    protected RestrictionCardResponseDataItems(OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<Integer> cardId,
            OptionalNullable<String> dayTimeRestrictionDescription,
            OptionalNullable<String> dayTimeRestrictionStatus,
            OptionalNullable<String> locationRestrictionDescription,
            OptionalNullable<String> locationRestrictionStatus, OptionalNullable<String> pAN,
            OptionalNullable<String> productRestrictionDescription,
            OptionalNullable<String> productRestrictionStatus,
            OptionalNullable<String> usageRestrictionDescription,
            OptionalNullable<String> usageRestrictionStatus,
            OptionalNullable<String> validationErrorCode,
            OptionalNullable<String> validationErrorDescription) {
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.cardId = cardId;
        this.dayTimeRestrictionDescription = dayTimeRestrictionDescription;
        this.dayTimeRestrictionStatus = dayTimeRestrictionStatus;
        this.locationRestrictionDescription = locationRestrictionDescription;
        this.locationRestrictionStatus = locationRestrictionStatus;
        this.pAN = pAN;
        this.productRestrictionDescription = productRestrictionDescription;
        this.productRestrictionStatus = productRestrictionStatus;
        this.usageRestrictionDescription = usageRestrictionDescription;
        this.usageRestrictionStatus = usageRestrictionStatus;
        this.validationErrorCode = validationErrorCode;
        this.validationErrorDescription = validationErrorDescription;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id of the customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id of the customer.
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id of the customer.
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id of the customer.
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the customer.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the customer.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the customer.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the customer.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card Id
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card Id
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card Id
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for DayTimeRestrictionDescription.
     * This field will have a value only when “DayTimeRestrictionStatus” is “Failed”.
     * @return Returns the Internal String
     */
    @JsonGetter("DayTimeRestrictionDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDayTimeRestrictionDescription() {
        return this.dayTimeRestrictionDescription;
    }

    /**
     * Getter for DayTimeRestrictionDescription.
     * This field will have a value only when “DayTimeRestrictionStatus” is “Failed”.
     * @return Returns the String
     */
    public String getDayTimeRestrictionDescription() {
        return OptionalNullable.getFrom(dayTimeRestrictionDescription);
    }

    /**
     * Setter for DayTimeRestrictionDescription.
     * This field will have a value only when “DayTimeRestrictionStatus” is “Failed”.
     * @param dayTimeRestrictionDescription Value for String
     */
    @JsonSetter("DayTimeRestrictionDescription")
    public void setDayTimeRestrictionDescription(String dayTimeRestrictionDescription) {
        this.dayTimeRestrictionDescription = OptionalNullable.of(dayTimeRestrictionDescription);
    }

    /**
     * UnSetter for DayTimeRestrictionDescription.
     * This field will have a value only when “DayTimeRestrictionStatus” is “Failed”.
     */
    public void unsetDayTimeRestrictionDescription() {
        dayTimeRestrictionDescription = null;
    }

    /**
     * Internal Getter for DayTimeRestrictionStatus.
     * Status of the card day/time restriction submitted to API. Based on the response from API
     * value will be set as either “Success” or “Failed”.
     * @return Returns the Internal String
     */
    @JsonGetter("DayTimeRestrictionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDayTimeRestrictionStatus() {
        return this.dayTimeRestrictionStatus;
    }

    /**
     * Getter for DayTimeRestrictionStatus.
     * Status of the card day/time restriction submitted to API. Based on the response from API
     * value will be set as either “Success” or “Failed”.
     * @return Returns the String
     */
    public String getDayTimeRestrictionStatus() {
        return OptionalNullable.getFrom(dayTimeRestrictionStatus);
    }

    /**
     * Setter for DayTimeRestrictionStatus.
     * Status of the card day/time restriction submitted to API. Based on the response from API
     * value will be set as either “Success” or “Failed”.
     * @param dayTimeRestrictionStatus Value for String
     */
    @JsonSetter("DayTimeRestrictionStatus")
    public void setDayTimeRestrictionStatus(String dayTimeRestrictionStatus) {
        this.dayTimeRestrictionStatus = OptionalNullable.of(dayTimeRestrictionStatus);
    }

    /**
     * UnSetter for DayTimeRestrictionStatus.
     * Status of the card day/time restriction submitted to API. Based on the response from API
     * value will be set as either “Success” or “Failed”.
     */
    public void unsetDayTimeRestrictionStatus() {
        dayTimeRestrictionStatus = null;
    }

    /**
     * Internal Getter for LocationRestrictionDescription.
     * This field will have a value only when “LocationRestrictionStatus” is “Failed”.
     * @return Returns the Internal String
     */
    @JsonGetter("LocationRestrictionDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocationRestrictionDescription() {
        return this.locationRestrictionDescription;
    }

    /**
     * Getter for LocationRestrictionDescription.
     * This field will have a value only when “LocationRestrictionStatus” is “Failed”.
     * @return Returns the String
     */
    public String getLocationRestrictionDescription() {
        return OptionalNullable.getFrom(locationRestrictionDescription);
    }

    /**
     * Setter for LocationRestrictionDescription.
     * This field will have a value only when “LocationRestrictionStatus” is “Failed”.
     * @param locationRestrictionDescription Value for String
     */
    @JsonSetter("LocationRestrictionDescription")
    public void setLocationRestrictionDescription(String locationRestrictionDescription) {
        this.locationRestrictionDescription = OptionalNullable.of(locationRestrictionDescription);
    }

    /**
     * UnSetter for LocationRestrictionDescription.
     * This field will have a value only when “LocationRestrictionStatus” is “Failed”.
     */
    public void unsetLocationRestrictionDescription() {
        locationRestrictionDescription = null;
    }

    /**
     * Internal Getter for LocationRestrictionStatus.
     * Card Location restriction submitted to gateway based on gateway response value set as
     * “Success” or “Failed”.
     * @return Returns the Internal String
     */
    @JsonGetter("LocationRestrictionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocationRestrictionStatus() {
        return this.locationRestrictionStatus;
    }

    /**
     * Getter for LocationRestrictionStatus.
     * Card Location restriction submitted to gateway based on gateway response value set as
     * “Success” or “Failed”.
     * @return Returns the String
     */
    public String getLocationRestrictionStatus() {
        return OptionalNullable.getFrom(locationRestrictionStatus);
    }

    /**
     * Setter for LocationRestrictionStatus.
     * Card Location restriction submitted to gateway based on gateway response value set as
     * “Success” or “Failed”.
     * @param locationRestrictionStatus Value for String
     */
    @JsonSetter("LocationRestrictionStatus")
    public void setLocationRestrictionStatus(String locationRestrictionStatus) {
        this.locationRestrictionStatus = OptionalNullable.of(locationRestrictionStatus);
    }

    /**
     * UnSetter for LocationRestrictionStatus.
     * Card Location restriction submitted to gateway based on gateway response value set as
     * “Success” or “Failed”.
     */
    public void unsetLocationRestrictionStatus() {
        locationRestrictionStatus = null;
    }

    /**
     * Internal Getter for PAN.
     * Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("PAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPAN() {
        return this.pAN;
    }

    /**
     * Getter for PAN.
     * Card PAN
     * @return Returns the String
     */
    public String getPAN() {
        return OptionalNullable.getFrom(pAN);
    }

    /**
     * Setter for PAN.
     * Card PAN
     * @param pAN Value for String
     */
    @JsonSetter("PAN")
    public void setPAN(String pAN) {
        this.pAN = OptionalNullable.of(pAN);
    }

    /**
     * UnSetter for PAN.
     * Card PAN
     */
    public void unsetPAN() {
        pAN = null;
    }

    /**
     * Internal Getter for ProductRestrictionDescription.
     * This field will have a value only when “ProductRestrictionStatus” is “Failed”.
     * @return Returns the Internal String
     */
    @JsonGetter("ProductRestrictionDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductRestrictionDescription() {
        return this.productRestrictionDescription;
    }

    /**
     * Getter for ProductRestrictionDescription.
     * This field will have a value only when “ProductRestrictionStatus” is “Failed”.
     * @return Returns the String
     */
    public String getProductRestrictionDescription() {
        return OptionalNullable.getFrom(productRestrictionDescription);
    }

    /**
     * Setter for ProductRestrictionDescription.
     * This field will have a value only when “ProductRestrictionStatus” is “Failed”.
     * @param productRestrictionDescription Value for String
     */
    @JsonSetter("ProductRestrictionDescription")
    public void setProductRestrictionDescription(String productRestrictionDescription) {
        this.productRestrictionDescription = OptionalNullable.of(productRestrictionDescription);
    }

    /**
     * UnSetter for ProductRestrictionDescription.
     * This field will have a value only when “ProductRestrictionStatus” is “Failed”.
     */
    public void unsetProductRestrictionDescription() {
        productRestrictionDescription = null;
    }

    /**
     * Internal Getter for ProductRestrictionStatus.
     * Status of the card product restriction submitted
     * @return Returns the Internal String
     */
    @JsonGetter("ProductRestrictionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductRestrictionStatus() {
        return this.productRestrictionStatus;
    }

    /**
     * Getter for ProductRestrictionStatus.
     * Status of the card product restriction submitted
     * @return Returns the String
     */
    public String getProductRestrictionStatus() {
        return OptionalNullable.getFrom(productRestrictionStatus);
    }

    /**
     * Setter for ProductRestrictionStatus.
     * Status of the card product restriction submitted
     * @param productRestrictionStatus Value for String
     */
    @JsonSetter("ProductRestrictionStatus")
    public void setProductRestrictionStatus(String productRestrictionStatus) {
        this.productRestrictionStatus = OptionalNullable.of(productRestrictionStatus);
    }

    /**
     * UnSetter for ProductRestrictionStatus.
     * Status of the card product restriction submitted
     */
    public void unsetProductRestrictionStatus() {
        productRestrictionStatus = null;
    }

    /**
     * Internal Getter for UsageRestrictionDescription.
     * This field will have a value only when “UsageRestrictionStatus” is “Failed”.
     * @return Returns the Internal String
     */
    @JsonGetter("UsageRestrictionDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUsageRestrictionDescription() {
        return this.usageRestrictionDescription;
    }

    /**
     * Getter for UsageRestrictionDescription.
     * This field will have a value only when “UsageRestrictionStatus” is “Failed”.
     * @return Returns the String
     */
    public String getUsageRestrictionDescription() {
        return OptionalNullable.getFrom(usageRestrictionDescription);
    }

    /**
     * Setter for UsageRestrictionDescription.
     * This field will have a value only when “UsageRestrictionStatus” is “Failed”.
     * @param usageRestrictionDescription Value for String
     */
    @JsonSetter("UsageRestrictionDescription")
    public void setUsageRestrictionDescription(String usageRestrictionDescription) {
        this.usageRestrictionDescription = OptionalNullable.of(usageRestrictionDescription);
    }

    /**
     * UnSetter for UsageRestrictionDescription.
     * This field will have a value only when “UsageRestrictionStatus” is “Failed”.
     */
    public void unsetUsageRestrictionDescription() {
        usageRestrictionDescription = null;
    }

    /**
     * Internal Getter for UsageRestrictionStatus.
     * Status of the card usage restriction submitted
     * @return Returns the Internal String
     */
    @JsonGetter("UsageRestrictionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUsageRestrictionStatus() {
        return this.usageRestrictionStatus;
    }

    /**
     * Getter for UsageRestrictionStatus.
     * Status of the card usage restriction submitted
     * @return Returns the String
     */
    public String getUsageRestrictionStatus() {
        return OptionalNullable.getFrom(usageRestrictionStatus);
    }

    /**
     * Setter for UsageRestrictionStatus.
     * Status of the card usage restriction submitted
     * @param usageRestrictionStatus Value for String
     */
    @JsonSetter("UsageRestrictionStatus")
    public void setUsageRestrictionStatus(String usageRestrictionStatus) {
        this.usageRestrictionStatus = OptionalNullable.of(usageRestrictionStatus);
    }

    /**
     * UnSetter for UsageRestrictionStatus.
     * Status of the card usage restriction submitted
     */
    public void unsetUsageRestrictionStatus() {
        usageRestrictionStatus = null;
    }

    /**
     * Internal Getter for ValidationErrorCode.
     * Error code for validation failure. Example error codes: 0007, 9007, 7000, 7001.
     * @return Returns the Internal String
     */
    @JsonGetter("ValidationErrorCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetValidationErrorCode() {
        return this.validationErrorCode;
    }

    /**
     * Getter for ValidationErrorCode.
     * Error code for validation failure. Example error codes: 0007, 9007, 7000, 7001.
     * @return Returns the String
     */
    public String getValidationErrorCode() {
        return OptionalNullable.getFrom(validationErrorCode);
    }

    /**
     * Setter for ValidationErrorCode.
     * Error code for validation failure. Example error codes: 0007, 9007, 7000, 7001.
     * @param validationErrorCode Value for String
     */
    @JsonSetter("ValidationErrorCode")
    public void setValidationErrorCode(String validationErrorCode) {
        this.validationErrorCode = OptionalNullable.of(validationErrorCode);
    }

    /**
     * UnSetter for ValidationErrorCode.
     * Error code for validation failure. Example error codes: 0007, 9007, 7000, 7001.
     */
    public void unsetValidationErrorCode() {
        validationErrorCode = null;
    }

    /**
     * Internal Getter for ValidationErrorDescription.
     * Description of validation failure.
     * @return Returns the Internal String
     */
    @JsonGetter("ValidationErrorDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetValidationErrorDescription() {
        return this.validationErrorDescription;
    }

    /**
     * Getter for ValidationErrorDescription.
     * Description of validation failure.
     * @return Returns the String
     */
    public String getValidationErrorDescription() {
        return OptionalNullable.getFrom(validationErrorDescription);
    }

    /**
     * Setter for ValidationErrorDescription.
     * Description of validation failure.
     * @param validationErrorDescription Value for String
     */
    @JsonSetter("ValidationErrorDescription")
    public void setValidationErrorDescription(String validationErrorDescription) {
        this.validationErrorDescription = OptionalNullable.of(validationErrorDescription);
    }

    /**
     * UnSetter for ValidationErrorDescription.
     * Description of validation failure.
     */
    public void unsetValidationErrorDescription() {
        validationErrorDescription = null;
    }

    /**
     * Converts this RestrictionCardResponseDataItems into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RestrictionCardResponseDataItems [" + "accountId=" + accountId + ", accountNumber="
                + accountNumber + ", cardId=" + cardId + ", dayTimeRestrictionDescription="
                + dayTimeRestrictionDescription + ", dayTimeRestrictionStatus="
                + dayTimeRestrictionStatus + ", locationRestrictionDescription="
                + locationRestrictionDescription + ", locationRestrictionStatus="
                + locationRestrictionStatus + ", pAN=" + pAN + ", productRestrictionDescription="
                + productRestrictionDescription + ", productRestrictionStatus="
                + productRestrictionStatus + ", usageRestrictionDescription="
                + usageRestrictionDescription + ", usageRestrictionStatus=" + usageRestrictionStatus
                + ", validationErrorCode=" + validationErrorCode + ", validationErrorDescription="
                + validationErrorDescription + "]";
    }

    /**
     * Builds a new {@link RestrictionCardResponseDataItems.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RestrictionCardResponseDataItems.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.cardId = internalGetCardId();
        builder.dayTimeRestrictionDescription = internalGetDayTimeRestrictionDescription();
        builder.dayTimeRestrictionStatus = internalGetDayTimeRestrictionStatus();
        builder.locationRestrictionDescription = internalGetLocationRestrictionDescription();
        builder.locationRestrictionStatus = internalGetLocationRestrictionStatus();
        builder.pAN = internalGetPAN();
        builder.productRestrictionDescription = internalGetProductRestrictionDescription();
        builder.productRestrictionStatus = internalGetProductRestrictionStatus();
        builder.usageRestrictionDescription = internalGetUsageRestrictionDescription();
        builder.usageRestrictionStatus = internalGetUsageRestrictionStatus();
        builder.validationErrorCode = internalGetValidationErrorCode();
        builder.validationErrorDescription = internalGetValidationErrorDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link RestrictionCardResponseDataItems}.
     */
    public static class Builder {
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> dayTimeRestrictionDescription;
        private OptionalNullable<String> dayTimeRestrictionStatus;
        private OptionalNullable<String> locationRestrictionDescription;
        private OptionalNullable<String> locationRestrictionStatus;
        private OptionalNullable<String> pAN;
        private OptionalNullable<String> productRestrictionDescription;
        private OptionalNullable<String> productRestrictionStatus;
        private OptionalNullable<String> usageRestrictionDescription;
        private OptionalNullable<String> usageRestrictionStatus;
        private OptionalNullable<String> validationErrorCode;
        private OptionalNullable<String> validationErrorDescription;



        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for dayTimeRestrictionDescription.
         * @param  dayTimeRestrictionDescription  String value for dayTimeRestrictionDescription.
         * @return Builder
         */
        public Builder dayTimeRestrictionDescription(String dayTimeRestrictionDescription) {
            this.dayTimeRestrictionDescription = OptionalNullable.of(dayTimeRestrictionDescription);
            return this;
        }

        /**
         * UnSetter for dayTimeRestrictionDescription.
         * @return Builder
         */
        public Builder unsetDayTimeRestrictionDescription() {
            dayTimeRestrictionDescription = null;
            return this;
        }

        /**
         * Setter for dayTimeRestrictionStatus.
         * @param  dayTimeRestrictionStatus  String value for dayTimeRestrictionStatus.
         * @return Builder
         */
        public Builder dayTimeRestrictionStatus(String dayTimeRestrictionStatus) {
            this.dayTimeRestrictionStatus = OptionalNullable.of(dayTimeRestrictionStatus);
            return this;
        }

        /**
         * UnSetter for dayTimeRestrictionStatus.
         * @return Builder
         */
        public Builder unsetDayTimeRestrictionStatus() {
            dayTimeRestrictionStatus = null;
            return this;
        }

        /**
         * Setter for locationRestrictionDescription.
         * @param  locationRestrictionDescription  String value for locationRestrictionDescription.
         * @return Builder
         */
        public Builder locationRestrictionDescription(String locationRestrictionDescription) {
            this.locationRestrictionDescription =
                    OptionalNullable.of(locationRestrictionDescription);
            return this;
        }

        /**
         * UnSetter for locationRestrictionDescription.
         * @return Builder
         */
        public Builder unsetLocationRestrictionDescription() {
            locationRestrictionDescription = null;
            return this;
        }

        /**
         * Setter for locationRestrictionStatus.
         * @param  locationRestrictionStatus  String value for locationRestrictionStatus.
         * @return Builder
         */
        public Builder locationRestrictionStatus(String locationRestrictionStatus) {
            this.locationRestrictionStatus = OptionalNullable.of(locationRestrictionStatus);
            return this;
        }

        /**
         * UnSetter for locationRestrictionStatus.
         * @return Builder
         */
        public Builder unsetLocationRestrictionStatus() {
            locationRestrictionStatus = null;
            return this;
        }

        /**
         * Setter for pAN.
         * @param  pAN  String value for pAN.
         * @return Builder
         */
        public Builder pAN(String pAN) {
            this.pAN = OptionalNullable.of(pAN);
            return this;
        }

        /**
         * UnSetter for pAN.
         * @return Builder
         */
        public Builder unsetPAN() {
            pAN = null;
            return this;
        }

        /**
         * Setter for productRestrictionDescription.
         * @param  productRestrictionDescription  String value for productRestrictionDescription.
         * @return Builder
         */
        public Builder productRestrictionDescription(String productRestrictionDescription) {
            this.productRestrictionDescription = OptionalNullable.of(productRestrictionDescription);
            return this;
        }

        /**
         * UnSetter for productRestrictionDescription.
         * @return Builder
         */
        public Builder unsetProductRestrictionDescription() {
            productRestrictionDescription = null;
            return this;
        }

        /**
         * Setter for productRestrictionStatus.
         * @param  productRestrictionStatus  String value for productRestrictionStatus.
         * @return Builder
         */
        public Builder productRestrictionStatus(String productRestrictionStatus) {
            this.productRestrictionStatus = OptionalNullable.of(productRestrictionStatus);
            return this;
        }

        /**
         * UnSetter for productRestrictionStatus.
         * @return Builder
         */
        public Builder unsetProductRestrictionStatus() {
            productRestrictionStatus = null;
            return this;
        }

        /**
         * Setter for usageRestrictionDescription.
         * @param  usageRestrictionDescription  String value for usageRestrictionDescription.
         * @return Builder
         */
        public Builder usageRestrictionDescription(String usageRestrictionDescription) {
            this.usageRestrictionDescription = OptionalNullable.of(usageRestrictionDescription);
            return this;
        }

        /**
         * UnSetter for usageRestrictionDescription.
         * @return Builder
         */
        public Builder unsetUsageRestrictionDescription() {
            usageRestrictionDescription = null;
            return this;
        }

        /**
         * Setter for usageRestrictionStatus.
         * @param  usageRestrictionStatus  String value for usageRestrictionStatus.
         * @return Builder
         */
        public Builder usageRestrictionStatus(String usageRestrictionStatus) {
            this.usageRestrictionStatus = OptionalNullable.of(usageRestrictionStatus);
            return this;
        }

        /**
         * UnSetter for usageRestrictionStatus.
         * @return Builder
         */
        public Builder unsetUsageRestrictionStatus() {
            usageRestrictionStatus = null;
            return this;
        }

        /**
         * Setter for validationErrorCode.
         * @param  validationErrorCode  String value for validationErrorCode.
         * @return Builder
         */
        public Builder validationErrorCode(String validationErrorCode) {
            this.validationErrorCode = OptionalNullable.of(validationErrorCode);
            return this;
        }

        /**
         * UnSetter for validationErrorCode.
         * @return Builder
         */
        public Builder unsetValidationErrorCode() {
            validationErrorCode = null;
            return this;
        }

        /**
         * Setter for validationErrorDescription.
         * @param  validationErrorDescription  String value for validationErrorDescription.
         * @return Builder
         */
        public Builder validationErrorDescription(String validationErrorDescription) {
            this.validationErrorDescription = OptionalNullable.of(validationErrorDescription);
            return this;
        }

        /**
         * UnSetter for validationErrorDescription.
         * @return Builder
         */
        public Builder unsetValidationErrorDescription() {
            validationErrorDescription = null;
            return this;
        }

        /**
         * Builds a new {@link RestrictionCardResponseDataItems} object using the set fields.
         * @return {@link RestrictionCardResponseDataItems}
         */
        public RestrictionCardResponseDataItems build() {
            return new RestrictionCardResponseDataItems(accountId, accountNumber, cardId,
                    dayTimeRestrictionDescription, dayTimeRestrictionStatus,
                    locationRestrictionDescription, locationRestrictionStatus, pAN,
                    productRestrictionDescription, productRestrictionStatus,
                    usageRestrictionDescription, usageRestrictionStatus, validationErrorCode,
                    validationErrorDescription);
        }
    }
}
