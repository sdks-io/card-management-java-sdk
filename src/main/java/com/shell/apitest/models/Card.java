/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for Card type.
 */
public class Card {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountName;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<String> bundleId;
    private List<CardBlockSchedule> cardBlockSchedules;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> cardTypeCode;
    private OptionalNullable<Integer> cardTypeId;
    private OptionalNullable<String> cardTypeName;
    private OptionalNullable<String> colCoCountryCode;
    private OptionalNullable<String> creationDate;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> effectiveDate;
    private OptionalNullable<String> expiryDate;
    private Boolean fleetIdInput;
    private Boolean isCRT;
    private Boolean isFleet;
    private Boolean isInternational;
    private Boolean isNational;
    private Boolean isPartnerSitesIncluded;
    private Boolean isShellSitesOnly;
    private OptionalNullable<String> issueDate;
    private Boolean isSuperseded;
    private Boolean isVirtualCard;
    private OptionalNullable<String> lastModifiedDate;
    private OptionalNullable<String> lastUsedDate;
    private OptionalNullable<String> localCurrencyCode;
    private OptionalNullable<String> localCurrencySymbol;
    private Boolean odometerInput;
    private OptionalNullable<String> pAN;
    private OptionalNullable<String> purchaseCategoryCode;
    private OptionalNullable<Integer> purchaseCategoryId;
    private OptionalNullable<String> purchaseCategoryName;
    private OptionalNullable<String> reason;
    private OptionalNullable<String> reissueSetting;
    private OptionalNullable<String> statusDescription;
    private OptionalNullable<Integer> statusId;
    private OptionalNullable<Integer> tokenTypeID;
    private String tokenTypeName;
    private OptionalNullable<String> vRN;
    private OptionalNullable<String> clientReferenceId;
    private Boolean isEMVContact;
    private Boolean isEMVContactless;
    private Boolean isRFID;
    private OptionalNullable<String> rFIDUID;
    private OptionalNullable<String> eMAID;
    private OptionalNullable<String> eVPrintedNumber;
    private OptionalNullable<String> cardMediaCode;

    /**
     * Default constructor.
     */
    public Card() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountName  String value for accountName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  bundleId  String value for bundleId.
     * @param  cardBlockSchedules  List of CardBlockSchedule value for cardBlockSchedules.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  cardId  Integer value for cardId.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  creationDate  String value for creationDate.
     * @param  driverName  String value for driverName.
     * @param  effectiveDate  String value for effectiveDate.
     * @param  expiryDate  String value for expiryDate.
     * @param  fleetIdInput  Boolean value for fleetIdInput.
     * @param  isCRT  Boolean value for isCRT.
     * @param  isFleet  Boolean value for isFleet.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isNational  Boolean value for isNational.
     * @param  isPartnerSitesIncluded  Boolean value for isPartnerSitesIncluded.
     * @param  isShellSitesOnly  Boolean value for isShellSitesOnly.
     * @param  issueDate  String value for issueDate.
     * @param  isSuperseded  Boolean value for isSuperseded.
     * @param  isVirtualCard  Boolean value for isVirtualCard.
     * @param  lastModifiedDate  String value for lastModifiedDate.
     * @param  lastUsedDate  String value for lastUsedDate.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  odometerInput  Boolean value for odometerInput.
     * @param  pAN  String value for pAN.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  purchaseCategoryName  String value for purchaseCategoryName.
     * @param  reason  String value for reason.
     * @param  reissueSetting  String value for reissueSetting.
     * @param  statusDescription  String value for statusDescription.
     * @param  statusId  Integer value for statusId.
     * @param  tokenTypeID  Integer value for tokenTypeID.
     * @param  tokenTypeName  String value for tokenTypeName.
     * @param  vRN  String value for vRN.
     * @param  clientReferenceId  String value for clientReferenceId.
     * @param  isEMVContact  Boolean value for isEMVContact.
     * @param  isEMVContactless  Boolean value for isEMVContactless.
     * @param  isRFID  Boolean value for isRFID.
     * @param  rFIDUID  String value for rFIDUID.
     * @param  eMAID  String value for eMAID.
     * @param  eVPrintedNumber  String value for eVPrintedNumber.
     * @param  cardMediaCode  String value for cardMediaCode.
     */
    public Card(
            Integer accountId,
            String accountName,
            String accountNumber,
            String accountShortName,
            String bundleId,
            List<CardBlockSchedule> cardBlockSchedules,
            Integer cardGroupId,
            String cardGroupName,
            Integer cardId,
            String cardTypeCode,
            Integer cardTypeId,
            String cardTypeName,
            String colCoCountryCode,
            String creationDate,
            String driverName,
            String effectiveDate,
            String expiryDate,
            Boolean fleetIdInput,
            Boolean isCRT,
            Boolean isFleet,
            Boolean isInternational,
            Boolean isNational,
            Boolean isPartnerSitesIncluded,
            Boolean isShellSitesOnly,
            String issueDate,
            Boolean isSuperseded,
            Boolean isVirtualCard,
            String lastModifiedDate,
            String lastUsedDate,
            String localCurrencyCode,
            String localCurrencySymbol,
            Boolean odometerInput,
            String pAN,
            String purchaseCategoryCode,
            Integer purchaseCategoryId,
            String purchaseCategoryName,
            String reason,
            String reissueSetting,
            String statusDescription,
            Integer statusId,
            Integer tokenTypeID,
            String tokenTypeName,
            String vRN,
            String clientReferenceId,
            Boolean isEMVContact,
            Boolean isEMVContactless,
            Boolean isRFID,
            String rFIDUID,
            String eMAID,
            String eVPrintedNumber,
            String cardMediaCode) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountName = OptionalNullable.of(accountName);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.bundleId = OptionalNullable.of(bundleId);
        this.cardBlockSchedules = cardBlockSchedules;
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.cardId = OptionalNullable.of(cardId);
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
        this.cardTypeId = OptionalNullable.of(cardTypeId);
        this.cardTypeName = OptionalNullable.of(cardTypeName);
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
        this.creationDate = OptionalNullable.of(creationDate);
        this.driverName = OptionalNullable.of(driverName);
        this.effectiveDate = OptionalNullable.of(effectiveDate);
        this.expiryDate = OptionalNullable.of(expiryDate);
        this.fleetIdInput = fleetIdInput;
        this.isCRT = isCRT;
        this.isFleet = isFleet;
        this.isInternational = isInternational;
        this.isNational = isNational;
        this.isPartnerSitesIncluded = isPartnerSitesIncluded;
        this.isShellSitesOnly = isShellSitesOnly;
        this.issueDate = OptionalNullable.of(issueDate);
        this.isSuperseded = isSuperseded;
        this.isVirtualCard = isVirtualCard;
        this.lastModifiedDate = OptionalNullable.of(lastModifiedDate);
        this.lastUsedDate = OptionalNullable.of(lastUsedDate);
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
        this.odometerInput = odometerInput;
        this.pAN = OptionalNullable.of(pAN);
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
        this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
        this.reason = OptionalNullable.of(reason);
        this.reissueSetting = OptionalNullable.of(reissueSetting);
        this.statusDescription = OptionalNullable.of(statusDescription);
        this.statusId = OptionalNullable.of(statusId);
        this.tokenTypeID = OptionalNullable.of(tokenTypeID);
        this.tokenTypeName = tokenTypeName;
        this.vRN = OptionalNullable.of(vRN);
        this.clientReferenceId = OptionalNullable.of(clientReferenceId);
        this.isEMVContact = isEMVContact;
        this.isEMVContactless = isEMVContactless;
        this.isRFID = isRFID;
        this.rFIDUID = OptionalNullable.of(rFIDUID);
        this.eMAID = OptionalNullable.of(eMAID);
        this.eVPrintedNumber = OptionalNullable.of(eVPrintedNumber);
        this.cardMediaCode = OptionalNullable.of(cardMediaCode);
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountName  String value for accountName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  bundleId  String value for bundleId.
     * @param  cardBlockSchedules  List of CardBlockSchedule value for cardBlockSchedules.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  cardId  Integer value for cardId.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  creationDate  String value for creationDate.
     * @param  driverName  String value for driverName.
     * @param  effectiveDate  String value for effectiveDate.
     * @param  expiryDate  String value for expiryDate.
     * @param  fleetIdInput  Boolean value for fleetIdInput.
     * @param  isCRT  Boolean value for isCRT.
     * @param  isFleet  Boolean value for isFleet.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isNational  Boolean value for isNational.
     * @param  isPartnerSitesIncluded  Boolean value for isPartnerSitesIncluded.
     * @param  isShellSitesOnly  Boolean value for isShellSitesOnly.
     * @param  issueDate  String value for issueDate.
     * @param  isSuperseded  Boolean value for isSuperseded.
     * @param  isVirtualCard  Boolean value for isVirtualCard.
     * @param  lastModifiedDate  String value for lastModifiedDate.
     * @param  lastUsedDate  String value for lastUsedDate.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  odometerInput  Boolean value for odometerInput.
     * @param  pAN  String value for pAN.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  purchaseCategoryName  String value for purchaseCategoryName.
     * @param  reason  String value for reason.
     * @param  reissueSetting  String value for reissueSetting.
     * @param  statusDescription  String value for statusDescription.
     * @param  statusId  Integer value for statusId.
     * @param  tokenTypeID  Integer value for tokenTypeID.
     * @param  tokenTypeName  String value for tokenTypeName.
     * @param  vRN  String value for vRN.
     * @param  clientReferenceId  String value for clientReferenceId.
     * @param  isEMVContact  Boolean value for isEMVContact.
     * @param  isEMVContactless  Boolean value for isEMVContactless.
     * @param  isRFID  Boolean value for isRFID.
     * @param  rFIDUID  String value for rFIDUID.
     * @param  eMAID  String value for eMAID.
     * @param  eVPrintedNumber  String value for eVPrintedNumber.
     * @param  cardMediaCode  String value for cardMediaCode.
     */

    protected Card(OptionalNullable<Integer> accountId, OptionalNullable<String> accountName,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountShortName,
            OptionalNullable<String> bundleId, List<CardBlockSchedule> cardBlockSchedules,
            OptionalNullable<Integer> cardGroupId, OptionalNullable<String> cardGroupName,
            OptionalNullable<Integer> cardId, OptionalNullable<String> cardTypeCode,
            OptionalNullable<Integer> cardTypeId, OptionalNullable<String> cardTypeName,
            OptionalNullable<String> colCoCountryCode, OptionalNullable<String> creationDate,
            OptionalNullable<String> driverName, OptionalNullable<String> effectiveDate,
            OptionalNullable<String> expiryDate, Boolean fleetIdInput, Boolean isCRT,
            Boolean isFleet, Boolean isInternational, Boolean isNational,
            Boolean isPartnerSitesIncluded, Boolean isShellSitesOnly,
            OptionalNullable<String> issueDate, Boolean isSuperseded, Boolean isVirtualCard,
            OptionalNullable<String> lastModifiedDate, OptionalNullable<String> lastUsedDate,
            OptionalNullable<String> localCurrencyCode,
            OptionalNullable<String> localCurrencySymbol, Boolean odometerInput,
            OptionalNullable<String> pAN, OptionalNullable<String> purchaseCategoryCode,
            OptionalNullable<Integer> purchaseCategoryId,
            OptionalNullable<String> purchaseCategoryName, OptionalNullable<String> reason,
            OptionalNullable<String> reissueSetting, OptionalNullable<String> statusDescription,
            OptionalNullable<Integer> statusId, OptionalNullable<Integer> tokenTypeID,
            String tokenTypeName, OptionalNullable<String> vRN,
            OptionalNullable<String> clientReferenceId, Boolean isEMVContact,
            Boolean isEMVContactless, Boolean isRFID, OptionalNullable<String> rFIDUID,
            OptionalNullable<String> eMAID, OptionalNullable<String> eVPrintedNumber,
            OptionalNullable<String> cardMediaCode) {
        this.accountId = accountId;
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.bundleId = bundleId;
        this.cardBlockSchedules = cardBlockSchedules;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.cardId = cardId;
        this.cardTypeCode = cardTypeCode;
        this.cardTypeId = cardTypeId;
        this.cardTypeName = cardTypeName;
        this.colCoCountryCode = colCoCountryCode;
        this.creationDate = creationDate;
        this.driverName = driverName;
        this.effectiveDate = effectiveDate;
        this.expiryDate = expiryDate;
        this.fleetIdInput = fleetIdInput;
        this.isCRT = isCRT;
        this.isFleet = isFleet;
        this.isInternational = isInternational;
        this.isNational = isNational;
        this.isPartnerSitesIncluded = isPartnerSitesIncluded;
        this.isShellSitesOnly = isShellSitesOnly;
        this.issueDate = issueDate;
        this.isSuperseded = isSuperseded;
        this.isVirtualCard = isVirtualCard;
        this.lastModifiedDate = lastModifiedDate;
        this.lastUsedDate = lastUsedDate;
        this.localCurrencyCode = localCurrencyCode;
        this.localCurrencySymbol = localCurrencySymbol;
        this.odometerInput = odometerInput;
        this.pAN = pAN;
        this.purchaseCategoryCode = purchaseCategoryCode;
        this.purchaseCategoryId = purchaseCategoryId;
        this.purchaseCategoryName = purchaseCategoryName;
        this.reason = reason;
        this.reissueSetting = reissueSetting;
        this.statusDescription = statusDescription;
        this.statusId = statusId;
        this.tokenTypeID = tokenTypeID;
        this.tokenTypeName = tokenTypeName;
        this.vRN = vRN;
        this.clientReferenceId = clientReferenceId;
        this.isEMVContact = isEMVContact;
        this.isEMVContactless = isEMVContactless;
        this.isRFID = isRFID;
        this.rFIDUID = rFIDUID;
        this.eMAID = eMAID;
        this.eVPrintedNumber = eVPrintedNumber;
        this.cardMediaCode = cardMediaCode;
    }

    /**
     * Internal Getter for AccountId.
     * Account ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account ID
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account ID
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account ID
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountName.
     * Account Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Account Name
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Account Name
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Account Name
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for BundleId.
     * Bundle Id associated with card in the Gateway.&lt;br /&gt; This field will have null value if the
     * card is not associated with any bundle in Gateway or the value of IncludeBundleDetails in
     * request is false.
     * @return Returns the Internal String
     */
    @JsonGetter("BundleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBundleId() {
        return this.bundleId;
    }

    /**
     * Getter for BundleId.
     * Bundle Id associated with card in the Gateway.&lt;br /&gt; This field will have null value if the
     * card is not associated with any bundle in Gateway or the value of IncludeBundleDetails in
     * request is false.
     * @return Returns the String
     */
    public String getBundleId() {
        return OptionalNullable.getFrom(bundleId);
    }

    /**
     * Setter for BundleId.
     * Bundle Id associated with card in the Gateway.&lt;br /&gt; This field will have null value if the
     * card is not associated with any bundle in Gateway or the value of IncludeBundleDetails in
     * request is false.
     * @param bundleId Value for String
     */
    @JsonSetter("BundleId")
    public void setBundleId(String bundleId) {
        this.bundleId = OptionalNullable.of(bundleId);
    }

    /**
     * UnSetter for BundleId.
     * Bundle Id associated with card in the Gateway.&lt;br /&gt; This field will have null value if the
     * card is not associated with any bundle in Gateway or the value of IncludeBundleDetails in
     * request is false.
     */
    public void unsetBundleId() {
        bundleId = null;
    }

    /**
     * Getter for CardBlockSchedules.
     * List of Scheduled Card Blocks details&lt;br /&gt; Entity: CardBlockSchedule
     * @return Returns the List of CardBlockSchedule
     */
    @JsonGetter("CardBlockSchedules")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<CardBlockSchedule> getCardBlockSchedules() {
        return cardBlockSchedules;
    }

    /**
     * Setter for CardBlockSchedules.
     * List of Scheduled Card Blocks details&lt;br /&gt; Entity: CardBlockSchedule
     * @param cardBlockSchedules Value for List of CardBlockSchedule
     */
    @JsonSetter("CardBlockSchedules")
    public void setCardBlockSchedules(List<CardBlockSchedule> cardBlockSchedules) {
        this.cardBlockSchedules = cardBlockSchedules;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group ID
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group ID
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group ID
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card group name
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card group name
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card group name
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card group name
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card Id
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card Id
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card Id
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeCode() {
        return this.cardTypeCode;
    }

    /**
     * Getter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     * @return Returns the String
     */
    public String getCardTypeCode() {
        return OptionalNullable.getFrom(cardTypeCode);
    }

    /**
     * Setter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     * @param cardTypeCode Value for String
     */
    @JsonSetter("CardTypeCode")
    public void setCardTypeCode(String cardTypeCode) {
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
    }

    /**
     * UnSetter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN
     */
    public void unsetCardTypeCode() {
        cardTypeCode = null;
    }

    /**
     * Internal Getter for CardTypeId.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines&lt;br /&gt; Fleet
     * 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardTypeId() {
        return this.cardTypeId;
    }

    /**
     * Getter for CardTypeId.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines&lt;br /&gt; Fleet
     * 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     * @return Returns the Integer
     */
    public Integer getCardTypeId() {
        return OptionalNullable.getFrom(cardTypeId);
    }

    /**
     * Setter for CardTypeId.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines&lt;br /&gt; Fleet
     * 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     * @param cardTypeId Value for Integer
     */
    @JsonSetter("CardTypeId")
    public void setCardTypeId(Integer cardTypeId) {
        this.cardTypeId = OptionalNullable.of(cardTypeId);
    }

    /**
     * UnSetter for CardTypeId.
     * Card Type ID Example Id and Description: 1 -Philippines CRT 7077861 2-Philippines&lt;br /&gt; Fleet
     * 7002861 5-SHELL FLEET-HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT- HONG KONG
     * 7077821
     */
    public void unsetCardTypeId() {
        cardTypeId = null;
    }

    /**
     * Internal Getter for CardTypeName.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines &lt;br /&gt;
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT-
     * HONG KONG 7077821
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeName() {
        return this.cardTypeName;
    }

    /**
     * Getter for CardTypeName.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines &lt;br /&gt;
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT-
     * HONG KONG 7077821
     * @return Returns the String
     */
    public String getCardTypeName() {
        return OptionalNullable.getFrom(cardTypeName);
    }

    /**
     * Setter for CardTypeName.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines &lt;br /&gt;
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT-
     * HONG KONG 7077821
     * @param cardTypeName Value for String
     */
    @JsonSetter("CardTypeName")
    public void setCardTypeName(String cardTypeName) {
        this.cardTypeName = OptionalNullable.of(cardTypeName);
    }

    /**
     * UnSetter for CardTypeName.
     * Card Type Name Example Id and Description: 1-Philippines CRT 7077861 2-Philippines &lt;br /&gt;
     * Fleet 7002861 5-SHELL FLEET- HONG KONG 7002821 6-SHELL NHF- HONG KONG 7002821 7-SHELL CRT-
     * HONG KONG 7077821
     */
    public void unsetCardTypeName() {
        cardTypeName = null;
    }

    /**
     * Internal Getter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country. &lt;br /&gt; If default card
     * type is not set then the first two alphabets of the account ID is returned.
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCountryCode() {
        return this.colCoCountryCode;
    }

    /**
     * Getter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country. &lt;br /&gt; If default card
     * type is not set then the first two alphabets of the account ID is returned.
     * @return Returns the String
     */
    public String getColCoCountryCode() {
        return OptionalNullable.getFrom(colCoCountryCode);
    }

    /**
     * Setter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country. &lt;br /&gt; If default card
     * type is not set then the first two alphabets of the account ID is returned.
     * @param colCoCountryCode Value for String
     */
    @JsonSetter("ColCoCountryCode")
    public void setColCoCountryCode(String colCoCountryCode) {
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
    }

    /**
     * UnSetter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country. &lt;br /&gt; If default card
     * type is not set then the first two alphabets of the account ID is returned.
     */
    public void unsetColCoCountryCode() {
        colCoCountryCode = null;
    }

    /**
     * Internal Getter for CreationDate.
     * Card Creation datetime.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to convert this
     * to appropriate DateTime type.
     * @return Returns the Internal String
     */
    @JsonGetter("CreationDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreationDate() {
        return this.creationDate;
    }

    /**
     * Getter for CreationDate.
     * Card Creation datetime.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to convert this
     * to appropriate DateTime type.
     * @return Returns the String
     */
    public String getCreationDate() {
        return OptionalNullable.getFrom(creationDate);
    }

    /**
     * Setter for CreationDate.
     * Card Creation datetime.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to convert this
     * to appropriate DateTime type.
     * @param creationDate Value for String
     */
    @JsonSetter("CreationDate")
    public void setCreationDate(String creationDate) {
        this.creationDate = OptionalNullable.of(creationDate);
    }

    /**
     * UnSetter for CreationDate.
     * Card Creation datetime.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to convert this
     * to appropriate DateTime type.
     */
    public void unsetCreationDate() {
        creationDate = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver name
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver name
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver name
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver name
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     * @return Returns the Internal String
     */
    @JsonGetter("EffectiveDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEffectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Getter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     * @return Returns the String
     */
    public String getEffectiveDate() {
        return OptionalNullable.getFrom(effectiveDate);
    }

    /**
     * Setter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     * @param effectiveDate Value for String
     */
    @JsonSetter("EffectiveDate")
    public void setEffectiveDate(String effectiveDate) {
        this.effectiveDate = OptionalNullable.of(effectiveDate);
    }

    /**
     * UnSetter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     */
    public void unsetEffectiveDate() {
        effectiveDate = null;
    }

    /**
     * Internal Getter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     * @return Returns the Internal String
     */
    @JsonGetter("ExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiryDate() {
        return this.expiryDate;
    }

    /**
     * Getter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     * @return Returns the String
     */
    public String getExpiryDate() {
        return OptionalNullable.getFrom(expiryDate);
    }

    /**
     * Setter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     * @param expiryDate Value for String
     */
    @JsonSetter("ExpiryDate")
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = OptionalNullable.of(expiryDate);
    }

    /**
     * UnSetter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to
     * appropriate DateTime type.
     */
    public void unsetExpiryDate() {
        expiryDate = null;
    }

    /**
     * Getter for FleetIdInput.
     * True/False True if fleet id input is enabled, else false
     * @return Returns the Boolean
     */
    @JsonGetter("FleetIdInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFleetIdInput() {
        return fleetIdInput;
    }

    /**
     * Setter for FleetIdInput.
     * True/False True if fleet id input is enabled, else false
     * @param fleetIdInput Value for Boolean
     */
    @JsonSetter("FleetIdInput")
    public void setFleetIdInput(Boolean fleetIdInput) {
        this.fleetIdInput = fleetIdInput;
    }

    /**
     * Getter for IsCRT.
     * True/False True if it is a CRT type card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsCRT")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsCRT() {
        return isCRT;
    }

    /**
     * Setter for IsCRT.
     * True/False True if it is a CRT type card, else false
     * @param isCRT Value for Boolean
     */
    @JsonSetter("IsCRT")
    public void setIsCRT(Boolean isCRT) {
        this.isCRT = isCRT;
    }

    /**
     * Getter for IsFleet.
     * True/False True if it is a Fleet type card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsFleet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsFleet() {
        return isFleet;
    }

    /**
     * Setter for IsFleet.
     * True/False True if it is a Fleet type card, else false
     * @param isFleet Value for Boolean
     */
    @JsonSetter("IsFleet")
    public void setIsFleet(Boolean isFleet) {
        this.isFleet = isFleet;
    }

    /**
     * Getter for IsInternational.
     * True/False True if it is an international card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsInternational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsInternational() {
        return isInternational;
    }

    /**
     * Setter for IsInternational.
     * True/False True if it is an international card, else false
     * @param isInternational Value for Boolean
     */
    @JsonSetter("IsInternational")
    public void setIsInternational(Boolean isInternational) {
        this.isInternational = isInternational;
    }

    /**
     * Getter for IsNational.
     * True/False True if it is a national card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsNational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsNational() {
        return isNational;
    }

    /**
     * Setter for IsNational.
     * True/False True if it is a national card, else false
     * @param isNational Value for Boolean
     */
    @JsonSetter("IsNational")
    public void setIsNational(Boolean isNational) {
        this.isNational = isNational;
    }

    /**
     * Getter for IsPartnerSitesIncluded.
     * True/False True if it is allowed at all partner sites, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsPartnerSitesIncluded")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsPartnerSitesIncluded() {
        return isPartnerSitesIncluded;
    }

    /**
     * Setter for IsPartnerSitesIncluded.
     * True/False True if it is allowed at all partner sites, else false
     * @param isPartnerSitesIncluded Value for Boolean
     */
    @JsonSetter("IsPartnerSitesIncluded")
    public void setIsPartnerSitesIncluded(Boolean isPartnerSitesIncluded) {
        this.isPartnerSitesIncluded = isPartnerSitesIncluded;
    }

    /**
     * Getter for IsShellSitesOnly.
     * True/False True if it is only allowed at Shell sites, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsShellSitesOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsShellSitesOnly() {
        return isShellSitesOnly;
    }

    /**
     * Setter for IsShellSitesOnly.
     * True/False True if it is only allowed at Shell sites, else false
     * @param isShellSitesOnly Value for Boolean
     */
    @JsonSetter("IsShellSitesOnly")
    public void setIsShellSitesOnly(Boolean isShellSitesOnly) {
        this.isShellSitesOnly = isShellSitesOnly;
    }

    /**
     * Internal Getter for IssueDate.
     * Issue date&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime
     * type.
     * @return Returns the Internal String
     */
    @JsonGetter("IssueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssueDate() {
        return this.issueDate;
    }

    /**
     * Getter for IssueDate.
     * Issue date&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime
     * type.
     * @return Returns the String
     */
    public String getIssueDate() {
        return OptionalNullable.getFrom(issueDate);
    }

    /**
     * Setter for IssueDate.
     * Issue date&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime
     * type.
     * @param issueDate Value for String
     */
    @JsonSetter("IssueDate")
    public void setIssueDate(String issueDate) {
        this.issueDate = OptionalNullable.of(issueDate);
    }

    /**
     * UnSetter for IssueDate.
     * Issue date&lt;br /&gt; Format: yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime
     * type.
     */
    public void unsetIssueDate() {
        issueDate = null;
    }

    /**
     * Getter for IsSuperseded.
     * True/False True if a new card is issued with the same PAN, else false.
     * @return Returns the Boolean
     */
    @JsonGetter("IsSuperseded")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsSuperseded() {
        return isSuperseded;
    }

    /**
     * Setter for IsSuperseded.
     * True/False True if a new card is issued with the same PAN, else false.
     * @param isSuperseded Value for Boolean
     */
    @JsonSetter("IsSuperseded")
    public void setIsSuperseded(Boolean isSuperseded) {
        this.isSuperseded = isSuperseded;
    }

    /**
     * Getter for IsVirtualCard.
     * True/False True if it is a virtual card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("IsVirtualCard")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsVirtualCard() {
        return isVirtualCard;
    }

    /**
     * Setter for IsVirtualCard.
     * True/False True if it is a virtual card, else false
     * @param isVirtualCard Value for Boolean
     */
    @JsonSetter("IsVirtualCard")
    public void setIsVirtualCard(Boolean isVirtualCard) {
        this.isVirtualCard = isVirtualCard;
    }

    /**
     * Internal Getter for LastModifiedDate.
     * Card last modified date and time&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to
     * convert this to appropriate DateTime type.
     * @return Returns the Internal String
     */
    @JsonGetter("LastModifiedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastModifiedDate() {
        return this.lastModifiedDate;
    }

    /**
     * Getter for LastModifiedDate.
     * Card last modified date and time&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to
     * convert this to appropriate DateTime type.
     * @return Returns the String
     */
    public String getLastModifiedDate() {
        return OptionalNullable.getFrom(lastModifiedDate);
    }

    /**
     * Setter for LastModifiedDate.
     * Card last modified date and time&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to
     * convert this to appropriate DateTime type.
     * @param lastModifiedDate Value for String
     */
    @JsonSetter("LastModifiedDate")
    public void setLastModifiedDate(String lastModifiedDate) {
        this.lastModifiedDate = OptionalNullable.of(lastModifiedDate);
    }

    /**
     * UnSetter for LastModifiedDate.
     * Card last modified date and time&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: Clients to
     * convert this to appropriate DateTime type.
     */
    public void unsetLastModifiedDate() {
        lastModifiedDate = null;
    }

    /**
     * Internal Getter for LastUsedDate.
     * Card last used date .&lt;br /&gt; Note: last used date of a card will be calculated based on
     * billed/unbilled sales items of a given card.The query that extracts the last used dates will
     * be applied on the subset of the cards being returned to the client.Unbilled sales items is
     * checked first and for those not found in the unbilled table, sales items will be checked
     * (only when the last used date is not found in unbilled table for at least a single card from
     * the result). The transactions in last 48 hours are not expected to be Therefore this field
     * gives the correct information up to 48 hours early.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt;
     * Note: Clients to convert this to appropriate DateTime type
     * @return Returns the Internal String
     */
    @JsonGetter("LastUsedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastUsedDate() {
        return this.lastUsedDate;
    }

    /**
     * Getter for LastUsedDate.
     * Card last used date .&lt;br /&gt; Note: last used date of a card will be calculated based on
     * billed/unbilled sales items of a given card.The query that extracts the last used dates will
     * be applied on the subset of the cards being returned to the client.Unbilled sales items is
     * checked first and for those not found in the unbilled table, sales items will be checked
     * (only when the last used date is not found in unbilled table for at least a single card from
     * the result). The transactions in last 48 hours are not expected to be Therefore this field
     * gives the correct information up to 48 hours early.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt;
     * Note: Clients to convert this to appropriate DateTime type
     * @return Returns the String
     */
    public String getLastUsedDate() {
        return OptionalNullable.getFrom(lastUsedDate);
    }

    /**
     * Setter for LastUsedDate.
     * Card last used date .&lt;br /&gt; Note: last used date of a card will be calculated based on
     * billed/unbilled sales items of a given card.The query that extracts the last used dates will
     * be applied on the subset of the cards being returned to the client.Unbilled sales items is
     * checked first and for those not found in the unbilled table, sales items will be checked
     * (only when the last used date is not found in unbilled table for at least a single card from
     * the result). The transactions in last 48 hours are not expected to be Therefore this field
     * gives the correct information up to 48 hours early.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt;
     * Note: Clients to convert this to appropriate DateTime type
     * @param lastUsedDate Value for String
     */
    @JsonSetter("LastUsedDate")
    public void setLastUsedDate(String lastUsedDate) {
        this.lastUsedDate = OptionalNullable.of(lastUsedDate);
    }

    /**
     * UnSetter for LastUsedDate.
     * Card last used date .&lt;br /&gt; Note: last used date of a card will be calculated based on
     * billed/unbilled sales items of a given card.The query that extracts the last used dates will
     * be applied on the subset of the cards being returned to the client.Unbilled sales items is
     * checked first and for those not found in the unbilled table, sales items will be checked
     * (only when the last used date is not found in unbilled table for at least a single card from
     * the result). The transactions in last 48 hours are not expected to be Therefore this field
     * gives the correct information up to 48 hours early.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt;
     * Note: Clients to convert this to appropriate DateTime type
     */
    public void unsetLastUsedDate() {
        lastUsedDate = null;
    }

    /**
     * Internal Getter for LocalCurrencyCode.
     * ISO code of the local currency. &lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencyCode() {
        return this.localCurrencyCode;
    }

    /**
     * Getter for LocalCurrencyCode.
     * ISO code of the local currency. &lt;br /&gt;
     * @return Returns the String
     */
    public String getLocalCurrencyCode() {
        return OptionalNullable.getFrom(localCurrencyCode);
    }

    /**
     * Setter for LocalCurrencyCode.
     * ISO code of the local currency. &lt;br /&gt;
     * @param localCurrencyCode Value for String
     */
    @JsonSetter("LocalCurrencyCode")
    public void setLocalCurrencyCode(String localCurrencyCode) {
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
    }

    /**
     * UnSetter for LocalCurrencyCode.
     * ISO code of the local currency. &lt;br /&gt;
     */
    public void unsetLocalCurrencyCode() {
        localCurrencyCode = null;
    }

    /**
     * Internal Getter for LocalCurrencySymbol.
     * Local currency symbol. &lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencySymbol() {
        return this.localCurrencySymbol;
    }

    /**
     * Getter for LocalCurrencySymbol.
     * Local currency symbol. &lt;br /&gt;
     * @return Returns the String
     */
    public String getLocalCurrencySymbol() {
        return OptionalNullable.getFrom(localCurrencySymbol);
    }

    /**
     * Setter for LocalCurrencySymbol.
     * Local currency symbol. &lt;br /&gt;
     * @param localCurrencySymbol Value for String
     */
    @JsonSetter("LocalCurrencySymbol")
    public void setLocalCurrencySymbol(String localCurrencySymbol) {
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
    }

    /**
     * UnSetter for LocalCurrencySymbol.
     * Local currency symbol. &lt;br /&gt;
     */
    public void unsetLocalCurrencySymbol() {
        localCurrencySymbol = null;
    }

    /**
     * Getter for OdometerInput.
     * True/False True if odometer input is enabled on the card, else false
     * @return Returns the Boolean
     */
    @JsonGetter("OdometerInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getOdometerInput() {
        return odometerInput;
    }

    /**
     * Setter for OdometerInput.
     * True/False True if odometer input is enabled on the card, else false
     * @param odometerInput Value for Boolean
     */
    @JsonSetter("OdometerInput")
    public void setOdometerInput(Boolean odometerInput) {
        this.odometerInput = odometerInput;
    }

    /**
     * Internal Getter for PAN.
     * Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
     * @return Returns the Internal String
     */
    @JsonGetter("PAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPAN() {
        return this.pAN;
    }

    /**
     * Getter for PAN.
     * Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
     * @return Returns the String
     */
    public String getPAN() {
        return OptionalNullable.getFrom(pAN);
    }

    /**
     * Setter for PAN.
     * Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
     * @param pAN Value for String
     */
    @JsonSetter("PAN")
    public void setPAN(String pAN) {
        this.pAN = OptionalNullable.of(pAN);
    }

    /**
     * UnSetter for PAN.
     * Card PAN Mask PAN (Mask all digits except the Last 6 digits of the PAN)
     */
    public void unsetPAN() {
        pAN = null;
    }

    /**
     * Internal Getter for PurchaseCategoryCode.
     * Purchase category code
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryCode() {
        return this.purchaseCategoryCode;
    }

    /**
     * Getter for PurchaseCategoryCode.
     * Purchase category code
     * @return Returns the String
     */
    public String getPurchaseCategoryCode() {
        return OptionalNullable.getFrom(purchaseCategoryCode);
    }

    /**
     * Setter for PurchaseCategoryCode.
     * Purchase category code
     * @param purchaseCategoryCode Value for String
     */
    @JsonSetter("PurchaseCategoryCode")
    public void setPurchaseCategoryCode(String purchaseCategoryCode) {
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
    }

    /**
     * UnSetter for PurchaseCategoryCode.
     * Purchase category code
     */
    public void unsetPurchaseCategoryCode() {
        purchaseCategoryCode = null;
    }

    /**
     * Internal Getter for PurchaseCategoryId.
     * Purchase category Id &lt;br /&gt; Note: Not Purchase code.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PurchaseCategoryId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPurchaseCategoryId() {
        return this.purchaseCategoryId;
    }

    /**
     * Getter for PurchaseCategoryId.
     * Purchase category Id &lt;br /&gt; Note: Not Purchase code.
     * @return Returns the Integer
     */
    public Integer getPurchaseCategoryId() {
        return OptionalNullable.getFrom(purchaseCategoryId);
    }

    /**
     * Setter for PurchaseCategoryId.
     * Purchase category Id &lt;br /&gt; Note: Not Purchase code.
     * @param purchaseCategoryId Value for Integer
     */
    @JsonSetter("PurchaseCategoryId")
    public void setPurchaseCategoryId(Integer purchaseCategoryId) {
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
    }

    /**
     * UnSetter for PurchaseCategoryId.
     * Purchase category Id &lt;br /&gt; Note: Not Purchase code.
     */
    public void unsetPurchaseCategoryId() {
        purchaseCategoryId = null;
    }

    /**
     * Internal Getter for PurchaseCategoryName.
     * Purchase category name
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryName() {
        return this.purchaseCategoryName;
    }

    /**
     * Getter for PurchaseCategoryName.
     * Purchase category name
     * @return Returns the String
     */
    public String getPurchaseCategoryName() {
        return OptionalNullable.getFrom(purchaseCategoryName);
    }

    /**
     * Setter for PurchaseCategoryName.
     * Purchase category name
     * @param purchaseCategoryName Value for String
     */
    @JsonSetter("PurchaseCategoryName")
    public void setPurchaseCategoryName(String purchaseCategoryName) {
        this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
    }

    /**
     * UnSetter for PurchaseCategoryName.
     * Purchase category name
     */
    public void unsetPurchaseCategoryName() {
        purchaseCategoryName = null;
    }

    /**
     * Internal Getter for Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     * @return Returns the Internal String
     */
    @JsonGetter("Reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReason() {
        return this.reason;
    }

    /**
     * Getter for Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     * @return Returns the String
     */
    public String getReason() {
        return OptionalNullable.getFrom(reason);
    }

    /**
     * Setter for Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     * @param reason Value for String
     */
    @JsonSetter("Reason")
    public void setReason(String reason) {
        this.reason = OptionalNullable.of(reason);
    }

    /**
     * UnSetter for Reason.
     * Card Status reason Example: Lost Stolen Card no longer required
     */
    public void unsetReason() {
        reason = null;
    }

    /**
     * Internal Getter for ReissueSetting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is
     * issued) then reissue setting of the latest card issued. &lt;br /&gt; Values&lt;br /&gt; •True –Card will
     * be Reissued when nearing its expiry date &lt;br /&gt; •False –Card will not be Reissued
     * @return Returns the Internal String
     */
    @JsonGetter("ReissueSetting")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReissueSetting() {
        return this.reissueSetting;
    }

    /**
     * Getter for ReissueSetting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is
     * issued) then reissue setting of the latest card issued. &lt;br /&gt; Values&lt;br /&gt; •True –Card will
     * be Reissued when nearing its expiry date &lt;br /&gt; •False –Card will not be Reissued
     * @return Returns the String
     */
    public String getReissueSetting() {
        return OptionalNullable.getFrom(reissueSetting);
    }

    /**
     * Setter for ReissueSetting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is
     * issued) then reissue setting of the latest card issued. &lt;br /&gt; Values&lt;br /&gt; •True –Card will
     * be Reissued when nearing its expiry date &lt;br /&gt; •False –Card will not be Reissued
     * @param reissueSetting Value for String
     */
    @JsonSetter("ReissueSetting")
    public void setReissueSetting(String reissueSetting) {
        this.reissueSetting = OptionalNullable.of(reissueSetting);
    }

    /**
     * UnSetter for ReissueSetting.
     * Reissue setting of the card. If the card is superseded (i.e. a replacement/new card is
     * issued) then reissue setting of the latest card issued. &lt;br /&gt; Values&lt;br /&gt; •True –Card will
     * be Reissued when nearing its expiry date &lt;br /&gt; •False –Card will not be Reissued
     */
    public void unsetReissueSetting() {
        reissueSetting = null;
    }

    /**
     * Internal Getter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)&lt;br /&gt; Possible Ids and description: 1
     * Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending Renewal 31 Replaced 41&lt;br /&gt;
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)&lt;br
     * /&gt; * 102 Blocked Card(Unblock in progress) &lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; *
     * 104 Active(Marked as damaged)&lt;br /&gt; * 105 New(Cancel in progress) &lt;br /&gt; * 106 {
     * Status}(Scheduled for block)&lt;br /&gt; * 107 { Status}(Scheduled for unblock) &lt;br /&gt; *# Note:
     * Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.&lt;br /&gt; The response can contain these intermediate statuses only if the&lt;br /&gt;
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items&lt;br /&gt; marked
     * with # will be replaced with the status description. E.g., Active (Scheduled for block)
     * @return Returns the Internal String
     */
    @JsonGetter("StatusDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatusDescription() {
        return this.statusDescription;
    }

    /**
     * Getter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)&lt;br /&gt; Possible Ids and description: 1
     * Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending Renewal 31 Replaced 41&lt;br /&gt;
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)&lt;br
     * /&gt; * 102 Blocked Card(Unblock in progress) &lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; *
     * 104 Active(Marked as damaged)&lt;br /&gt; * 105 New(Cancel in progress) &lt;br /&gt; * 106 {
     * Status}(Scheduled for block)&lt;br /&gt; * 107 { Status}(Scheduled for unblock) &lt;br /&gt; *# Note:
     * Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.&lt;br /&gt; The response can contain these intermediate statuses only if the&lt;br /&gt;
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items&lt;br /&gt; marked
     * with # will be replaced with the status description. E.g., Active (Scheduled for block)
     * @return Returns the String
     */
    public String getStatusDescription() {
        return OptionalNullable.getFrom(statusDescription);
    }

    /**
     * Setter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)&lt;br /&gt; Possible Ids and description: 1
     * Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending Renewal 31 Replaced 41&lt;br /&gt;
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)&lt;br
     * /&gt; * 102 Blocked Card(Unblock in progress) &lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; *
     * 104 Active(Marked as damaged)&lt;br /&gt; * 105 New(Cancel in progress) &lt;br /&gt; * 106 {
     * Status}(Scheduled for block)&lt;br /&gt; * 107 { Status}(Scheduled for unblock) &lt;br /&gt; *# Note:
     * Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.&lt;br /&gt; The response can contain these intermediate statuses only if the&lt;br /&gt;
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items&lt;br /&gt; marked
     * with # will be replaced with the status description. E.g., Active (Scheduled for block)
     * @param statusDescription Value for String
     */
    @JsonSetter("StatusDescription")
    public void setStatusDescription(String statusDescription) {
        this.statusDescription = OptionalNullable.of(statusDescription);
    }

    /**
     * UnSetter for StatusDescription.
     * Status Description (Active, Temporarily Blocked, etc.,)&lt;br /&gt; Possible Ids and description: 1
     * Active 7 Blocked Card 8 Expired 9 Cancelled 10 New 23 Pending Renewal 31 Replaced 41&lt;br /&gt;
     * Temporary Block(Customer) 42 Temporary Block(Shell) 43 Fraud 101 Active(Block in progress)&lt;br
     * /&gt; * 102 Blocked Card(Unblock in progress) &lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; *
     * 104 Active(Marked as damaged)&lt;br /&gt; * 105 New(Cancel in progress) &lt;br /&gt; * 106 {
     * Status}(Scheduled for block)&lt;br /&gt; * 107 { Status}(Scheduled for unblock) &lt;br /&gt; *# Note:
     * Items marked with* are intermediate statuses to indicate that there are pending requests in
     * progress.&lt;br /&gt; The response can contain these intermediate statuses only if the&lt;br /&gt;
     * IncludeIntermediateStatus flag is true. The placeholder { Status} in the items&lt;br /&gt; marked
     * with # will be replaced with the status description. E.g., Active (Scheduled for block)
     */
    public void unsetStatusDescription() {
        statusDescription = null;
    }

    /**
     * Internal Getter for StatusId.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10
     * New 23 Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 &lt;br /&gt; Temporary
     * Block(Shell) 43 Fraud 101 Active(Block in progress) &lt;br /&gt; * 102 Blocked Card(Unblock in
     * progress)&lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; * 104 Active(Marked as damaged) &lt;br
     * /&gt; * 105 New(Cancel in progress)&lt;br /&gt; * 106 { Status}(Scheduled for block) &lt;br /&gt; # 107
     * {Status}(Scheduled for unblock)&lt;br /&gt; *# Note: Items marked with* are intermediate statuses
     * to indicate that there are pending requests in progress.&lt;br /&gt; The response can contain these
     * intermediate statuses only if the IncludeIntermediateStatus flag is true.&lt;br /&gt; The
     * placeholder { Status} in the items marked with # will be replaced with&lt;br /&gt; the status
     * description. E.g., Active (Scheduled for block)
     * @return Returns the Internal Integer
     */
    @JsonGetter("StatusId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetStatusId() {
        return this.statusId;
    }

    /**
     * Getter for StatusId.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10
     * New 23 Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 &lt;br /&gt; Temporary
     * Block(Shell) 43 Fraud 101 Active(Block in progress) &lt;br /&gt; * 102 Blocked Card(Unblock in
     * progress)&lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; * 104 Active(Marked as damaged) &lt;br
     * /&gt; * 105 New(Cancel in progress)&lt;br /&gt; * 106 { Status}(Scheduled for block) &lt;br /&gt; # 107
     * {Status}(Scheduled for unblock)&lt;br /&gt; *# Note: Items marked with* are intermediate statuses
     * to indicate that there are pending requests in progress.&lt;br /&gt; The response can contain these
     * intermediate statuses only if the IncludeIntermediateStatus flag is true.&lt;br /&gt; The
     * placeholder { Status} in the items marked with # will be replaced with&lt;br /&gt; the status
     * description. E.g., Active (Scheduled for block)
     * @return Returns the Integer
     */
    public Integer getStatusId() {
        return OptionalNullable.getFrom(statusId);
    }

    /**
     * Setter for StatusId.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10
     * New 23 Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 &lt;br /&gt; Temporary
     * Block(Shell) 43 Fraud 101 Active(Block in progress) &lt;br /&gt; * 102 Blocked Card(Unblock in
     * progress)&lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; * 104 Active(Marked as damaged) &lt;br
     * /&gt; * 105 New(Cancel in progress)&lt;br /&gt; * 106 { Status}(Scheduled for block) &lt;br /&gt; # 107
     * {Status}(Scheduled for unblock)&lt;br /&gt; *# Note: Items marked with* are intermediate statuses
     * to indicate that there are pending requests in progress.&lt;br /&gt; The response can contain these
     * intermediate statuses only if the IncludeIntermediateStatus flag is true.&lt;br /&gt; The
     * placeholder { Status} in the items marked with # will be replaced with&lt;br /&gt; the status
     * description. E.g., Active (Scheduled for block)
     * @param statusId Value for Integer
     */
    @JsonSetter("StatusId")
    public void setStatusId(Integer statusId) {
        this.statusId = OptionalNullable.of(statusId);
    }

    /**
     * UnSetter for StatusId.
     * Card Status id Possible Ids and description: 1 Active 7 Blocked Card 8 Expired 9 Cancelled 10
     * New 23 Pending Renewal 31 Replaced 41 Temporary Block(Customer) 42 &lt;br /&gt; Temporary
     * Block(Shell) 43 Fraud 101 Active(Block in progress) &lt;br /&gt; * 102 Blocked Card(Unblock in
     * progress)&lt;br /&gt; * 103 Active(Cancel in progress) &lt;br /&gt; * 104 Active(Marked as damaged) &lt;br
     * /&gt; * 105 New(Cancel in progress)&lt;br /&gt; * 106 { Status}(Scheduled for block) &lt;br /&gt; # 107
     * {Status}(Scheduled for unblock)&lt;br /&gt; *# Note: Items marked with* are intermediate statuses
     * to indicate that there are pending requests in progress.&lt;br /&gt; The response can contain these
     * intermediate statuses only if the IncludeIntermediateStatus flag is true.&lt;br /&gt; The
     * placeholder { Status} in the items marked with # will be replaced with&lt;br /&gt; the status
     * description. E.g., Active (Scheduled for block)
     */
    public void unsetStatusId() {
        statusId = null;
    }

    /**
     * Internal Getter for TokenTypeID.
     * Token Type ID configured for the Card E.g. 107
     * @return Returns the Internal Integer
     */
    @JsonGetter("TokenTypeID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTokenTypeID() {
        return this.tokenTypeID;
    }

    /**
     * Getter for TokenTypeID.
     * Token Type ID configured for the Card E.g. 107
     * @return Returns the Integer
     */
    public Integer getTokenTypeID() {
        return OptionalNullable.getFrom(tokenTypeID);
    }

    /**
     * Setter for TokenTypeID.
     * Token Type ID configured for the Card E.g. 107
     * @param tokenTypeID Value for Integer
     */
    @JsonSetter("TokenTypeID")
    public void setTokenTypeID(Integer tokenTypeID) {
        this.tokenTypeID = OptionalNullable.of(tokenTypeID);
    }

    /**
     * UnSetter for TokenTypeID.
     * Token Type ID configured for the Card E.g. 107
     */
    public void unsetTokenTypeID() {
        tokenTypeID = null;
    }

    /**
     * Getter for TokenTypeName.
     * Token Type Name configured for the Card
     * @return Returns the String
     */
    @JsonGetter("TokenTypeName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTokenTypeName() {
        return tokenTypeName;
    }

    /**
     * Setter for TokenTypeName.
     * Token Type Name configured for the Card
     * @param tokenTypeName Value for String
     */
    @JsonSetter("TokenTypeName")
    public void setTokenTypeName(String tokenTypeName) {
        this.tokenTypeName = tokenTypeName;
    }

    /**
     * Internal Getter for VRN.
     * Vehicle registration number
     * @return Returns the Internal String
     */
    @JsonGetter("VRN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVRN() {
        return this.vRN;
    }

    /**
     * Getter for VRN.
     * Vehicle registration number
     * @return Returns the String
     */
    public String getVRN() {
        return OptionalNullable.getFrom(vRN);
    }

    /**
     * Setter for VRN.
     * Vehicle registration number
     * @param vRN Value for String
     */
    @JsonSetter("VRN")
    public void setVRN(String vRN) {
        this.vRN = OptionalNullable.of(vRN);
    }

    /**
     * UnSetter for VRN.
     * Vehicle registration number
     */
    public void unsetVRN() {
        vRN = null;
    }

    /**
     * Internal Getter for ClientReferenceId.
     * Customer reference number of the card.
     * @return Returns the Internal String
     */
    @JsonGetter("ClientReferenceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetClientReferenceId() {
        return this.clientReferenceId;
    }

    /**
     * Getter for ClientReferenceId.
     * Customer reference number of the card.
     * @return Returns the String
     */
    public String getClientReferenceId() {
        return OptionalNullable.getFrom(clientReferenceId);
    }

    /**
     * Setter for ClientReferenceId.
     * Customer reference number of the card.
     * @param clientReferenceId Value for String
     */
    @JsonSetter("ClientReferenceId")
    public void setClientReferenceId(String clientReferenceId) {
        this.clientReferenceId = OptionalNullable.of(clientReferenceId);
    }

    /**
     * UnSetter for ClientReferenceId.
     * Customer reference number of the card.
     */
    public void unsetClientReferenceId() {
        clientReferenceId = null;
    }

    /**
     * Getter for IsEMVContact.
     * Is Europay, MasterCard, and Visa Contact enabled or not.
     * @return Returns the Boolean
     */
    @JsonGetter("IsEMVContact")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsEMVContact() {
        return isEMVContact;
    }

    /**
     * Setter for IsEMVContact.
     * Is Europay, MasterCard, and Visa Contact enabled or not.
     * @param isEMVContact Value for Boolean
     */
    @JsonSetter("IsEMVContact")
    public void setIsEMVContact(Boolean isEMVContact) {
        this.isEMVContact = isEMVContact;
    }

    /**
     * Getter for IsEMVContactless.
     * Is Europay, MasterCard, and Visa Contactless enabled or not.
     * @return Returns the Boolean
     */
    @JsonGetter("IsEMVContactless")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsEMVContactless() {
        return isEMVContactless;
    }

    /**
     * Setter for IsEMVContactless.
     * Is Europay, MasterCard, and Visa Contactless enabled or not.
     * @param isEMVContactless Value for Boolean
     */
    @JsonSetter("IsEMVContactless")
    public void setIsEMVContactless(Boolean isEMVContactless) {
        this.isEMVContactless = isEMVContactless;
    }

    /**
     * Getter for IsRFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     * @return Returns the Boolean
     */
    @JsonGetter("IsRFID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsRFID() {
        return isRFID;
    }

    /**
     * Setter for IsRFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     * @param isRFID Value for Boolean
     */
    @JsonSetter("IsRFID")
    public void setIsRFID(Boolean isRFID) {
        this.isRFID = isRFID;
    }

    /**
     * Internal Getter for RFIDUID.
     * RFIDUID
     * @return Returns the Internal String
     */
    @JsonGetter("RFIDUID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRFIDUID() {
        return this.rFIDUID;
    }

    /**
     * Getter for RFIDUID.
     * RFIDUID
     * @return Returns the String
     */
    public String getRFIDUID() {
        return OptionalNullable.getFrom(rFIDUID);
    }

    /**
     * Setter for RFIDUID.
     * RFIDUID
     * @param rFIDUID Value for String
     */
    @JsonSetter("RFIDUID")
    public void setRFIDUID(String rFIDUID) {
        this.rFIDUID = OptionalNullable.of(rFIDUID);
    }

    /**
     * UnSetter for RFIDUID.
     * RFIDUID
     */
    public void unsetRFIDUID() {
        rFIDUID = null;
    }

    /**
     * Internal Getter for EMAID.
     * EMAID
     * @return Returns the Internal String
     */
    @JsonGetter("EMAID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEMAID() {
        return this.eMAID;
    }

    /**
     * Getter for EMAID.
     * EMAID
     * @return Returns the String
     */
    public String getEMAID() {
        return OptionalNullable.getFrom(eMAID);
    }

    /**
     * Setter for EMAID.
     * EMAID
     * @param eMAID Value for String
     */
    @JsonSetter("EMAID")
    public void setEMAID(String eMAID) {
        this.eMAID = OptionalNullable.of(eMAID);
    }

    /**
     * UnSetter for EMAID.
     * EMAID
     */
    public void unsetEMAID() {
        eMAID = null;
    }

    /**
     * Internal Getter for EVPrintedNumber.
     * EV Printed Number
     * @return Returns the Internal String
     */
    @JsonGetter("EVPrintedNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVPrintedNumber() {
        return this.eVPrintedNumber;
    }

    /**
     * Getter for EVPrintedNumber.
     * EV Printed Number
     * @return Returns the String
     */
    public String getEVPrintedNumber() {
        return OptionalNullable.getFrom(eVPrintedNumber);
    }

    /**
     * Setter for EVPrintedNumber.
     * EV Printed Number
     * @param eVPrintedNumber Value for String
     */
    @JsonSetter("EVPrintedNumber")
    public void setEVPrintedNumber(String eVPrintedNumber) {
        this.eVPrintedNumber = OptionalNullable.of(eVPrintedNumber);
    }

    /**
     * UnSetter for EVPrintedNumber.
     * EV Printed Number
     */
    public void unsetEVPrintedNumber() {
        eVPrintedNumber = null;
    }

    /**
     * Internal Getter for CardMediaCode.
     * Card Media Code.
     * @return Returns the Internal String
     */
    @JsonGetter("CardMediaCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardMediaCode() {
        return this.cardMediaCode;
    }

    /**
     * Getter for CardMediaCode.
     * Card Media Code.
     * @return Returns the String
     */
    public String getCardMediaCode() {
        return OptionalNullable.getFrom(cardMediaCode);
    }

    /**
     * Setter for CardMediaCode.
     * Card Media Code.
     * @param cardMediaCode Value for String
     */
    @JsonSetter("CardMediaCode")
    public void setCardMediaCode(String cardMediaCode) {
        this.cardMediaCode = OptionalNullable.of(cardMediaCode);
    }

    /**
     * UnSetter for CardMediaCode.
     * Card Media Code.
     */
    public void unsetCardMediaCode() {
        cardMediaCode = null;
    }

    /**
     * Converts this Card into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Card [" + "accountId=" + accountId + ", accountName=" + accountName
                + ", accountNumber=" + accountNumber + ", accountShortName=" + accountShortName
                + ", bundleId=" + bundleId + ", cardBlockSchedules=" + cardBlockSchedules
                + ", cardGroupId=" + cardGroupId + ", cardGroupName=" + cardGroupName + ", cardId="
                + cardId + ", cardTypeCode=" + cardTypeCode + ", cardTypeId=" + cardTypeId
                + ", cardTypeName=" + cardTypeName + ", colCoCountryCode=" + colCoCountryCode
                + ", creationDate=" + creationDate + ", driverName=" + driverName
                + ", effectiveDate=" + effectiveDate + ", expiryDate=" + expiryDate
                + ", fleetIdInput=" + fleetIdInput + ", isCRT=" + isCRT + ", isFleet=" + isFleet
                + ", isInternational=" + isInternational + ", isNational=" + isNational
                + ", isPartnerSitesIncluded=" + isPartnerSitesIncluded + ", isShellSitesOnly="
                + isShellSitesOnly + ", issueDate=" + issueDate + ", isSuperseded=" + isSuperseded
                + ", isVirtualCard=" + isVirtualCard + ", lastModifiedDate=" + lastModifiedDate
                + ", lastUsedDate=" + lastUsedDate + ", localCurrencyCode=" + localCurrencyCode
                + ", localCurrencySymbol=" + localCurrencySymbol + ", odometerInput="
                + odometerInput + ", pAN=" + pAN + ", purchaseCategoryCode=" + purchaseCategoryCode
                + ", purchaseCategoryId=" + purchaseCategoryId + ", purchaseCategoryName="
                + purchaseCategoryName + ", reason=" + reason + ", reissueSetting=" + reissueSetting
                + ", statusDescription=" + statusDescription + ", statusId=" + statusId
                + ", tokenTypeID=" + tokenTypeID + ", tokenTypeName=" + tokenTypeName + ", vRN="
                + vRN + ", clientReferenceId=" + clientReferenceId + ", isEMVContact="
                + isEMVContact + ", isEMVContactless=" + isEMVContactless + ", isRFID=" + isRFID
                + ", rFIDUID=" + rFIDUID + ", eMAID=" + eMAID + ", eVPrintedNumber="
                + eVPrintedNumber + ", cardMediaCode=" + cardMediaCode + "]";
    }

    /**
     * Builds a new {@link Card.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Card.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .cardBlockSchedules(getCardBlockSchedules())
                .fleetIdInput(getFleetIdInput())
                .isCRT(getIsCRT())
                .isFleet(getIsFleet())
                .isInternational(getIsInternational())
                .isNational(getIsNational())
                .isPartnerSitesIncluded(getIsPartnerSitesIncluded())
                .isShellSitesOnly(getIsShellSitesOnly())
                .isSuperseded(getIsSuperseded())
                .isVirtualCard(getIsVirtualCard())
                .odometerInput(getOdometerInput())
                .tokenTypeName(getTokenTypeName())
                .isEMVContact(getIsEMVContact())
                .isEMVContactless(getIsEMVContactless())
                .isRFID(getIsRFID());
        builder.accountId = internalGetAccountId();
        builder.accountName = internalGetAccountName();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.bundleId = internalGetBundleId();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.cardId = internalGetCardId();
        builder.cardTypeCode = internalGetCardTypeCode();
        builder.cardTypeId = internalGetCardTypeId();
        builder.cardTypeName = internalGetCardTypeName();
        builder.colCoCountryCode = internalGetColCoCountryCode();
        builder.creationDate = internalGetCreationDate();
        builder.driverName = internalGetDriverName();
        builder.effectiveDate = internalGetEffectiveDate();
        builder.expiryDate = internalGetExpiryDate();
        builder.issueDate = internalGetIssueDate();
        builder.lastModifiedDate = internalGetLastModifiedDate();
        builder.lastUsedDate = internalGetLastUsedDate();
        builder.localCurrencyCode = internalGetLocalCurrencyCode();
        builder.localCurrencySymbol = internalGetLocalCurrencySymbol();
        builder.pAN = internalGetPAN();
        builder.purchaseCategoryCode = internalGetPurchaseCategoryCode();
        builder.purchaseCategoryId = internalGetPurchaseCategoryId();
        builder.purchaseCategoryName = internalGetPurchaseCategoryName();
        builder.reason = internalGetReason();
        builder.reissueSetting = internalGetReissueSetting();
        builder.statusDescription = internalGetStatusDescription();
        builder.statusId = internalGetStatusId();
        builder.tokenTypeID = internalGetTokenTypeID();
        builder.vRN = internalGetVRN();
        builder.clientReferenceId = internalGetClientReferenceId();
        builder.rFIDUID = internalGetRFIDUID();
        builder.eMAID = internalGetEMAID();
        builder.eVPrintedNumber = internalGetEVPrintedNumber();
        builder.cardMediaCode = internalGetCardMediaCode();
        return builder;
    }

    /**
     * Class to build instances of {@link Card}.
     */
    public static class Builder {
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountName;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<String> bundleId;
        private List<CardBlockSchedule> cardBlockSchedules;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> cardTypeCode;
        private OptionalNullable<Integer> cardTypeId;
        private OptionalNullable<String> cardTypeName;
        private OptionalNullable<String> colCoCountryCode;
        private OptionalNullable<String> creationDate;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> effectiveDate;
        private OptionalNullable<String> expiryDate;
        private Boolean fleetIdInput;
        private Boolean isCRT;
        private Boolean isFleet;
        private Boolean isInternational;
        private Boolean isNational;
        private Boolean isPartnerSitesIncluded;
        private Boolean isShellSitesOnly;
        private OptionalNullable<String> issueDate;
        private Boolean isSuperseded;
        private Boolean isVirtualCard;
        private OptionalNullable<String> lastModifiedDate;
        private OptionalNullable<String> lastUsedDate;
        private OptionalNullable<String> localCurrencyCode;
        private OptionalNullable<String> localCurrencySymbol;
        private Boolean odometerInput;
        private OptionalNullable<String> pAN;
        private OptionalNullable<String> purchaseCategoryCode;
        private OptionalNullable<Integer> purchaseCategoryId;
        private OptionalNullable<String> purchaseCategoryName;
        private OptionalNullable<String> reason;
        private OptionalNullable<String> reissueSetting;
        private OptionalNullable<String> statusDescription;
        private OptionalNullable<Integer> statusId;
        private OptionalNullable<Integer> tokenTypeID;
        private String tokenTypeName;
        private OptionalNullable<String> vRN;
        private OptionalNullable<String> clientReferenceId;
        private Boolean isEMVContact;
        private Boolean isEMVContactless;
        private Boolean isRFID;
        private OptionalNullable<String> rFIDUID;
        private OptionalNullable<String> eMAID;
        private OptionalNullable<String> eVPrintedNumber;
        private OptionalNullable<String> cardMediaCode;



        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for bundleId.
         * @param  bundleId  String value for bundleId.
         * @return Builder
         */
        public Builder bundleId(String bundleId) {
            this.bundleId = OptionalNullable.of(bundleId);
            return this;
        }

        /**
         * UnSetter for bundleId.
         * @return Builder
         */
        public Builder unsetBundleId() {
            bundleId = null;
            return this;
        }

        /**
         * Setter for cardBlockSchedules.
         * @param  cardBlockSchedules  List of CardBlockSchedule value for cardBlockSchedules.
         * @return Builder
         */
        public Builder cardBlockSchedules(List<CardBlockSchedule> cardBlockSchedules) {
            this.cardBlockSchedules = cardBlockSchedules;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for cardTypeCode.
         * @param  cardTypeCode  String value for cardTypeCode.
         * @return Builder
         */
        public Builder cardTypeCode(String cardTypeCode) {
            this.cardTypeCode = OptionalNullable.of(cardTypeCode);
            return this;
        }

        /**
         * UnSetter for cardTypeCode.
         * @return Builder
         */
        public Builder unsetCardTypeCode() {
            cardTypeCode = null;
            return this;
        }

        /**
         * Setter for cardTypeId.
         * @param  cardTypeId  Integer value for cardTypeId.
         * @return Builder
         */
        public Builder cardTypeId(Integer cardTypeId) {
            this.cardTypeId = OptionalNullable.of(cardTypeId);
            return this;
        }

        /**
         * UnSetter for cardTypeId.
         * @return Builder
         */
        public Builder unsetCardTypeId() {
            cardTypeId = null;
            return this;
        }

        /**
         * Setter for cardTypeName.
         * @param  cardTypeName  String value for cardTypeName.
         * @return Builder
         */
        public Builder cardTypeName(String cardTypeName) {
            this.cardTypeName = OptionalNullable.of(cardTypeName);
            return this;
        }

        /**
         * UnSetter for cardTypeName.
         * @return Builder
         */
        public Builder unsetCardTypeName() {
            cardTypeName = null;
            return this;
        }

        /**
         * Setter for colCoCountryCode.
         * @param  colCoCountryCode  String value for colCoCountryCode.
         * @return Builder
         */
        public Builder colCoCountryCode(String colCoCountryCode) {
            this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
            return this;
        }

        /**
         * UnSetter for colCoCountryCode.
         * @return Builder
         */
        public Builder unsetColCoCountryCode() {
            colCoCountryCode = null;
            return this;
        }

        /**
         * Setter for creationDate.
         * @param  creationDate  String value for creationDate.
         * @return Builder
         */
        public Builder creationDate(String creationDate) {
            this.creationDate = OptionalNullable.of(creationDate);
            return this;
        }

        /**
         * UnSetter for creationDate.
         * @return Builder
         */
        public Builder unsetCreationDate() {
            creationDate = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for effectiveDate.
         * @param  effectiveDate  String value for effectiveDate.
         * @return Builder
         */
        public Builder effectiveDate(String effectiveDate) {
            this.effectiveDate = OptionalNullable.of(effectiveDate);
            return this;
        }

        /**
         * UnSetter for effectiveDate.
         * @return Builder
         */
        public Builder unsetEffectiveDate() {
            effectiveDate = null;
            return this;
        }

        /**
         * Setter for expiryDate.
         * @param  expiryDate  String value for expiryDate.
         * @return Builder
         */
        public Builder expiryDate(String expiryDate) {
            this.expiryDate = OptionalNullable.of(expiryDate);
            return this;
        }

        /**
         * UnSetter for expiryDate.
         * @return Builder
         */
        public Builder unsetExpiryDate() {
            expiryDate = null;
            return this;
        }

        /**
         * Setter for fleetIdInput.
         * @param  fleetIdInput  Boolean value for fleetIdInput.
         * @return Builder
         */
        public Builder fleetIdInput(Boolean fleetIdInput) {
            this.fleetIdInput = fleetIdInput;
            return this;
        }

        /**
         * Setter for isCRT.
         * @param  isCRT  Boolean value for isCRT.
         * @return Builder
         */
        public Builder isCRT(Boolean isCRT) {
            this.isCRT = isCRT;
            return this;
        }

        /**
         * Setter for isFleet.
         * @param  isFleet  Boolean value for isFleet.
         * @return Builder
         */
        public Builder isFleet(Boolean isFleet) {
            this.isFleet = isFleet;
            return this;
        }

        /**
         * Setter for isInternational.
         * @param  isInternational  Boolean value for isInternational.
         * @return Builder
         */
        public Builder isInternational(Boolean isInternational) {
            this.isInternational = isInternational;
            return this;
        }

        /**
         * Setter for isNational.
         * @param  isNational  Boolean value for isNational.
         * @return Builder
         */
        public Builder isNational(Boolean isNational) {
            this.isNational = isNational;
            return this;
        }

        /**
         * Setter for isPartnerSitesIncluded.
         * @param  isPartnerSitesIncluded  Boolean value for isPartnerSitesIncluded.
         * @return Builder
         */
        public Builder isPartnerSitesIncluded(Boolean isPartnerSitesIncluded) {
            this.isPartnerSitesIncluded = isPartnerSitesIncluded;
            return this;
        }

        /**
         * Setter for isShellSitesOnly.
         * @param  isShellSitesOnly  Boolean value for isShellSitesOnly.
         * @return Builder
         */
        public Builder isShellSitesOnly(Boolean isShellSitesOnly) {
            this.isShellSitesOnly = isShellSitesOnly;
            return this;
        }

        /**
         * Setter for issueDate.
         * @param  issueDate  String value for issueDate.
         * @return Builder
         */
        public Builder issueDate(String issueDate) {
            this.issueDate = OptionalNullable.of(issueDate);
            return this;
        }

        /**
         * UnSetter for issueDate.
         * @return Builder
         */
        public Builder unsetIssueDate() {
            issueDate = null;
            return this;
        }

        /**
         * Setter for isSuperseded.
         * @param  isSuperseded  Boolean value for isSuperseded.
         * @return Builder
         */
        public Builder isSuperseded(Boolean isSuperseded) {
            this.isSuperseded = isSuperseded;
            return this;
        }

        /**
         * Setter for isVirtualCard.
         * @param  isVirtualCard  Boolean value for isVirtualCard.
         * @return Builder
         */
        public Builder isVirtualCard(Boolean isVirtualCard) {
            this.isVirtualCard = isVirtualCard;
            return this;
        }

        /**
         * Setter for lastModifiedDate.
         * @param  lastModifiedDate  String value for lastModifiedDate.
         * @return Builder
         */
        public Builder lastModifiedDate(String lastModifiedDate) {
            this.lastModifiedDate = OptionalNullable.of(lastModifiedDate);
            return this;
        }

        /**
         * UnSetter for lastModifiedDate.
         * @return Builder
         */
        public Builder unsetLastModifiedDate() {
            lastModifiedDate = null;
            return this;
        }

        /**
         * Setter for lastUsedDate.
         * @param  lastUsedDate  String value for lastUsedDate.
         * @return Builder
         */
        public Builder lastUsedDate(String lastUsedDate) {
            this.lastUsedDate = OptionalNullable.of(lastUsedDate);
            return this;
        }

        /**
         * UnSetter for lastUsedDate.
         * @return Builder
         */
        public Builder unsetLastUsedDate() {
            lastUsedDate = null;
            return this;
        }

        /**
         * Setter for localCurrencyCode.
         * @param  localCurrencyCode  String value for localCurrencyCode.
         * @return Builder
         */
        public Builder localCurrencyCode(String localCurrencyCode) {
            this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
            return this;
        }

        /**
         * UnSetter for localCurrencyCode.
         * @return Builder
         */
        public Builder unsetLocalCurrencyCode() {
            localCurrencyCode = null;
            return this;
        }

        /**
         * Setter for localCurrencySymbol.
         * @param  localCurrencySymbol  String value for localCurrencySymbol.
         * @return Builder
         */
        public Builder localCurrencySymbol(String localCurrencySymbol) {
            this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for localCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLocalCurrencySymbol() {
            localCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for odometerInput.
         * @param  odometerInput  Boolean value for odometerInput.
         * @return Builder
         */
        public Builder odometerInput(Boolean odometerInput) {
            this.odometerInput = odometerInput;
            return this;
        }

        /**
         * Setter for pAN.
         * @param  pAN  String value for pAN.
         * @return Builder
         */
        public Builder pAN(String pAN) {
            this.pAN = OptionalNullable.of(pAN);
            return this;
        }

        /**
         * UnSetter for pAN.
         * @return Builder
         */
        public Builder unsetPAN() {
            pAN = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryCode.
         * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
         * @return Builder
         */
        public Builder purchaseCategoryCode(String purchaseCategoryCode) {
            this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryCode.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryCode() {
            purchaseCategoryCode = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryId.
         * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
         * @return Builder
         */
        public Builder purchaseCategoryId(Integer purchaseCategoryId) {
            this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryId.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryId() {
            purchaseCategoryId = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryName.
         * @param  purchaseCategoryName  String value for purchaseCategoryName.
         * @return Builder
         */
        public Builder purchaseCategoryName(String purchaseCategoryName) {
            this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryName.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryName() {
            purchaseCategoryName = null;
            return this;
        }

        /**
         * Setter for reason.
         * @param  reason  String value for reason.
         * @return Builder
         */
        public Builder reason(String reason) {
            this.reason = OptionalNullable.of(reason);
            return this;
        }

        /**
         * UnSetter for reason.
         * @return Builder
         */
        public Builder unsetReason() {
            reason = null;
            return this;
        }

        /**
         * Setter for reissueSetting.
         * @param  reissueSetting  String value for reissueSetting.
         * @return Builder
         */
        public Builder reissueSetting(String reissueSetting) {
            this.reissueSetting = OptionalNullable.of(reissueSetting);
            return this;
        }

        /**
         * UnSetter for reissueSetting.
         * @return Builder
         */
        public Builder unsetReissueSetting() {
            reissueSetting = null;
            return this;
        }

        /**
         * Setter for statusDescription.
         * @param  statusDescription  String value for statusDescription.
         * @return Builder
         */
        public Builder statusDescription(String statusDescription) {
            this.statusDescription = OptionalNullable.of(statusDescription);
            return this;
        }

        /**
         * UnSetter for statusDescription.
         * @return Builder
         */
        public Builder unsetStatusDescription() {
            statusDescription = null;
            return this;
        }

        /**
         * Setter for statusId.
         * @param  statusId  Integer value for statusId.
         * @return Builder
         */
        public Builder statusId(Integer statusId) {
            this.statusId = OptionalNullable.of(statusId);
            return this;
        }

        /**
         * UnSetter for statusId.
         * @return Builder
         */
        public Builder unsetStatusId() {
            statusId = null;
            return this;
        }

        /**
         * Setter for tokenTypeID.
         * @param  tokenTypeID  Integer value for tokenTypeID.
         * @return Builder
         */
        public Builder tokenTypeID(Integer tokenTypeID) {
            this.tokenTypeID = OptionalNullable.of(tokenTypeID);
            return this;
        }

        /**
         * UnSetter for tokenTypeID.
         * @return Builder
         */
        public Builder unsetTokenTypeID() {
            tokenTypeID = null;
            return this;
        }

        /**
         * Setter for tokenTypeName.
         * @param  tokenTypeName  String value for tokenTypeName.
         * @return Builder
         */
        public Builder tokenTypeName(String tokenTypeName) {
            this.tokenTypeName = tokenTypeName;
            return this;
        }

        /**
         * Setter for vRN.
         * @param  vRN  String value for vRN.
         * @return Builder
         */
        public Builder vRN(String vRN) {
            this.vRN = OptionalNullable.of(vRN);
            return this;
        }

        /**
         * UnSetter for vRN.
         * @return Builder
         */
        public Builder unsetVRN() {
            vRN = null;
            return this;
        }

        /**
         * Setter for clientReferenceId.
         * @param  clientReferenceId  String value for clientReferenceId.
         * @return Builder
         */
        public Builder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = OptionalNullable.of(clientReferenceId);
            return this;
        }

        /**
         * UnSetter for clientReferenceId.
         * @return Builder
         */
        public Builder unsetClientReferenceId() {
            clientReferenceId = null;
            return this;
        }

        /**
         * Setter for isEMVContact.
         * @param  isEMVContact  Boolean value for isEMVContact.
         * @return Builder
         */
        public Builder isEMVContact(Boolean isEMVContact) {
            this.isEMVContact = isEMVContact;
            return this;
        }

        /**
         * Setter for isEMVContactless.
         * @param  isEMVContactless  Boolean value for isEMVContactless.
         * @return Builder
         */
        public Builder isEMVContactless(Boolean isEMVContactless) {
            this.isEMVContactless = isEMVContactless;
            return this;
        }

        /**
         * Setter for isRFID.
         * @param  isRFID  Boolean value for isRFID.
         * @return Builder
         */
        public Builder isRFID(Boolean isRFID) {
            this.isRFID = isRFID;
            return this;
        }

        /**
         * Setter for rFIDUID.
         * @param  rFIDUID  String value for rFIDUID.
         * @return Builder
         */
        public Builder rFIDUID(String rFIDUID) {
            this.rFIDUID = OptionalNullable.of(rFIDUID);
            return this;
        }

        /**
         * UnSetter for rFIDUID.
         * @return Builder
         */
        public Builder unsetRFIDUID() {
            rFIDUID = null;
            return this;
        }

        /**
         * Setter for eMAID.
         * @param  eMAID  String value for eMAID.
         * @return Builder
         */
        public Builder eMAID(String eMAID) {
            this.eMAID = OptionalNullable.of(eMAID);
            return this;
        }

        /**
         * UnSetter for eMAID.
         * @return Builder
         */
        public Builder unsetEMAID() {
            eMAID = null;
            return this;
        }

        /**
         * Setter for eVPrintedNumber.
         * @param  eVPrintedNumber  String value for eVPrintedNumber.
         * @return Builder
         */
        public Builder eVPrintedNumber(String eVPrintedNumber) {
            this.eVPrintedNumber = OptionalNullable.of(eVPrintedNumber);
            return this;
        }

        /**
         * UnSetter for eVPrintedNumber.
         * @return Builder
         */
        public Builder unsetEVPrintedNumber() {
            eVPrintedNumber = null;
            return this;
        }

        /**
         * Setter for cardMediaCode.
         * @param  cardMediaCode  String value for cardMediaCode.
         * @return Builder
         */
        public Builder cardMediaCode(String cardMediaCode) {
            this.cardMediaCode = OptionalNullable.of(cardMediaCode);
            return this;
        }

        /**
         * UnSetter for cardMediaCode.
         * @return Builder
         */
        public Builder unsetCardMediaCode() {
            cardMediaCode = null;
            return this;
        }

        /**
         * Builds a new {@link Card} object using the set fields.
         * @return {@link Card}
         */
        public Card build() {
            return new Card(accountId, accountName, accountNumber, accountShortName, bundleId,
                    cardBlockSchedules, cardGroupId, cardGroupName, cardId, cardTypeCode,
                    cardTypeId, cardTypeName, colCoCountryCode, creationDate, driverName,
                    effectiveDate, expiryDate, fleetIdInput, isCRT, isFleet, isInternational,
                    isNational, isPartnerSitesIncluded, isShellSitesOnly, issueDate, isSuperseded,
                    isVirtualCard, lastModifiedDate, lastUsedDate, localCurrencyCode,
                    localCurrencySymbol, odometerInput, pAN, purchaseCategoryCode,
                    purchaseCategoryId, purchaseCategoryName, reason, reissueSetting,
                    statusDescription, statusId, tokenTypeID, tokenTypeName, vRN, clientReferenceId,
                    isEMVContact, isEMVContactless, isRFID, rFIDUID, eMAID, eVPrintedNumber,
                    cardMediaCode);
        }
    }
}
