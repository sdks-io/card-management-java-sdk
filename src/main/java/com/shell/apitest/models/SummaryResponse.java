/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for SummaryResponse type.
 */
public class SummaryResponse {
    private OptionalNullable<Integer> activeCards;
    private OptionalNullable<Integer> blockedCards;
    private OptionalNullable<Integer> cancelledCards;
    private OptionalNullable<Integer> expiredCards;
    private OptionalNullable<Integer> expiringCards;
    private OptionalNullable<Integer> fraudCards;
    private OptionalNullable<Integer> newCards;
    private OptionalNullable<Integer> renewalPendingCards;
    private OptionalNullable<Integer> replacedCards;
    private OptionalNullable<Integer> temporaryBlockByCustomer;
    private OptionalNullable<Integer> temporaryBlockByShell;
    private OptionalNullable<Integer> totalCards;

    /**
     * Default constructor.
     */
    public SummaryResponse() {
    }

    /**
     * Initialization constructor.
     * @param  activeCards  Integer value for activeCards.
     * @param  blockedCards  Integer value for blockedCards.
     * @param  cancelledCards  Integer value for cancelledCards.
     * @param  expiredCards  Integer value for expiredCards.
     * @param  expiringCards  Integer value for expiringCards.
     * @param  fraudCards  Integer value for fraudCards.
     * @param  newCards  Integer value for newCards.
     * @param  renewalPendingCards  Integer value for renewalPendingCards.
     * @param  replacedCards  Integer value for replacedCards.
     * @param  temporaryBlockByCustomer  Integer value for temporaryBlockByCustomer.
     * @param  temporaryBlockByShell  Integer value for temporaryBlockByShell.
     * @param  totalCards  Integer value for totalCards.
     */
    public SummaryResponse(
            Integer activeCards,
            Integer blockedCards,
            Integer cancelledCards,
            Integer expiredCards,
            Integer expiringCards,
            Integer fraudCards,
            Integer newCards,
            Integer renewalPendingCards,
            Integer replacedCards,
            Integer temporaryBlockByCustomer,
            Integer temporaryBlockByShell,
            Integer totalCards) {
        this.activeCards = OptionalNullable.of(activeCards);
        this.blockedCards = OptionalNullable.of(blockedCards);
        this.cancelledCards = OptionalNullable.of(cancelledCards);
        this.expiredCards = OptionalNullable.of(expiredCards);
        this.expiringCards = OptionalNullable.of(expiringCards);
        this.fraudCards = OptionalNullable.of(fraudCards);
        this.newCards = OptionalNullable.of(newCards);
        this.renewalPendingCards = OptionalNullable.of(renewalPendingCards);
        this.replacedCards = OptionalNullable.of(replacedCards);
        this.temporaryBlockByCustomer = OptionalNullable.of(temporaryBlockByCustomer);
        this.temporaryBlockByShell = OptionalNullable.of(temporaryBlockByShell);
        this.totalCards = OptionalNullable.of(totalCards);
    }

    /**
     * Initialization constructor.
     * @param  activeCards  Integer value for activeCards.
     * @param  blockedCards  Integer value for blockedCards.
     * @param  cancelledCards  Integer value for cancelledCards.
     * @param  expiredCards  Integer value for expiredCards.
     * @param  expiringCards  Integer value for expiringCards.
     * @param  fraudCards  Integer value for fraudCards.
     * @param  newCards  Integer value for newCards.
     * @param  renewalPendingCards  Integer value for renewalPendingCards.
     * @param  replacedCards  Integer value for replacedCards.
     * @param  temporaryBlockByCustomer  Integer value for temporaryBlockByCustomer.
     * @param  temporaryBlockByShell  Integer value for temporaryBlockByShell.
     * @param  totalCards  Integer value for totalCards.
     */

    protected SummaryResponse(OptionalNullable<Integer> activeCards,
            OptionalNullable<Integer> blockedCards, OptionalNullable<Integer> cancelledCards,
            OptionalNullable<Integer> expiredCards, OptionalNullable<Integer> expiringCards,
            OptionalNullable<Integer> fraudCards, OptionalNullable<Integer> newCards,
            OptionalNullable<Integer> renewalPendingCards, OptionalNullable<Integer> replacedCards,
            OptionalNullable<Integer> temporaryBlockByCustomer,
            OptionalNullable<Integer> temporaryBlockByShell,
            OptionalNullable<Integer> totalCards) {
        this.activeCards = activeCards;
        this.blockedCards = blockedCards;
        this.cancelledCards = cancelledCards;
        this.expiredCards = expiredCards;
        this.expiringCards = expiringCards;
        this.fraudCards = fraudCards;
        this.newCards = newCards;
        this.renewalPendingCards = renewalPendingCards;
        this.replacedCards = replacedCards;
        this.temporaryBlockByCustomer = temporaryBlockByCustomer;
        this.temporaryBlockByShell = temporaryBlockByShell;
        this.totalCards = totalCards;
    }

    /**
     * Internal Getter for ActiveCards.
     * Total number of active cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("ActiveCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetActiveCards() {
        return this.activeCards;
    }

    /**
     * Getter for ActiveCards.
     * Total number of active cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getActiveCards() {
        return OptionalNullable.getFrom(activeCards);
    }

    /**
     * Setter for ActiveCards.
     * Total number of active cards for the given search criteria
     * @param activeCards Value for Integer
     */
    @JsonSetter("ActiveCards")
    public void setActiveCards(Integer activeCards) {
        this.activeCards = OptionalNullable.of(activeCards);
    }

    /**
     * UnSetter for ActiveCards.
     * Total number of active cards for the given search criteria
     */
    public void unsetActiveCards() {
        activeCards = null;
    }

    /**
     * Internal Getter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked (Blocked)
     * @return Returns the Internal Integer
     */
    @JsonGetter("BlockedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBlockedCards() {
        return this.blockedCards;
    }

    /**
     * Getter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked (Blocked)
     * @return Returns the Integer
     */
    public Integer getBlockedCards() {
        return OptionalNullable.getFrom(blockedCards);
    }

    /**
     * Setter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked (Blocked)
     * @param blockedCards Value for Integer
     */
    @JsonSetter("BlockedCards")
    public void setBlockedCards(Integer blockedCards) {
        this.blockedCards = OptionalNullable.of(blockedCards);
    }

    /**
     * UnSetter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked (Blocked)
     */
    public void unsetBlockedCards() {
        blockedCards = null;
    }

    /**
     * Internal Getter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled (at cancelled status)
     * blocked by customer
     * @return Returns the Internal Integer
     */
    @JsonGetter("CancelledCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCancelledCards() {
        return this.cancelledCards;
    }

    /**
     * Getter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled (at cancelled status)
     * blocked by customer
     * @return Returns the Integer
     */
    public Integer getCancelledCards() {
        return OptionalNullable.getFrom(cancelledCards);
    }

    /**
     * Setter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled (at cancelled status)
     * blocked by customer
     * @param cancelledCards Value for Integer
     */
    @JsonSetter("CancelledCards")
    public void setCancelledCards(Integer cancelledCards) {
        this.cancelledCards = OptionalNullable.of(cancelledCards);
    }

    /**
     * UnSetter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled (at cancelled status)
     * blocked by customer
     */
    public void unsetCancelledCards() {
        cancelledCards = null;
    }

    /**
     * Internal Getter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("ExpiredCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetExpiredCards() {
        return this.expiredCards;
    }

    /**
     * Getter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getExpiredCards() {
        return OptionalNullable.getFrom(expiredCards);
    }

    /**
     * Setter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     * @param expiredCards Value for Integer
     */
    @JsonSetter("ExpiredCards")
    public void setExpiredCards(Integer expiredCards) {
        this.expiredCards = OptionalNullable.of(expiredCards);
    }

    /**
     * UnSetter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     */
    public void unsetExpiredCards() {
        expiredCards = null;
    }

    /**
     * Internal Getter for ExpiringCards.
     * Cards that are active and expiring in X days, X should be configurable
     * @return Returns the Internal Integer
     */
    @JsonGetter("ExpiringCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetExpiringCards() {
        return this.expiringCards;
    }

    /**
     * Getter for ExpiringCards.
     * Cards that are active and expiring in X days, X should be configurable
     * @return Returns the Integer
     */
    public Integer getExpiringCards() {
        return OptionalNullable.getFrom(expiringCards);
    }

    /**
     * Setter for ExpiringCards.
     * Cards that are active and expiring in X days, X should be configurable
     * @param expiringCards Value for Integer
     */
    @JsonSetter("ExpiringCards")
    public void setExpiringCards(Integer expiringCards) {
        this.expiringCards = OptionalNullable.of(expiringCards);
    }

    /**
     * UnSetter for ExpiringCards.
     * Cards that are active and expiring in X days, X should be configurable
     */
    public void unsetExpiringCards() {
        expiringCards = null;
    }

    /**
     * Internal Getter for FraudCards.
     * Totalnumber of Cards in Fraud status for the given search criteria.
     * @return Returns the Internal Integer
     */
    @JsonGetter("FraudCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFraudCards() {
        return this.fraudCards;
    }

    /**
     * Getter for FraudCards.
     * Totalnumber of Cards in Fraud status for the given search criteria.
     * @return Returns the Integer
     */
    public Integer getFraudCards() {
        return OptionalNullable.getFrom(fraudCards);
    }

    /**
     * Setter for FraudCards.
     * Totalnumber of Cards in Fraud status for the given search criteria.
     * @param fraudCards Value for Integer
     */
    @JsonSetter("FraudCards")
    public void setFraudCards(Integer fraudCards) {
        this.fraudCards = OptionalNullable.of(fraudCards);
    }

    /**
     * UnSetter for FraudCards.
     * Totalnumber of Cards in Fraud status for the given search criteria.
     */
    public void unsetFraudCards() {
        fraudCards = null;
    }

    /**
     * Internal Getter for NewCards.
     * Total number of cards in New status for the given search criteria.
     * @return Returns the Internal Integer
     */
    @JsonGetter("NewCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetNewCards() {
        return this.newCards;
    }

    /**
     * Getter for NewCards.
     * Total number of cards in New status for the given search criteria.
     * @return Returns the Integer
     */
    public Integer getNewCards() {
        return OptionalNullable.getFrom(newCards);
    }

    /**
     * Setter for NewCards.
     * Total number of cards in New status for the given search criteria.
     * @param newCards Value for Integer
     */
    @JsonSetter("NewCards")
    public void setNewCards(Integer newCards) {
        this.newCards = OptionalNullable.of(newCards);
    }

    /**
     * UnSetter for NewCards.
     * Total number of cards in New status for the given search criteria.
     */
    public void unsetNewCards() {
        newCards = null;
    }

    /**
     * Internal Getter for RenewalPendingCards.
     * Total number of Renewal Pending cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("RenewalPendingCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetRenewalPendingCards() {
        return this.renewalPendingCards;
    }

    /**
     * Getter for RenewalPendingCards.
     * Total number of Renewal Pending cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getRenewalPendingCards() {
        return OptionalNullable.getFrom(renewalPendingCards);
    }

    /**
     * Setter for RenewalPendingCards.
     * Total number of Renewal Pending cards for the given search criteria
     * @param renewalPendingCards Value for Integer
     */
    @JsonSetter("RenewalPendingCards")
    public void setRenewalPendingCards(Integer renewalPendingCards) {
        this.renewalPendingCards = OptionalNullable.of(renewalPendingCards);
    }

    /**
     * UnSetter for RenewalPendingCards.
     * Total number of Renewal Pending cards for the given search criteria
     */
    public void unsetRenewalPendingCards() {
        renewalPendingCards = null;
    }

    /**
     * Internal Getter for ReplacedCards.
     * Cards with status Replaced
     * @return Returns the Internal Integer
     */
    @JsonGetter("ReplacedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetReplacedCards() {
        return this.replacedCards;
    }

    /**
     * Getter for ReplacedCards.
     * Cards with status Replaced
     * @return Returns the Integer
     */
    public Integer getReplacedCards() {
        return OptionalNullable.getFrom(replacedCards);
    }

    /**
     * Setter for ReplacedCards.
     * Cards with status Replaced
     * @param replacedCards Value for Integer
     */
    @JsonSetter("ReplacedCards")
    public void setReplacedCards(Integer replacedCards) {
        this.replacedCards = OptionalNullable.of(replacedCards);
    }

    /**
     * UnSetter for ReplacedCards.
     * Cards with status Replaced
     */
    public void unsetReplacedCards() {
        replacedCards = null;
    }

    /**
     * Internal Getter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     * @return Returns the Internal Integer
     */
    @JsonGetter("TemporaryBlockByCustomer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTemporaryBlockByCustomer() {
        return this.temporaryBlockByCustomer;
    }

    /**
     * Getter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     * @return Returns the Integer
     */
    public Integer getTemporaryBlockByCustomer() {
        return OptionalNullable.getFrom(temporaryBlockByCustomer);
    }

    /**
     * Setter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     * @param temporaryBlockByCustomer Value for Integer
     */
    @JsonSetter("TemporaryBlockByCustomer")
    public void setTemporaryBlockByCustomer(Integer temporaryBlockByCustomer) {
        this.temporaryBlockByCustomer = OptionalNullable.of(temporaryBlockByCustomer);
    }

    /**
     * UnSetter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     */
    public void unsetTemporaryBlockByCustomer() {
        temporaryBlockByCustomer = null;
    }

    /**
     * Internal Getter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     * @return Returns the Internal Integer
     */
    @JsonGetter("TemporaryBlockByShell")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTemporaryBlockByShell() {
        return this.temporaryBlockByShell;
    }

    /**
     * Getter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     * @return Returns the Integer
     */
    public Integer getTemporaryBlockByShell() {
        return OptionalNullable.getFrom(temporaryBlockByShell);
    }

    /**
     * Setter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     * @param temporaryBlockByShell Value for Integer
     */
    @JsonSetter("TemporaryBlockByShell")
    public void setTemporaryBlockByShell(Integer temporaryBlockByShell) {
        this.temporaryBlockByShell = OptionalNullable.of(temporaryBlockByShell);
    }

    /**
     * UnSetter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     */
    public void unsetTemporaryBlockByShell() {
        temporaryBlockByShell = null;
    }

    /**
     * Internal Getter for TotalCards.
     * Total number of cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCards() {
        return this.totalCards;
    }

    /**
     * Getter for TotalCards.
     * Total number of cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getTotalCards() {
        return OptionalNullable.getFrom(totalCards);
    }

    /**
     * Setter for TotalCards.
     * Total number of cards for the given search criteria
     * @param totalCards Value for Integer
     */
    @JsonSetter("TotalCards")
    public void setTotalCards(Integer totalCards) {
        this.totalCards = OptionalNullable.of(totalCards);
    }

    /**
     * UnSetter for TotalCards.
     * Total number of cards for the given search criteria
     */
    public void unsetTotalCards() {
        totalCards = null;
    }

    /**
     * Converts this SummaryResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SummaryResponse [" + "activeCards=" + activeCards + ", blockedCards=" + blockedCards
                + ", cancelledCards=" + cancelledCards + ", expiredCards=" + expiredCards
                + ", expiringCards=" + expiringCards + ", fraudCards=" + fraudCards + ", newCards="
                + newCards + ", renewalPendingCards=" + renewalPendingCards + ", replacedCards="
                + replacedCards + ", temporaryBlockByCustomer=" + temporaryBlockByCustomer
                + ", temporaryBlockByShell=" + temporaryBlockByShell + ", totalCards=" + totalCards
                + "]";
    }

    /**
     * Builds a new {@link SummaryResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SummaryResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.activeCards = internalGetActiveCards();
        builder.blockedCards = internalGetBlockedCards();
        builder.cancelledCards = internalGetCancelledCards();
        builder.expiredCards = internalGetExpiredCards();
        builder.expiringCards = internalGetExpiringCards();
        builder.fraudCards = internalGetFraudCards();
        builder.newCards = internalGetNewCards();
        builder.renewalPendingCards = internalGetRenewalPendingCards();
        builder.replacedCards = internalGetReplacedCards();
        builder.temporaryBlockByCustomer = internalGetTemporaryBlockByCustomer();
        builder.temporaryBlockByShell = internalGetTemporaryBlockByShell();
        builder.totalCards = internalGetTotalCards();
        return builder;
    }

    /**
     * Class to build instances of {@link SummaryResponse}.
     */
    public static class Builder {
        private OptionalNullable<Integer> activeCards;
        private OptionalNullable<Integer> blockedCards;
        private OptionalNullable<Integer> cancelledCards;
        private OptionalNullable<Integer> expiredCards;
        private OptionalNullable<Integer> expiringCards;
        private OptionalNullable<Integer> fraudCards;
        private OptionalNullable<Integer> newCards;
        private OptionalNullable<Integer> renewalPendingCards;
        private OptionalNullable<Integer> replacedCards;
        private OptionalNullable<Integer> temporaryBlockByCustomer;
        private OptionalNullable<Integer> temporaryBlockByShell;
        private OptionalNullable<Integer> totalCards;



        /**
         * Setter for activeCards.
         * @param  activeCards  Integer value for activeCards.
         * @return Builder
         */
        public Builder activeCards(Integer activeCards) {
            this.activeCards = OptionalNullable.of(activeCards);
            return this;
        }

        /**
         * UnSetter for activeCards.
         * @return Builder
         */
        public Builder unsetActiveCards() {
            activeCards = null;
            return this;
        }

        /**
         * Setter for blockedCards.
         * @param  blockedCards  Integer value for blockedCards.
         * @return Builder
         */
        public Builder blockedCards(Integer blockedCards) {
            this.blockedCards = OptionalNullable.of(blockedCards);
            return this;
        }

        /**
         * UnSetter for blockedCards.
         * @return Builder
         */
        public Builder unsetBlockedCards() {
            blockedCards = null;
            return this;
        }

        /**
         * Setter for cancelledCards.
         * @param  cancelledCards  Integer value for cancelledCards.
         * @return Builder
         */
        public Builder cancelledCards(Integer cancelledCards) {
            this.cancelledCards = OptionalNullable.of(cancelledCards);
            return this;
        }

        /**
         * UnSetter for cancelledCards.
         * @return Builder
         */
        public Builder unsetCancelledCards() {
            cancelledCards = null;
            return this;
        }

        /**
         * Setter for expiredCards.
         * @param  expiredCards  Integer value for expiredCards.
         * @return Builder
         */
        public Builder expiredCards(Integer expiredCards) {
            this.expiredCards = OptionalNullable.of(expiredCards);
            return this;
        }

        /**
         * UnSetter for expiredCards.
         * @return Builder
         */
        public Builder unsetExpiredCards() {
            expiredCards = null;
            return this;
        }

        /**
         * Setter for expiringCards.
         * @param  expiringCards  Integer value for expiringCards.
         * @return Builder
         */
        public Builder expiringCards(Integer expiringCards) {
            this.expiringCards = OptionalNullable.of(expiringCards);
            return this;
        }

        /**
         * UnSetter for expiringCards.
         * @return Builder
         */
        public Builder unsetExpiringCards() {
            expiringCards = null;
            return this;
        }

        /**
         * Setter for fraudCards.
         * @param  fraudCards  Integer value for fraudCards.
         * @return Builder
         */
        public Builder fraudCards(Integer fraudCards) {
            this.fraudCards = OptionalNullable.of(fraudCards);
            return this;
        }

        /**
         * UnSetter for fraudCards.
         * @return Builder
         */
        public Builder unsetFraudCards() {
            fraudCards = null;
            return this;
        }

        /**
         * Setter for newCards.
         * @param  newCards  Integer value for newCards.
         * @return Builder
         */
        public Builder newCards(Integer newCards) {
            this.newCards = OptionalNullable.of(newCards);
            return this;
        }

        /**
         * UnSetter for newCards.
         * @return Builder
         */
        public Builder unsetNewCards() {
            newCards = null;
            return this;
        }

        /**
         * Setter for renewalPendingCards.
         * @param  renewalPendingCards  Integer value for renewalPendingCards.
         * @return Builder
         */
        public Builder renewalPendingCards(Integer renewalPendingCards) {
            this.renewalPendingCards = OptionalNullable.of(renewalPendingCards);
            return this;
        }

        /**
         * UnSetter for renewalPendingCards.
         * @return Builder
         */
        public Builder unsetRenewalPendingCards() {
            renewalPendingCards = null;
            return this;
        }

        /**
         * Setter for replacedCards.
         * @param  replacedCards  Integer value for replacedCards.
         * @return Builder
         */
        public Builder replacedCards(Integer replacedCards) {
            this.replacedCards = OptionalNullable.of(replacedCards);
            return this;
        }

        /**
         * UnSetter for replacedCards.
         * @return Builder
         */
        public Builder unsetReplacedCards() {
            replacedCards = null;
            return this;
        }

        /**
         * Setter for temporaryBlockByCustomer.
         * @param  temporaryBlockByCustomer  Integer value for temporaryBlockByCustomer.
         * @return Builder
         */
        public Builder temporaryBlockByCustomer(Integer temporaryBlockByCustomer) {
            this.temporaryBlockByCustomer = OptionalNullable.of(temporaryBlockByCustomer);
            return this;
        }

        /**
         * UnSetter for temporaryBlockByCustomer.
         * @return Builder
         */
        public Builder unsetTemporaryBlockByCustomer() {
            temporaryBlockByCustomer = null;
            return this;
        }

        /**
         * Setter for temporaryBlockByShell.
         * @param  temporaryBlockByShell  Integer value for temporaryBlockByShell.
         * @return Builder
         */
        public Builder temporaryBlockByShell(Integer temporaryBlockByShell) {
            this.temporaryBlockByShell = OptionalNullable.of(temporaryBlockByShell);
            return this;
        }

        /**
         * UnSetter for temporaryBlockByShell.
         * @return Builder
         */
        public Builder unsetTemporaryBlockByShell() {
            temporaryBlockByShell = null;
            return this;
        }

        /**
         * Setter for totalCards.
         * @param  totalCards  Integer value for totalCards.
         * @return Builder
         */
        public Builder totalCards(Integer totalCards) {
            this.totalCards = OptionalNullable.of(totalCards);
            return this;
        }

        /**
         * UnSetter for totalCards.
         * @return Builder
         */
        public Builder unsetTotalCards() {
            totalCards = null;
            return this;
        }

        /**
         * Builds a new {@link SummaryResponse} object using the set fields.
         * @return {@link SummaryResponse}
         */
        public SummaryResponse build() {
            return new SummaryResponse(activeCards, blockedCards, cancelledCards, expiredCards,
                    expiringCards, fraudCards, newCards, renewalPendingCards, replacedCards,
                    temporaryBlockByCustomer, temporaryBlockByShell, totalCards);
        }
    }
}
