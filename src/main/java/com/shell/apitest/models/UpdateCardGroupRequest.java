/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for UpdateCardGroupRequest type.
 */
public class UpdateCardGroupRequest {
    private Integer colCoCode;
    private Integer colCoId;
    private String payerNumber;
    private Integer payerId;
    private Integer accountId;
    private String accountNumber;
    private Integer cardGroupId;
    private String cardGroupName;
    private Boolean printOnCard;
    private Integer cardTypeId;
    private Boolean terminateCardGroup;
    private Boolean moveCards;
    private Integer targetAccountId;
    private String targetAccountNumber;
    private String targetNewCardGroupName;
    private Integer targetCardGroupId;

    /**
     * Default constructor.
     */
    public UpdateCardGroupRequest() {
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerId  Integer value for payerId.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  printOnCard  Boolean value for printOnCard.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  terminateCardGroup  Boolean value for terminateCardGroup.
     * @param  moveCards  Boolean value for moveCards.
     * @param  targetAccountId  Integer value for targetAccountId.
     * @param  targetAccountNumber  String value for targetAccountNumber.
     * @param  targetNewCardGroupName  String value for targetNewCardGroupName.
     * @param  targetCardGroupId  Integer value for targetCardGroupId.
     */
    public UpdateCardGroupRequest(
            Integer colCoCode,
            Integer colCoId,
            String payerNumber,
            Integer payerId,
            Integer accountId,
            String accountNumber,
            Integer cardGroupId,
            String cardGroupName,
            Boolean printOnCard,
            Integer cardTypeId,
            Boolean terminateCardGroup,
            Boolean moveCards,
            Integer targetAccountId,
            String targetAccountNumber,
            String targetNewCardGroupName,
            Integer targetCardGroupId) {
        this.colCoCode = colCoCode;
        this.colCoId = colCoId;
        this.payerNumber = payerNumber;
        this.payerId = payerId;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.printOnCard = printOnCard;
        this.cardTypeId = cardTypeId;
        this.terminateCardGroup = terminateCardGroup;
        this.moveCards = moveCards;
        this.targetAccountId = targetAccountId;
        this.targetAccountNumber = targetAccountNumber;
        this.targetNewCardGroupName = targetNewCardGroupName;
        this.targetCardGroupId = targetCardGroupId;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided. Example: 86-Philippines 5-UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided. Example: 86-Philippines 5-UK
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1-Philippines 5-UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoId() {
        return colCoId;
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1-Philippines 5-UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = colCoId;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @return Returns the String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPayerNumber() {
        return payerNumber;
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = payerNumber;
    }

    /**
     * Getter for PayerId.
     * Payer Id (i.e., Customer Id of the Payment Customer) of the selected payer. Optional if
     * PayerNumber is passed else Mandatory Example: 123456
     * @return Returns the Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPayerId() {
        return payerId;
    }

    /**
     * Setter for PayerId.
     * Payer Id (i.e., Customer Id of the Payment Customer) of the selected payer. Optional if
     * PayerNumber is passed else Mandatory Example: 123456
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = payerId;
    }

    /**
     * Getter for AccountId.
     * Account ID of the card-group to be updated/terminated.
     * @return Returns the Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAccountId() {
        return accountId;
    }

    /**
     * Setter for AccountId.
     * Account ID of the card-group to be updated/terminated.
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the card-group to be updated/terminated.
     * @return Returns the String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the card-group to be updated/terminated.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Getter for CardGroupId.
     * Unique Id of the card group that needs to be updated or terminated.
     * @return Returns the Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCardGroupId() {
        return cardGroupId;
    }

    /**
     * Setter for CardGroupId.
     * Unique Id of the card group that needs to be updated or terminated.
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = cardGroupId;
    }

    /**
     * Getter for CardGroupName.
     * New name for the card group if it needs to be updated. Set this field to ‘null’ if no change
     * required to the current card group name. Optional Minimum length: 1 (Configurable) Maximum
     * length: 40 (Configurable) Allowed characters (Configurable) are: - A-Z 0-9, / ‘. &amp; Ä Ö Ü Å Æ
     * É Ø Note: The card group name has to be unique for customer. Else an error with error code
     * 9015 is returned.
     * @return Returns the String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCardGroupName() {
        return cardGroupName;
    }

    /**
     * Setter for CardGroupName.
     * New name for the card group if it needs to be updated. Set this field to ‘null’ if no change
     * required to the current card group name. Optional Minimum length: 1 (Configurable) Maximum
     * length: 40 (Configurable) Allowed characters (Configurable) are: - A-Z 0-9, / ‘. &amp; Ä Ö Ü Å Æ
     * É Ø Note: The card group name has to be unique for customer. Else an error with error code
     * 9015 is returned.
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = cardGroupName;
    }

    /**
     * Getter for PrintOnCard.
     * Whether to emboss the card group name on the cards. Populate this field only if the value
     * needs to be updated. Otherwise set to ‘null’.
     * @return Returns the Boolean
     */
    @JsonGetter("PrintOnCard")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPrintOnCard() {
        return printOnCard;
    }

    /**
     * Setter for PrintOnCard.
     * Whether to emboss the card group name on the cards. Populate this field only if the value
     * needs to be updated. Otherwise set to ‘null’.
     * @param printOnCard Value for Boolean
     */
    @JsonSetter("PrintOnCard")
    public void setPrintOnCard(Boolean printOnCard) {
        this.printOnCard = printOnCard;
    }

    /**
     * Getter for CardTypeId.
     * Card Type ID of the card group. Populate this field if the value needs to be updated.
     * Otherwise set to ‘null’. Optional Note: 1) If a card type is passed, the cardgorup will allow
     * cards with same card type to be moved in to the card group. 2) Pass ‘-1’ to remove the card
     * type from the card group.
     * @return Returns the Integer
     */
    @JsonGetter("CardTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCardTypeId() {
        return cardTypeId;
    }

    /**
     * Setter for CardTypeId.
     * Card Type ID of the card group. Populate this field if the value needs to be updated.
     * Otherwise set to ‘null’. Optional Note: 1) If a card type is passed, the cardgorup will allow
     * cards with same card type to be moved in to the card group. 2) Pass ‘-1’ to remove the card
     * type from the card group.
     * @param cardTypeId Value for Integer
     */
    @JsonSetter("CardTypeId")
    public void setCardTypeId(Integer cardTypeId) {
        this.cardTypeId = cardTypeId;
    }

    /**
     * Getter for TerminateCardGroup.
     * Whether to terminate the card group. When set to true, the card group will be terminated by
     * setting current date as it’s termination date. Optional, False by default .
     * @return Returns the Boolean
     */
    @JsonGetter("TerminateCardGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTerminateCardGroup() {
        return terminateCardGroup;
    }

    /**
     * Setter for TerminateCardGroup.
     * Whether to terminate the card group. When set to true, the card group will be terminated by
     * setting current date as it’s termination date. Optional, False by default .
     * @param terminateCardGroup Value for Boolean
     */
    @JsonSetter("TerminateCardGroup")
    public void setTerminateCardGroup(Boolean terminateCardGroup) {
        this.terminateCardGroup = terminateCardGroup;
    }

    /**
     * Getter for MoveCards.
     * Whether to move the cards from this CardGroup in to a different or a new CardGroup. Optional
     * When the value is set to ‘False’ or ‘null’, the cards that are currently in the card-group
     * will remain under the same card-group.
     * @return Returns the Boolean
     */
    @JsonGetter("MoveCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getMoveCards() {
        return moveCards;
    }

    /**
     * Setter for MoveCards.
     * Whether to move the cards from this CardGroup in to a different or a new CardGroup. Optional
     * When the value is set to ‘False’ or ‘null’, the cards that are currently in the card-group
     * will remain under the same card-group.
     * @param moveCards Value for Boolean
     */
    @JsonSetter("MoveCards")
    public void setMoveCards(Boolean moveCards) {
        this.moveCards = moveCards;
    }

    /**
     * Getter for TargetAccountId.
     * Account ID of the new/target card-group. Either TargetAccountId or TargetAccountNumber is
     * mandatory when MoveCards is set to True.
     * @return Returns the Integer
     */
    @JsonGetter("TargetAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTargetAccountId() {
        return targetAccountId;
    }

    /**
     * Setter for TargetAccountId.
     * Account ID of the new/target card-group. Either TargetAccountId or TargetAccountNumber is
     * mandatory when MoveCards is set to True.
     * @param targetAccountId Value for Integer
     */
    @JsonSetter("TargetAccountId")
    public void setTargetAccountId(Integer targetAccountId) {
        this.targetAccountId = targetAccountId;
    }

    /**
     * Getter for TargetAccountNumber.
     * Account Number of the new/target card-group. Either TargetAccountId or TargetAccountNumber is
     * mandatory when MoveCards is set to True.
     * @return Returns the String
     */
    @JsonGetter("TargetAccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTargetAccountNumber() {
        return targetAccountNumber;
    }

    /**
     * Setter for TargetAccountNumber.
     * Account Number of the new/target card-group. Either TargetAccountId or TargetAccountNumber is
     * mandatory when MoveCards is set to True.
     * @param targetAccountNumber Value for String
     */
    @JsonSetter("TargetAccountNumber")
    public void setTargetAccountNumber(String targetAccountNumber) {
        this.targetAccountNumber = targetAccountNumber;
    }

    /**
     * Getter for TargetNewCardGroupName.
     * Name of the new card group if the cards in the existing card-group have to be moved to a new
     * card-group. Mandatory when MoveCards parameter is True and TargetCardGroupId is null. Minimum
     * length: 1 (Configurable) Maximum length: 30 (Configurable)
     * @return Returns the String
     */
    @JsonGetter("TargetNewCardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTargetNewCardGroupName() {
        return targetNewCardGroupName;
    }

    /**
     * Setter for TargetNewCardGroupName.
     * Name of the new card group if the cards in the existing card-group have to be moved to a new
     * card-group. Mandatory when MoveCards parameter is True and TargetCardGroupId is null. Minimum
     * length: 1 (Configurable) Maximum length: 30 (Configurable)
     * @param targetNewCardGroupName Value for String
     */
    @JsonSetter("TargetNewCardGroupName")
    public void setTargetNewCardGroupName(String targetNewCardGroupName) {
        this.targetNewCardGroupName = targetNewCardGroupName;
    }

    /**
     * Getter for TargetCardGroupId.
     * ID of the card group if the cards in the existing card-group have to be moved to another
     * existing card-group. Mandatory when MoveCards parameter is True and TargetNewCardGroupName is
     * null. If the value is “-1” then the cards will be moved out of the current CardGroup.
     * @return Returns the Integer
     */
    @JsonGetter("TargetCardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTargetCardGroupId() {
        return targetCardGroupId;
    }

    /**
     * Setter for TargetCardGroupId.
     * ID of the card group if the cards in the existing card-group have to be moved to another
     * existing card-group. Mandatory when MoveCards parameter is True and TargetNewCardGroupName is
     * null. If the value is “-1” then the cards will be moved out of the current CardGroup.
     * @param targetCardGroupId Value for Integer
     */
    @JsonSetter("TargetCardGroupId")
    public void setTargetCardGroupId(Integer targetCardGroupId) {
        this.targetCardGroupId = targetCardGroupId;
    }

    /**
     * Converts this UpdateCardGroupRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UpdateCardGroupRequest [" + "colCoCode=" + colCoCode + ", colCoId=" + colCoId
                + ", payerNumber=" + payerNumber + ", payerId=" + payerId + ", accountId="
                + accountId + ", accountNumber=" + accountNumber + ", cardGroupId=" + cardGroupId
                + ", cardGroupName=" + cardGroupName + ", printOnCard=" + printOnCard
                + ", cardTypeId=" + cardTypeId + ", terminateCardGroup=" + terminateCardGroup
                + ", moveCards=" + moveCards + ", targetAccountId=" + targetAccountId
                + ", targetAccountNumber=" + targetAccountNumber + ", targetNewCardGroupName="
                + targetNewCardGroupName + ", targetCardGroupId=" + targetCardGroupId + "]";
    }

    /**
     * Builds a new {@link UpdateCardGroupRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UpdateCardGroupRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .colCoCode(getColCoCode())
                .colCoId(getColCoId())
                .payerNumber(getPayerNumber())
                .payerId(getPayerId())
                .accountId(getAccountId())
                .accountNumber(getAccountNumber())
                .cardGroupId(getCardGroupId())
                .cardGroupName(getCardGroupName())
                .printOnCard(getPrintOnCard())
                .cardTypeId(getCardTypeId())
                .terminateCardGroup(getTerminateCardGroup())
                .moveCards(getMoveCards())
                .targetAccountId(getTargetAccountId())
                .targetAccountNumber(getTargetAccountNumber())
                .targetNewCardGroupName(getTargetNewCardGroupName())
                .targetCardGroupId(getTargetCardGroupId());
        return builder;
    }

    /**
     * Class to build instances of {@link UpdateCardGroupRequest}.
     */
    public static class Builder {
        private Integer colCoCode;
        private Integer colCoId;
        private String payerNumber;
        private Integer payerId;
        private Integer accountId;
        private String accountNumber;
        private Integer cardGroupId;
        private String cardGroupName;
        private Boolean printOnCard;
        private Integer cardTypeId;
        private Boolean terminateCardGroup;
        private Boolean moveCards;
        private Integer targetAccountId;
        private String targetAccountNumber;
        private String targetNewCardGroupName;
        private Integer targetCardGroupId;



        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = colCoId;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = payerNumber;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = accountId;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = cardGroupId;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = cardGroupName;
            return this;
        }

        /**
         * Setter for printOnCard.
         * @param  printOnCard  Boolean value for printOnCard.
         * @return Builder
         */
        public Builder printOnCard(Boolean printOnCard) {
            this.printOnCard = printOnCard;
            return this;
        }

        /**
         * Setter for cardTypeId.
         * @param  cardTypeId  Integer value for cardTypeId.
         * @return Builder
         */
        public Builder cardTypeId(Integer cardTypeId) {
            this.cardTypeId = cardTypeId;
            return this;
        }

        /**
         * Setter for terminateCardGroup.
         * @param  terminateCardGroup  Boolean value for terminateCardGroup.
         * @return Builder
         */
        public Builder terminateCardGroup(Boolean terminateCardGroup) {
            this.terminateCardGroup = terminateCardGroup;
            return this;
        }

        /**
         * Setter for moveCards.
         * @param  moveCards  Boolean value for moveCards.
         * @return Builder
         */
        public Builder moveCards(Boolean moveCards) {
            this.moveCards = moveCards;
            return this;
        }

        /**
         * Setter for targetAccountId.
         * @param  targetAccountId  Integer value for targetAccountId.
         * @return Builder
         */
        public Builder targetAccountId(Integer targetAccountId) {
            this.targetAccountId = targetAccountId;
            return this;
        }

        /**
         * Setter for targetAccountNumber.
         * @param  targetAccountNumber  String value for targetAccountNumber.
         * @return Builder
         */
        public Builder targetAccountNumber(String targetAccountNumber) {
            this.targetAccountNumber = targetAccountNumber;
            return this;
        }

        /**
         * Setter for targetNewCardGroupName.
         * @param  targetNewCardGroupName  String value for targetNewCardGroupName.
         * @return Builder
         */
        public Builder targetNewCardGroupName(String targetNewCardGroupName) {
            this.targetNewCardGroupName = targetNewCardGroupName;
            return this;
        }

        /**
         * Setter for targetCardGroupId.
         * @param  targetCardGroupId  Integer value for targetCardGroupId.
         * @return Builder
         */
        public Builder targetCardGroupId(Integer targetCardGroupId) {
            this.targetCardGroupId = targetCardGroupId;
            return this;
        }

        /**
         * Builds a new {@link UpdateCardGroupRequest} object using the set fields.
         * @return {@link UpdateCardGroupRequest}
         */
        public UpdateCardGroupRequest build() {
            return new UpdateCardGroupRequest(colCoCode, colCoId, payerNumber, payerId, accountId,
                    accountNumber, cardGroupId, cardGroupName, printOnCard, cardTypeId,
                    terminateCardGroup, moveCards, targetAccountId, targetAccountNumber,
                    targetNewCardGroupName, targetCardGroupId);
        }
    }
}
