/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for SummaryRequest type.
 */
public class SummaryRequest {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<String> colCoCountryCode;
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private List<String> cardStatus;
    private OptionalNullable<Integer> expiringInDays;
    private OptionalNullable<String> issuedAfter;
    private OptionalNullable<String> pANEndsWith;
    private List<String> driverName;
    private List<String> vehicleRegistrationNumber;
    private List<SearchCard> includeCards;
    private List<SearchCard> excludeCards;
    private OptionalNullable<String> excludeBundleId;
    private OptionalNullable<String> cardSegment;
    private OptionalNullable<String> purchaseCategoryCode;
    private OptionalNullable<String> cardTypeCode;
    private Boolean excludePendingRenewalCards;
    private Boolean excludeCancelledCards;
    private Boolean excludeReplacedCards;
    private Boolean excludeFraudCards;
    private OptionalNullable<Integer> excludeCardGroupId;
    private OptionalNullable<String> excludeCardGroupName;
    private OptionalNullable<String> creationDate;
    private OptionalNullable<String> effectiveDate;
    private OptionalNullable<String> network;
    private OptionalNullable<String> coverage;
    private OptionalNullable<String> expiryMonth;
    private Boolean excludeOldCards;
    private OptionalNullable<String> reissueSetting;
    private String requestId;

    /**
     * Default constructor.
     */
    public SummaryRequest() {
    }

    /**
     * Initialization constructor.
     * @param  cardStatus  List of String value for cardStatus.
     * @param  requestId  String value for requestId.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  expiringInDays  Integer value for expiringInDays.
     * @param  issuedAfter  String value for issuedAfter.
     * @param  pANEndsWith  String value for pANEndsWith.
     * @param  driverName  List of String value for driverName.
     * @param  vehicleRegistrationNumber  List of String value for vehicleRegistrationNumber.
     * @param  includeCards  List of SearchCard value for includeCards.
     * @param  excludeCards  List of SearchCard value for excludeCards.
     * @param  excludeBundleId  String value for excludeBundleId.
     * @param  cardSegment  String value for cardSegment.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  excludePendingRenewalCards  Boolean value for excludePendingRenewalCards.
     * @param  excludeCancelledCards  Boolean value for excludeCancelledCards.
     * @param  excludeReplacedCards  Boolean value for excludeReplacedCards.
     * @param  excludeFraudCards  Boolean value for excludeFraudCards.
     * @param  excludeCardGroupId  Integer value for excludeCardGroupId.
     * @param  excludeCardGroupName  String value for excludeCardGroupName.
     * @param  creationDate  String value for creationDate.
     * @param  effectiveDate  String value for effectiveDate.
     * @param  network  String value for network.
     * @param  coverage  String value for coverage.
     * @param  expiryMonth  String value for expiryMonth.
     * @param  excludeOldCards  Boolean value for excludeOldCards.
     * @param  reissueSetting  String value for reissueSetting.
     */
    public SummaryRequest(
            List<String> cardStatus,
            String requestId,
            Integer accountId,
            String accountNumber,
            Integer colCoCode,
            String colCoCountryCode,
            Integer colCoId,
            Integer payerId,
            String payerNumber,
            Integer cardGroupId,
            String cardGroupName,
            Integer expiringInDays,
            String issuedAfter,
            String pANEndsWith,
            List<String> driverName,
            List<String> vehicleRegistrationNumber,
            List<SearchCard> includeCards,
            List<SearchCard> excludeCards,
            String excludeBundleId,
            String cardSegment,
            String purchaseCategoryCode,
            String cardTypeCode,
            Boolean excludePendingRenewalCards,
            Boolean excludeCancelledCards,
            Boolean excludeReplacedCards,
            Boolean excludeFraudCards,
            Integer excludeCardGroupId,
            String excludeCardGroupName,
            String creationDate,
            String effectiveDate,
            String network,
            String coverage,
            String expiryMonth,
            Boolean excludeOldCards,
            String reissueSetting) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
        this.colCoId = OptionalNullable.of(colCoId);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.cardStatus = cardStatus;
        this.expiringInDays = OptionalNullable.of(expiringInDays);
        this.issuedAfter = OptionalNullable.of(issuedAfter);
        this.pANEndsWith = OptionalNullable.of(pANEndsWith);
        this.driverName = driverName;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.includeCards = includeCards;
        this.excludeCards = excludeCards;
        this.excludeBundleId = OptionalNullable.of(excludeBundleId);
        this.cardSegment = OptionalNullable.of(cardSegment);
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
        this.excludePendingRenewalCards = excludePendingRenewalCards;
        this.excludeCancelledCards = excludeCancelledCards;
        this.excludeReplacedCards = excludeReplacedCards;
        this.excludeFraudCards = excludeFraudCards;
        this.excludeCardGroupId = OptionalNullable.of(excludeCardGroupId);
        this.excludeCardGroupName = OptionalNullable.of(excludeCardGroupName);
        this.creationDate = OptionalNullable.of(creationDate);
        this.effectiveDate = OptionalNullable.of(effectiveDate);
        this.network = OptionalNullable.of(network);
        this.coverage = OptionalNullable.of(coverage);
        this.expiryMonth = OptionalNullable.of(expiryMonth);
        this.excludeOldCards = excludeOldCards;
        this.reissueSetting = OptionalNullable.of(reissueSetting);
        this.requestId = requestId;
    }

    /**
     * Initialization constructor.
     * @param  cardStatus  List of String value for cardStatus.
     * @param  requestId  String value for requestId.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  expiringInDays  Integer value for expiringInDays.
     * @param  issuedAfter  String value for issuedAfter.
     * @param  pANEndsWith  String value for pANEndsWith.
     * @param  driverName  List of String value for driverName.
     * @param  vehicleRegistrationNumber  List of String value for vehicleRegistrationNumber.
     * @param  includeCards  List of SearchCard value for includeCards.
     * @param  excludeCards  List of SearchCard value for excludeCards.
     * @param  excludeBundleId  String value for excludeBundleId.
     * @param  cardSegment  String value for cardSegment.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  excludePendingRenewalCards  Boolean value for excludePendingRenewalCards.
     * @param  excludeCancelledCards  Boolean value for excludeCancelledCards.
     * @param  excludeReplacedCards  Boolean value for excludeReplacedCards.
     * @param  excludeFraudCards  Boolean value for excludeFraudCards.
     * @param  excludeCardGroupId  Integer value for excludeCardGroupId.
     * @param  excludeCardGroupName  String value for excludeCardGroupName.
     * @param  creationDate  String value for creationDate.
     * @param  effectiveDate  String value for effectiveDate.
     * @param  network  String value for network.
     * @param  coverage  String value for coverage.
     * @param  expiryMonth  String value for expiryMonth.
     * @param  excludeOldCards  Boolean value for excludeOldCards.
     * @param  reissueSetting  String value for reissueSetting.
     */

    protected SummaryRequest(List<String> cardStatus, String requestId,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<Integer> colCoCode, OptionalNullable<String> colCoCountryCode,
            OptionalNullable<Integer> colCoId, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber, OptionalNullable<Integer> cardGroupId,
            OptionalNullable<String> cardGroupName, OptionalNullable<Integer> expiringInDays,
            OptionalNullable<String> issuedAfter, OptionalNullable<String> pANEndsWith,
            List<String> driverName, List<String> vehicleRegistrationNumber,
            List<SearchCard> includeCards, List<SearchCard> excludeCards,
            OptionalNullable<String> excludeBundleId, OptionalNullable<String> cardSegment,
            OptionalNullable<String> purchaseCategoryCode, OptionalNullable<String> cardTypeCode,
            Boolean excludePendingRenewalCards, Boolean excludeCancelledCards,
            Boolean excludeReplacedCards, Boolean excludeFraudCards,
            OptionalNullable<Integer> excludeCardGroupId,
            OptionalNullable<String> excludeCardGroupName, OptionalNullable<String> creationDate,
            OptionalNullable<String> effectiveDate, OptionalNullable<String> network,
            OptionalNullable<String> coverage, OptionalNullable<String> expiryMonth,
            Boolean excludeOldCards, OptionalNullable<String> reissueSetting) {
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.colCoCode = colCoCode;
        this.colCoCountryCode = colCoCountryCode;
        this.colCoId = colCoId;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.cardStatus = cardStatus;
        this.expiringInDays = expiringInDays;
        this.issuedAfter = issuedAfter;
        this.pANEndsWith = pANEndsWith;
        this.driverName = driverName;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.includeCards = includeCards;
        this.excludeCards = excludeCards;
        this.excludeBundleId = excludeBundleId;
        this.cardSegment = cardSegment;
        this.purchaseCategoryCode = purchaseCategoryCode;
        this.cardTypeCode = cardTypeCode;
        this.excludePendingRenewalCards = excludePendingRenewalCards;
        this.excludeCancelledCards = excludeCancelledCards;
        this.excludeReplacedCards = excludeReplacedCards;
        this.excludeFraudCards = excludeFraudCards;
        this.excludeCardGroupId = excludeCardGroupId;
        this.excludeCardGroupName = excludeCardGroupName;
        this.creationDate = creationDate;
        this.effectiveDate = effectiveDate;
        this.network = network;
        this.coverage = coverage;
        this.expiryMonth = expiryMonth;
        this.excludeOldCards = excludeOldCards;
        this.reissueSetting = reissueSetting;
        this.requestId = requestId;
    }

    /**
     * Internal Getter for AccountId.
     * Account ID of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if given.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account ID of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if given.
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account ID of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if given.
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account ID of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if given.
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if
     * given.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if
     * given.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if
     * given.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the customer.&lt;br/&gt; Optional.&lt;br/&gt; This input is a search criterion, if
     * given.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. &lt;br /&gt; Optional If ColCo Id or
     * ColCoCountryCode is passed else Mandatory.&lt;br /&gt;
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. &lt;br /&gt; Optional If ColCo Id or
     * ColCoCountryCode is passed else Mandatory.&lt;br /&gt;
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. &lt;br /&gt; Optional If ColCo Id or
     * ColCoCountryCode is passed else Mandatory.&lt;br /&gt;
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. &lt;br /&gt; Optional If ColCo Id or
     * ColCoCountryCode is passed else Mandatory.&lt;br /&gt;
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country.&lt;br /&gt; Optional If ColCoId
     * or ColCoCode is passed else Mandatory.&lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCountryCode() {
        return this.colCoCountryCode;
    }

    /**
     * Getter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country.&lt;br /&gt; Optional If ColCoId
     * or ColCoCode is passed else Mandatory.&lt;br /&gt;
     * @return Returns the String
     */
    public String getColCoCountryCode() {
        return OptionalNullable.getFrom(colCoCountryCode);
    }

    /**
     * Setter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country.&lt;br /&gt; Optional If ColCoId
     * or ColCoCode is passed else Mandatory.&lt;br /&gt;
     * @param colCoCountryCode Value for String
     */
    @JsonSetter("ColCoCountryCode")
    public void setColCoCountryCode(String colCoCountryCode) {
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
    }

    /**
     * UnSetter for ColCoCountryCode.
     * The 2 character ISO Code for the customer and card owning country.&lt;br /&gt; Optional If ColCoId
     * or ColCoCode is passed else Mandatory.&lt;br /&gt;
     */
    public void unsetColCoCountryCode() {
        colCoCountryCode = null;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id (in ) of the selected payer.&lt;br /&gt; Optional If ColCo Codeor
     * ColCoCountryCode is passed else Mandatory &lt;br /&gt;
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id (in ) of the selected payer.&lt;br /&gt; Optional If ColCo Codeor
     * ColCoCountryCode is passed else Mandatory &lt;br /&gt;
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id (in ) of the selected payer.&lt;br /&gt; Optional If ColCo Codeor
     * ColCoCountryCode is passed else Mandatory &lt;br /&gt;
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id (in ) of the selected payer.&lt;br /&gt; Optional If ColCo Codeor
     * ColCoCountryCode is passed else Mandatory &lt;br /&gt;
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.&lt;br /&gt; Optional if
     * PayerNumber is passed else Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.&lt;br /&gt; Optional if
     * PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.&lt;br /&gt; Optional if
     * PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id (i.e. Customer Id of the Payment Customer ) of the selected payer.&lt;br /&gt; Optional if
     * PayerNumber is passed else Mandatory
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer.&lt;br /&gt; Optional if PayerId is passed else Mandatory
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group id.&lt;br /&gt; Optional. &lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; When
     * -1 is passed, those cards that does not belong to any card group will be returned.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group id.&lt;br /&gt; Optional. &lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; When
     * -1 is passed, those cards that does not belong to any card group will be returned.
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group id.&lt;br /&gt; Optional. &lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; When
     * -1 is passed, those cards that does not belong to any card group will be returned.
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group id.&lt;br /&gt; Optional. &lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; When
     * -1 is passed, those cards that does not belong to any card group will be returned.
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card group name.&lt;br /&gt; Optional.&lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; If
     * CardGroupId is provided then this search criterion will be ignored, else, those cards that
     * have the card group name completely matching with the entered value will be returned
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card group name.&lt;br /&gt; Optional.&lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; If
     * CardGroupId is provided then this search criterion will be ignored, else, those cards that
     * have the card group name completely matching with the entered value will be returned
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card group name.&lt;br /&gt; Optional.&lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; If
     * CardGroupId is provided then this search criterion will be ignored, else, those cards that
     * have the card group name completely matching with the entered value will be returned
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card group name.&lt;br /&gt; Optional.&lt;br /&gt; This input is a search criterion, if given.&lt;br /&gt; If
     * CardGroupId is provided then this search criterion will be ignored, else, those cards that
     * have the card group name completely matching with the entered value will be returned
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Getter for CardStatus.
     * Status of the card.&lt;br /&gt; Mandatory.&lt;br /&gt; Multiple statuses are allowed to be included in
     * the search criteria.&lt;br /&gt; CardStatus filter accepts either of the two values for each status
     * as described below. However, the output field “StatusDescription” is aligned with second
     * value highlighted in italics.&lt;br /&gt; Below are the possible allowed statuses: &lt;br /&gt; • ACTIVE
     * or Active – Cards at status Active (The result will include all the cards having the
     * following intermediate statuses as defined s, if the IncludeIntermediateStatus flag is true:
     * Active (Block in progress), Active (Cancel in progress), Active (Marked as damaged)), New
     * (Cancel in progress).&lt;br /&gt; • ON_ORDER or New – Cards at status New &lt;br /&gt; • EXPIRED or
     * Expired – Cards at status Expired&lt;br /&gt; • BLOCKED or Blocked Card – Cards at status Block
     * (The result will include all cards having the following intermediate status as defined, if
     * the IncludeIntermediateStatus flag is true: Blocked card (Unblock in progress))&lt;br /&gt; •
     * TEMP_BLOCKED_CUSTOMER or Temporary Block(Customer) – Cards at status Temporary Blocked By
     * Customer&lt;br /&gt; • TEMP_BLOCKED_SHELL or Temporary Block (Shell) – Cards at Status Temporary
     * Blocked by Shell&lt;br /&gt; • CANCELLED or Cancelled – Cards at status Cancelled&lt;br /&gt; •
     * PENDING_RENEWAL or Pending Renewal - Cards that are in renewal process&lt;br /&gt; • REPLACED or
     * Replaced – Cards at Status Replaced&lt;br /&gt; • FRAUD or Fraud – Cards at Status FRAUD&lt;br /&gt; •
     * ALL
     * @return Returns the List of String
     */
    @JsonGetter("CardStatus")
    public List<String> getCardStatus() {
        return cardStatus;
    }

    /**
     * Setter for CardStatus.
     * Status of the card.&lt;br /&gt; Mandatory.&lt;br /&gt; Multiple statuses are allowed to be included in
     * the search criteria.&lt;br /&gt; CardStatus filter accepts either of the two values for each status
     * as described below. However, the output field “StatusDescription” is aligned with second
     * value highlighted in italics.&lt;br /&gt; Below are the possible allowed statuses: &lt;br /&gt; • ACTIVE
     * or Active – Cards at status Active (The result will include all the cards having the
     * following intermediate statuses as defined s, if the IncludeIntermediateStatus flag is true:
     * Active (Block in progress), Active (Cancel in progress), Active (Marked as damaged)), New
     * (Cancel in progress).&lt;br /&gt; • ON_ORDER or New – Cards at status New &lt;br /&gt; • EXPIRED or
     * Expired – Cards at status Expired&lt;br /&gt; • BLOCKED or Blocked Card – Cards at status Block
     * (The result will include all cards having the following intermediate status as defined, if
     * the IncludeIntermediateStatus flag is true: Blocked card (Unblock in progress))&lt;br /&gt; •
     * TEMP_BLOCKED_CUSTOMER or Temporary Block(Customer) – Cards at status Temporary Blocked By
     * Customer&lt;br /&gt; • TEMP_BLOCKED_SHELL or Temporary Block (Shell) – Cards at Status Temporary
     * Blocked by Shell&lt;br /&gt; • CANCELLED or Cancelled – Cards at status Cancelled&lt;br /&gt; •
     * PENDING_RENEWAL or Pending Renewal - Cards that are in renewal process&lt;br /&gt; • REPLACED or
     * Replaced – Cards at Status Replaced&lt;br /&gt; • FRAUD or Fraud – Cards at Status FRAUD&lt;br /&gt; •
     * ALL
     * @param cardStatus Value for List of String
     */
    @JsonSetter("CardStatus")
    public void setCardStatus(List<String> cardStatus) {
        this.cardStatus = cardStatus;
    }

    /**
     * Internal Getter for ExpiringInDays.
     * Cards active and expiring in given number of days.&lt;br /&gt; Optional&lt;br /&gt; Note: When a value is
     * passed in this parameter, only active cards will be considered while searching.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ExpiringInDays")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetExpiringInDays() {
        return this.expiringInDays;
    }

    /**
     * Getter for ExpiringInDays.
     * Cards active and expiring in given number of days.&lt;br /&gt; Optional&lt;br /&gt; Note: When a value is
     * passed in this parameter, only active cards will be considered while searching.
     * @return Returns the Integer
     */
    public Integer getExpiringInDays() {
        return OptionalNullable.getFrom(expiringInDays);
    }

    /**
     * Setter for ExpiringInDays.
     * Cards active and expiring in given number of days.&lt;br /&gt; Optional&lt;br /&gt; Note: When a value is
     * passed in this parameter, only active cards will be considered while searching.
     * @param expiringInDays Value for Integer
     */
    @JsonSetter("ExpiringInDays")
    public void setExpiringInDays(Integer expiringInDays) {
        this.expiringInDays = OptionalNullable.of(expiringInDays);
    }

    /**
     * UnSetter for ExpiringInDays.
     * Cards active and expiring in given number of days.&lt;br /&gt; Optional&lt;br /&gt; Note: When a value is
     * passed in this parameter, only active cards will be considered while searching.
     */
    public void unsetExpiringInDays() {
        expiringInDays = null;
    }

    /**
     * Internal Getter for IssuedAfter.
     * If provided, only list cards issued after the given date&lt;br /&gt; Optional&lt;br /&gt; Format:
     * yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime type.
     * @return Returns the Internal String
     */
    @JsonGetter("IssuedAfter")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssuedAfter() {
        return this.issuedAfter;
    }

    /**
     * Getter for IssuedAfter.
     * If provided, only list cards issued after the given date&lt;br /&gt; Optional&lt;br /&gt; Format:
     * yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime type.
     * @return Returns the String
     */
    public String getIssuedAfter() {
        return OptionalNullable.getFrom(issuedAfter);
    }

    /**
     * Setter for IssuedAfter.
     * If provided, only list cards issued after the given date&lt;br /&gt; Optional&lt;br /&gt; Format:
     * yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime type.
     * @param issuedAfter Value for String
     */
    @JsonSetter("IssuedAfter")
    public void setIssuedAfter(String issuedAfter) {
        this.issuedAfter = OptionalNullable.of(issuedAfter);
    }

    /**
     * UnSetter for IssuedAfter.
     * If provided, only list cards issued after the given date&lt;br /&gt; Optional&lt;br /&gt; Format:
     * yyyyMMdd&lt;br /&gt; Note: Clients to convert this to appropriate DateTime type.
     */
    public void unsetIssuedAfter() {
        issuedAfter = null;
    }

    /**
     * Internal Getter for PANEndsWith.
     * Last digits of the PAN number&lt;br /&gt; Minimum 4 last digits of the card should be sent for this
     * field to be considered as part of the search criteria.&lt;br /&gt; Optional&lt;br /&gt; Max Length: 50
     * @return Returns the Internal String
     */
    @JsonGetter("PANEndsWith")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPANEndsWith() {
        return this.pANEndsWith;
    }

    /**
     * Getter for PANEndsWith.
     * Last digits of the PAN number&lt;br /&gt; Minimum 4 last digits of the card should be sent for this
     * field to be considered as part of the search criteria.&lt;br /&gt; Optional&lt;br /&gt; Max Length: 50
     * @return Returns the String
     */
    public String getPANEndsWith() {
        return OptionalNullable.getFrom(pANEndsWith);
    }

    /**
     * Setter for PANEndsWith.
     * Last digits of the PAN number&lt;br /&gt; Minimum 4 last digits of the card should be sent for this
     * field to be considered as part of the search criteria.&lt;br /&gt; Optional&lt;br /&gt; Max Length: 50
     * @param pANEndsWith Value for String
     */
    @JsonSetter("PANEndsWith")
    public void setPANEndsWith(String pANEndsWith) {
        this.pANEndsWith = OptionalNullable.of(pANEndsWith);
    }

    /**
     * UnSetter for PANEndsWith.
     * Last digits of the PAN number&lt;br /&gt; Minimum 4 last digits of the card should be sent for this
     * field to be considered as part of the search criteria.&lt;br /&gt; Optional&lt;br /&gt; Max Length: 50
     */
    public void unsetPANEndsWith() {
        pANEndsWith = null;
    }

    /**
     * Getter for DriverName.
     * Driver Name embossed on the card&lt;br /&gt; Optional&lt;br /&gt; Up to 10 driver names could be passed
     * in the parameter.&lt;br /&gt; Minimum of 4 characters should be provided for each driver name else
     * not considered.&lt;br /&gt; Those cards will be returned when part of the driver name matches with
     * any of the string passed in the list.&lt;br /&gt; Max Length for each Driver name: 50
     * @return Returns the List of String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getDriverName() {
        return driverName;
    }

    /**
     * Setter for DriverName.
     * Driver Name embossed on the card&lt;br /&gt; Optional&lt;br /&gt; Up to 10 driver names could be passed
     * in the parameter.&lt;br /&gt; Minimum of 4 characters should be provided for each driver name else
     * not considered.&lt;br /&gt; Those cards will be returned when part of the driver name matches with
     * any of the string passed in the list.&lt;br /&gt; Max Length for each Driver name: 50
     * @param driverName Value for List of String
     */
    @JsonSetter("DriverName")
    public void setDriverName(List<String> driverName) {
        this.driverName = driverName;
    }

    /**
     * Getter for VehicleRegistrationNumber.
     * Vehicle Registration embossed on the card&lt;br /&gt; Optional&lt;br /&gt; Up to 10 vehicle registration
     * numbers could be passed in the parameter.&lt;br /&gt; Minimum of 4 characters should be provided
     * for each VRN else not considered&lt;br /&gt; Those cards will be returned when part of the VRN
     * matches with any of the string passed in the list.&lt;br /&gt; Max Length for each VRN: 50
     * @return Returns the List of String
     */
    @JsonGetter("VehicleRegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getVehicleRegistrationNumber() {
        return vehicleRegistrationNumber;
    }

    /**
     * Setter for VehicleRegistrationNumber.
     * Vehicle Registration embossed on the card&lt;br /&gt; Optional&lt;br /&gt; Up to 10 vehicle registration
     * numbers could be passed in the parameter.&lt;br /&gt; Minimum of 4 characters should be provided
     * for each VRN else not considered&lt;br /&gt; Those cards will be returned when part of the VRN
     * matches with any of the string passed in the list.&lt;br /&gt; Max Length for each VRN: 50
     * @param vehicleRegistrationNumber Value for List of String
     */
    @JsonSetter("VehicleRegistrationNumber")
    public void setVehicleRegistrationNumber(List<String> vehicleRegistrationNumber) {
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
    }

    /**
     * Getter for IncludeCards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be included in the
     * response.&lt;br /&gt; Details of the SerachCard entity are given below.
     * @return Returns the List of SearchCard
     */
    @JsonGetter("IncludeCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchCard> getIncludeCards() {
        return includeCards;
    }

    /**
     * Setter for IncludeCards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be included in the
     * response.&lt;br /&gt; Details of the SerachCard entity are given below.
     * @param includeCards Value for List of SearchCard
     */
    @JsonSetter("IncludeCards")
    public void setIncludeCards(List<SearchCard> includeCards) {
        this.includeCards = includeCards;
    }

    /**
     * Getter for ExcludeCards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be excluded in the response.
     * &lt;br /&gt; Details of the SerachCard entity are given below.
     * @return Returns the List of SearchCard
     */
    @JsonGetter("ExcludeCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SearchCard> getExcludeCards() {
        return excludeCards;
    }

    /**
     * Setter for ExcludeCards.
     * List of SearchCard entity i.e., Card Id or PAN, which needs to be excluded in the response.
     * &lt;br /&gt; Details of the SerachCard entity are given below.
     * @param excludeCards Value for List of SearchCard
     */
    @JsonSetter("ExcludeCards")
    public void setExcludeCards(List<SearchCard> excludeCards) {
        this.excludeCards = excludeCards;
    }

    /**
     * Internal Getter for ExcludeBundleId.
     * Bundle Id for the Card, which needs to be excluded in the response.&lt;br /&gt; Optional
     * @return Returns the Internal String
     */
    @JsonGetter("ExcludeBundleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExcludeBundleId() {
        return this.excludeBundleId;
    }

    /**
     * Getter for ExcludeBundleId.
     * Bundle Id for the Card, which needs to be excluded in the response.&lt;br /&gt; Optional
     * @return Returns the String
     */
    public String getExcludeBundleId() {
        return OptionalNullable.getFrom(excludeBundleId);
    }

    /**
     * Setter for ExcludeBundleId.
     * Bundle Id for the Card, which needs to be excluded in the response.&lt;br /&gt; Optional
     * @param excludeBundleId Value for String
     */
    @JsonSetter("ExcludeBundleId")
    public void setExcludeBundleId(String excludeBundleId) {
        this.excludeBundleId = OptionalNullable.of(excludeBundleId);
    }

    /**
     * UnSetter for ExcludeBundleId.
     * Bundle Id for the Card, which needs to be excluded in the response.&lt;br /&gt; Optional
     */
    public void unsetExcludeBundleId() {
        excludeBundleId = null;
    }

    /**
     * Internal Getter for CardSegment.
     * Market segment to which card belongs to.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; • CRT&lt;br
     * /&gt; • Fleet
     * @return Returns the Internal String
     */
    @JsonGetter("CardSegment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardSegment() {
        return this.cardSegment;
    }

    /**
     * Getter for CardSegment.
     * Market segment to which card belongs to.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; • CRT&lt;br
     * /&gt; • Fleet
     * @return Returns the String
     */
    public String getCardSegment() {
        return OptionalNullable.getFrom(cardSegment);
    }

    /**
     * Setter for CardSegment.
     * Market segment to which card belongs to.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; • CRT&lt;br
     * /&gt; • Fleet
     * @param cardSegment Value for String
     */
    @JsonSetter("CardSegment")
    public void setCardSegment(String cardSegment) {
        this.cardSegment = OptionalNullable.of(cardSegment);
    }

    /**
     * UnSetter for CardSegment.
     * Market segment to which card belongs to.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; • CRT&lt;br
     * /&gt; • Fleet
     */
    public void unsetCardSegment() {
        cardSegment = null;
    }

    /**
     * Internal Getter for PurchaseCategoryCode.
     * Purchase category code of the card.&lt;br /&gt; Optional.
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryCode() {
        return this.purchaseCategoryCode;
    }

    /**
     * Getter for PurchaseCategoryCode.
     * Purchase category code of the card.&lt;br /&gt; Optional.
     * @return Returns the String
     */
    public String getPurchaseCategoryCode() {
        return OptionalNullable.getFrom(purchaseCategoryCode);
    }

    /**
     * Setter for PurchaseCategoryCode.
     * Purchase category code of the card.&lt;br /&gt; Optional.
     * @param purchaseCategoryCode Value for String
     */
    @JsonSetter("PurchaseCategoryCode")
    public void setPurchaseCategoryCode(String purchaseCategoryCode) {
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
    }

    /**
     * UnSetter for PurchaseCategoryCode.
     * Purchase category code of the card.&lt;br /&gt; Optional.
     */
    public void unsetPurchaseCategoryCode() {
        purchaseCategoryCode = null;
    }

    /**
     * Internal Getter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN&lt;br /&gt; Optional.
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeCode() {
        return this.cardTypeCode;
    }

    /**
     * Getter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN&lt;br /&gt; Optional.
     * @return Returns the String
     */
    public String getCardTypeCode() {
        return OptionalNullable.getFrom(cardTypeCode);
    }

    /**
     * Setter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN&lt;br /&gt; Optional.
     * @param cardTypeCode Value for String
     */
    @JsonSetter("CardTypeCode")
    public void setCardTypeCode(String cardTypeCode) {
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
    }

    /**
     * UnSetter for CardTypeCode.
     * ISO code of the card i.e. first 7 digits of the PAN&lt;br /&gt; Optional.
     */
    public void unsetCardTypeCode() {
        cardTypeCode = null;
    }

    /**
     * Getter for ExcludePendingRenewalCards.
     * Default value is True.&lt;br /&gt; When true, the API will not return cards that are at Pending
     * Renewal Status in Cards Platform
     * @return Returns the Boolean
     */
    @JsonGetter("ExcludePendingRenewalCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludePendingRenewalCards() {
        return excludePendingRenewalCards;
    }

    /**
     * Setter for ExcludePendingRenewalCards.
     * Default value is True.&lt;br /&gt; When true, the API will not return cards that are at Pending
     * Renewal Status in Cards Platform
     * @param excludePendingRenewalCards Value for Boolean
     */
    @JsonSetter("ExcludePendingRenewalCards")
    public void setExcludePendingRenewalCards(Boolean excludePendingRenewalCards) {
        this.excludePendingRenewalCards = excludePendingRenewalCards;
    }

    /**
     * Getter for ExcludeCancelledCards.
     * Default value is True.&lt;br /&gt; When true, the API will not return cards that are at Cancelled
     * Status in Cards Platform
     * @return Returns the Boolean
     */
    @JsonGetter("ExcludeCancelledCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeCancelledCards() {
        return excludeCancelledCards;
    }

    /**
     * Setter for ExcludeCancelledCards.
     * Default value is True.&lt;br /&gt; When true, the API will not return cards that are at Cancelled
     * Status in Cards Platform
     * @param excludeCancelledCards Value for Boolean
     */
    @JsonSetter("ExcludeCancelledCards")
    public void setExcludeCancelledCards(Boolean excludeCancelledCards) {
        this.excludeCancelledCards = excludeCancelledCards;
    }

    /**
     * Getter for ExcludeReplacedCards.
     * Default value is False.&lt;br /&gt; When true, the API will not return cards that are at Replaced
     * Status in Cards Platform
     * @return Returns the Boolean
     */
    @JsonGetter("ExcludeReplacedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeReplacedCards() {
        return excludeReplacedCards;
    }

    /**
     * Setter for ExcludeReplacedCards.
     * Default value is False.&lt;br /&gt; When true, the API will not return cards that are at Replaced
     * Status in Cards Platform
     * @param excludeReplacedCards Value for Boolean
     */
    @JsonSetter("ExcludeReplacedCards")
    public void setExcludeReplacedCards(Boolean excludeReplacedCards) {
        this.excludeReplacedCards = excludeReplacedCards;
    }

    /**
     * Getter for ExcludeFraudCards.
     * Default value is False.&lt;br /&gt; When true, the API will not return cards that are at Fraud
     * Status in Cards Platform
     * @return Returns the Boolean
     */
    @JsonGetter("ExcludeFraudCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeFraudCards() {
        return excludeFraudCards;
    }

    /**
     * Setter for ExcludeFraudCards.
     * Default value is False.&lt;br /&gt; When true, the API will not return cards that are at Fraud
     * Status in Cards Platform
     * @param excludeFraudCards Value for Boolean
     */
    @JsonSetter("ExcludeFraudCards")
    public void setExcludeFraudCards(Boolean excludeFraudCards) {
        this.excludeFraudCards = excludeFraudCards;
    }

    /**
     * Internal Getter for ExcludeCardGroupId.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     * @return Returns the Internal Integer
     */
    @JsonGetter("ExcludeCardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetExcludeCardGroupId() {
        return this.excludeCardGroupId;
    }

    /**
     * Getter for ExcludeCardGroupId.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     * @return Returns the Integer
     */
    public Integer getExcludeCardGroupId() {
        return OptionalNullable.getFrom(excludeCardGroupId);
    }

    /**
     * Setter for ExcludeCardGroupId.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     * @param excludeCardGroupId Value for Integer
     */
    @JsonSetter("ExcludeCardGroupId")
    public void setExcludeCardGroupId(Integer excludeCardGroupId) {
        this.excludeCardGroupId = OptionalNullable.of(excludeCardGroupId);
    }

    /**
     * UnSetter for ExcludeCardGroupId.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     */
    public void unsetExcludeCardGroupId() {
        excludeCardGroupId = null;
    }

    /**
     * Internal Getter for ExcludeCardGroupName.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     * @return Returns the Internal String
     */
    @JsonGetter("ExcludeCardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExcludeCardGroupName() {
        return this.excludeCardGroupName;
    }

    /**
     * Getter for ExcludeCardGroupName.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     * @return Returns the String
     */
    public String getExcludeCardGroupName() {
        return OptionalNullable.getFrom(excludeCardGroupName);
    }

    /**
     * Setter for ExcludeCardGroupName.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     * @param excludeCardGroupName Value for String
     */
    @JsonSetter("ExcludeCardGroupName")
    public void setExcludeCardGroupName(String excludeCardGroupName) {
        this.excludeCardGroupName = OptionalNullable.of(excludeCardGroupName);
    }

    /**
     * UnSetter for ExcludeCardGroupName.
     * Optional&lt;br /&gt; When passed, the API will not return cards that are currently in the Card
     * Group specified
     */
    public void unsetExcludeCardGroupName() {
        excludeCardGroupName = null;
    }

    /**
     * Internal Getter for CreationDate.
     * Card Creation Date&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("CreationDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreationDate() {
        return this.creationDate;
    }

    /**
     * Getter for CreationDate.
     * Card Creation Date&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     * @return Returns the String
     */
    public String getCreationDate() {
        return OptionalNullable.getFrom(creationDate);
    }

    /**
     * Setter for CreationDate.
     * Card Creation Date&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     * @param creationDate Value for String
     */
    @JsonSetter("CreationDate")
    public void setCreationDate(String creationDate) {
        this.creationDate = OptionalNullable.of(creationDate);
    }

    /**
     * UnSetter for CreationDate.
     * Card Creation Date&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     */
    public void unsetCreationDate() {
        creationDate = null;
    }

    /**
     * Internal Getter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("EffectiveDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEffectiveDate() {
        return this.effectiveDate;
    }

    /**
     * Getter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     * @return Returns the String
     */
    public String getEffectiveDate() {
        return OptionalNullable.getFrom(effectiveDate);
    }

    /**
     * Setter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     * @param effectiveDate Value for String
     */
    @JsonSetter("EffectiveDate")
    public void setEffectiveDate(String effectiveDate) {
        this.effectiveDate = OptionalNullable.of(effectiveDate);
    }

    /**
     * UnSetter for EffectiveDate.
     * Effective date for the Card&lt;br /&gt; Optional&lt;br /&gt; Format: yyyyMMdd
     */
    public void unsetEffectiveDate() {
        effectiveDate = null;
    }

    /**
     * Internal Getter for Network.
     * Cards allowed to be used in site.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; •
     * ShellSitesOnly&lt;br /&gt; • PartnersSitesIncluded&lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("Network")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetwork() {
        return this.network;
    }

    /**
     * Getter for Network.
     * Cards allowed to be used in site.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; •
     * ShellSitesOnly&lt;br /&gt; • PartnersSitesIncluded&lt;br /&gt;
     * @return Returns the String
     */
    public String getNetwork() {
        return OptionalNullable.getFrom(network);
    }

    /**
     * Setter for Network.
     * Cards allowed to be used in site.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; •
     * ShellSitesOnly&lt;br /&gt; • PartnersSitesIncluded&lt;br /&gt;
     * @param network Value for String
     */
    @JsonSetter("Network")
    public void setNetwork(String network) {
        this.network = OptionalNullable.of(network);
    }

    /**
     * UnSetter for Network.
     * Cards allowed to be used in site.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt; •
     * ShellSitesOnly&lt;br /&gt; • PartnersSitesIncluded&lt;br /&gt;
     */
    public void unsetNetwork() {
        network = null;
    }

    /**
     * Internal Getter for Coverage.
     * Cards allowed to used nationally/internationally.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt;
     * -National&lt;br /&gt; -International
     * @return Returns the Internal String
     */
    @JsonGetter("Coverage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCoverage() {
        return this.coverage;
    }

    /**
     * Getter for Coverage.
     * Cards allowed to used nationally/internationally.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt;
     * -National&lt;br /&gt; -International
     * @return Returns the String
     */
    public String getCoverage() {
        return OptionalNullable.getFrom(coverage);
    }

    /**
     * Setter for Coverage.
     * Cards allowed to used nationally/internationally.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt;
     * -National&lt;br /&gt; -International
     * @param coverage Value for String
     */
    @JsonSetter("Coverage")
    public void setCoverage(String coverage) {
        this.coverage = OptionalNullable.of(coverage);
    }

    /**
     * UnSetter for Coverage.
     * Cards allowed to used nationally/internationally.&lt;br /&gt; Optional.&lt;br /&gt; Allowed values&lt;br /&gt;
     * -National&lt;br /&gt; -International
     */
    public void unsetCoverage() {
        coverage = null;
    }

    /**
     * Internal Getter for ExpiryMonth.
     * Month in which the card is expiring.&lt;br /&gt; Optional.&lt;br /&gt; Format: MMYYYY
     * @return Returns the Internal String
     */
    @JsonGetter("ExpiryMonth")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiryMonth() {
        return this.expiryMonth;
    }

    /**
     * Getter for ExpiryMonth.
     * Month in which the card is expiring.&lt;br /&gt; Optional.&lt;br /&gt; Format: MMYYYY
     * @return Returns the String
     */
    public String getExpiryMonth() {
        return OptionalNullable.getFrom(expiryMonth);
    }

    /**
     * Setter for ExpiryMonth.
     * Month in which the card is expiring.&lt;br /&gt; Optional.&lt;br /&gt; Format: MMYYYY
     * @param expiryMonth Value for String
     */
    @JsonSetter("ExpiryMonth")
    public void setExpiryMonth(String expiryMonth) {
        this.expiryMonth = OptionalNullable.of(expiryMonth);
    }

    /**
     * UnSetter for ExpiryMonth.
     * Month in which the card is expiring.&lt;br /&gt; Optional.&lt;br /&gt; Format: MMYYYY
     */
    public void unsetExpiryMonth() {
        expiryMonth = null;
    }

    /**
     * Getter for ExcludeOldCards.
     * Default Value: False&lt;br /&gt; When this field is set to True, cards with below status 2 years
     * (configurable) ago and earlier are excluded from the result&lt;br /&gt; -Blocked Card&lt;br /&gt;
     * -Expired&lt;br /&gt; -Cancelled&lt;br /&gt; -Suspended&lt;br /&gt; -Blocked&lt;br /&gt; -Expired and Cancelled&lt;br /&gt;
     * -Replaced&lt;br /&gt; -Replaced By&lt;br /&gt; -Closed&lt;br /&gt; -Fraud&lt;br /&gt;
     * @return Returns the Boolean
     */
    @JsonGetter("ExcludeOldCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExcludeOldCards() {
        return excludeOldCards;
    }

    /**
     * Setter for ExcludeOldCards.
     * Default Value: False&lt;br /&gt; When this field is set to True, cards with below status 2 years
     * (configurable) ago and earlier are excluded from the result&lt;br /&gt; -Blocked Card&lt;br /&gt;
     * -Expired&lt;br /&gt; -Cancelled&lt;br /&gt; -Suspended&lt;br /&gt; -Blocked&lt;br /&gt; -Expired and Cancelled&lt;br /&gt;
     * -Replaced&lt;br /&gt; -Replaced By&lt;br /&gt; -Closed&lt;br /&gt; -Fraud&lt;br /&gt;
     * @param excludeOldCards Value for Boolean
     */
    @JsonSetter("ExcludeOldCards")
    public void setExcludeOldCards(Boolean excludeOldCards) {
        this.excludeOldCards = excludeOldCards;
    }

    /**
     * Internal Getter for ReissueSetting.
     * Default Value: All&lt;br /&gt; Optional&lt;br /&gt; This option is used to filter the list of cards with
     * ‘ReissueSetting’.&lt;br /&gt; If ‘True’, the API will return cards with ReIssueSetting value is
     * true.&lt;br /&gt; If ‘False’, the API will return cards with ReIsssueSetting value is false.&lt;br /&gt;
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.&lt;br /&gt;
     * Allowed Values:&lt;br /&gt; 1. All&lt;br /&gt; 2. True&lt;br /&gt; 3. False
     * @return Returns the Internal String
     */
    @JsonGetter("ReissueSetting")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReissueSetting() {
        return this.reissueSetting;
    }

    /**
     * Getter for ReissueSetting.
     * Default Value: All&lt;br /&gt; Optional&lt;br /&gt; This option is used to filter the list of cards with
     * ‘ReissueSetting’.&lt;br /&gt; If ‘True’, the API will return cards with ReIssueSetting value is
     * true.&lt;br /&gt; If ‘False’, the API will return cards with ReIsssueSetting value is false.&lt;br /&gt;
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.&lt;br /&gt;
     * Allowed Values:&lt;br /&gt; 1. All&lt;br /&gt; 2. True&lt;br /&gt; 3. False
     * @return Returns the String
     */
    public String getReissueSetting() {
        return OptionalNullable.getFrom(reissueSetting);
    }

    /**
     * Setter for ReissueSetting.
     * Default Value: All&lt;br /&gt; Optional&lt;br /&gt; This option is used to filter the list of cards with
     * ‘ReissueSetting’.&lt;br /&gt; If ‘True’, the API will return cards with ReIssueSetting value is
     * true.&lt;br /&gt; If ‘False’, the API will return cards with ReIsssueSetting value is false.&lt;br /&gt;
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.&lt;br /&gt;
     * Allowed Values:&lt;br /&gt; 1. All&lt;br /&gt; 2. True&lt;br /&gt; 3. False
     * @param reissueSetting Value for String
     */
    @JsonSetter("ReissueSetting")
    public void setReissueSetting(String reissueSetting) {
        this.reissueSetting = OptionalNullable.of(reissueSetting);
    }

    /**
     * UnSetter for ReissueSetting.
     * Default Value: All&lt;br /&gt; Optional&lt;br /&gt; This option is used to filter the list of cards with
     * ‘ReissueSetting’.&lt;br /&gt; If ‘True’, the API will return cards with ReIssueSetting value is
     * true.&lt;br /&gt; If ‘False’, the API will return cards with ReIsssueSetting value is false.&lt;br /&gt;
     * If ‘ALL’, API will return cards with ReIssueSetting value True &amp; False both.&lt;br /&gt;
     * Allowed Values:&lt;br /&gt; 1. All&lt;br /&gt; 2. True&lt;br /&gt; 3. False
     */
    public void unsetReissueSetting() {
        reissueSetting = null;
    }

    /**
     * Getter for RequestId.
     * @return Returns the String
     */
    @JsonGetter("RequestId")
    public String getRequestId() {
        return requestId;
    }

    /**
     * Setter for RequestId.
     * @param requestId Value for String
     */
    @JsonSetter("RequestId")
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Converts this SummaryRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SummaryRequest [" + "cardStatus=" + cardStatus + ", requestId=" + requestId
                + ", accountId=" + accountId + ", accountNumber=" + accountNumber + ", colCoCode="
                + colCoCode + ", colCoCountryCode=" + colCoCountryCode + ", colCoId=" + colCoId
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", cardGroupId="
                + cardGroupId + ", cardGroupName=" + cardGroupName + ", expiringInDays="
                + expiringInDays + ", issuedAfter=" + issuedAfter + ", pANEndsWith=" + pANEndsWith
                + ", driverName=" + driverName + ", vehicleRegistrationNumber="
                + vehicleRegistrationNumber + ", includeCards=" + includeCards + ", excludeCards="
                + excludeCards + ", excludeBundleId=" + excludeBundleId + ", cardSegment="
                + cardSegment + ", purchaseCategoryCode=" + purchaseCategoryCode + ", cardTypeCode="
                + cardTypeCode + ", excludePendingRenewalCards=" + excludePendingRenewalCards
                + ", excludeCancelledCards=" + excludeCancelledCards + ", excludeReplacedCards="
                + excludeReplacedCards + ", excludeFraudCards=" + excludeFraudCards
                + ", excludeCardGroupId=" + excludeCardGroupId + ", excludeCardGroupName="
                + excludeCardGroupName + ", creationDate=" + creationDate + ", effectiveDate="
                + effectiveDate + ", network=" + network + ", coverage=" + coverage
                + ", expiryMonth=" + expiryMonth + ", excludeOldCards=" + excludeOldCards
                + ", reissueSetting=" + reissueSetting + "]";
    }

    /**
     * Builds a new {@link SummaryRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SummaryRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(cardStatus, requestId)
                .driverName(getDriverName())
                .vehicleRegistrationNumber(getVehicleRegistrationNumber())
                .includeCards(getIncludeCards())
                .excludeCards(getExcludeCards())
                .excludePendingRenewalCards(getExcludePendingRenewalCards())
                .excludeCancelledCards(getExcludeCancelledCards())
                .excludeReplacedCards(getExcludeReplacedCards())
                .excludeFraudCards(getExcludeFraudCards())
                .excludeOldCards(getExcludeOldCards());
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.colCoCode = internalGetColCoCode();
        builder.colCoCountryCode = internalGetColCoCountryCode();
        builder.colCoId = internalGetColCoId();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.expiringInDays = internalGetExpiringInDays();
        builder.issuedAfter = internalGetIssuedAfter();
        builder.pANEndsWith = internalGetPANEndsWith();
        builder.excludeBundleId = internalGetExcludeBundleId();
        builder.cardSegment = internalGetCardSegment();
        builder.purchaseCategoryCode = internalGetPurchaseCategoryCode();
        builder.cardTypeCode = internalGetCardTypeCode();
        builder.excludeCardGroupId = internalGetExcludeCardGroupId();
        builder.excludeCardGroupName = internalGetExcludeCardGroupName();
        builder.creationDate = internalGetCreationDate();
        builder.effectiveDate = internalGetEffectiveDate();
        builder.network = internalGetNetwork();
        builder.coverage = internalGetCoverage();
        builder.expiryMonth = internalGetExpiryMonth();
        builder.reissueSetting = internalGetReissueSetting();
        return builder;
    }

    /**
     * Class to build instances of {@link SummaryRequest}.
     */
    public static class Builder {
        private List<String> cardStatus;
        private String requestId;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<String> colCoCountryCode;
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<Integer> expiringInDays;
        private OptionalNullable<String> issuedAfter;
        private OptionalNullable<String> pANEndsWith;
        private List<String> driverName;
        private List<String> vehicleRegistrationNumber;
        private List<SearchCard> includeCards;
        private List<SearchCard> excludeCards;
        private OptionalNullable<String> excludeBundleId;
        private OptionalNullable<String> cardSegment;
        private OptionalNullable<String> purchaseCategoryCode;
        private OptionalNullable<String> cardTypeCode;
        private Boolean excludePendingRenewalCards;
        private Boolean excludeCancelledCards;
        private Boolean excludeReplacedCards;
        private Boolean excludeFraudCards;
        private OptionalNullable<Integer> excludeCardGroupId;
        private OptionalNullable<String> excludeCardGroupName;
        private OptionalNullable<String> creationDate;
        private OptionalNullable<String> effectiveDate;
        private OptionalNullable<String> network;
        private OptionalNullable<String> coverage;
        private OptionalNullable<String> expiryMonth;
        private Boolean excludeOldCards;
        private OptionalNullable<String> reissueSetting;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  cardStatus  List of String value for cardStatus.
         * @param  requestId  String value for requestId.
         */
        public Builder(List<String> cardStatus, String requestId) {
            this.cardStatus = cardStatus;
            this.requestId = requestId;
        }

        /**
         * Setter for cardStatus.
         * @param  cardStatus  List of String value for cardStatus.
         * @return Builder
         */
        public Builder cardStatus(List<String> cardStatus) {
            this.cardStatus = cardStatus;
            return this;
        }

        /**
         * Setter for requestId.
         * @param  requestId  String value for requestId.
         * @return Builder
         */
        public Builder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for colCoCountryCode.
         * @param  colCoCountryCode  String value for colCoCountryCode.
         * @return Builder
         */
        public Builder colCoCountryCode(String colCoCountryCode) {
            this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
            return this;
        }

        /**
         * UnSetter for colCoCountryCode.
         * @return Builder
         */
        public Builder unsetColCoCountryCode() {
            colCoCountryCode = null;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for expiringInDays.
         * @param  expiringInDays  Integer value for expiringInDays.
         * @return Builder
         */
        public Builder expiringInDays(Integer expiringInDays) {
            this.expiringInDays = OptionalNullable.of(expiringInDays);
            return this;
        }

        /**
         * UnSetter for expiringInDays.
         * @return Builder
         */
        public Builder unsetExpiringInDays() {
            expiringInDays = null;
            return this;
        }

        /**
         * Setter for issuedAfter.
         * @param  issuedAfter  String value for issuedAfter.
         * @return Builder
         */
        public Builder issuedAfter(String issuedAfter) {
            this.issuedAfter = OptionalNullable.of(issuedAfter);
            return this;
        }

        /**
         * UnSetter for issuedAfter.
         * @return Builder
         */
        public Builder unsetIssuedAfter() {
            issuedAfter = null;
            return this;
        }

        /**
         * Setter for pANEndsWith.
         * @param  pANEndsWith  String value for pANEndsWith.
         * @return Builder
         */
        public Builder pANEndsWith(String pANEndsWith) {
            this.pANEndsWith = OptionalNullable.of(pANEndsWith);
            return this;
        }

        /**
         * UnSetter for pANEndsWith.
         * @return Builder
         */
        public Builder unsetPANEndsWith() {
            pANEndsWith = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  List of String value for driverName.
         * @return Builder
         */
        public Builder driverName(List<String> driverName) {
            this.driverName = driverName;
            return this;
        }

        /**
         * Setter for vehicleRegistrationNumber.
         * @param  vehicleRegistrationNumber  List of String value for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder vehicleRegistrationNumber(List<String> vehicleRegistrationNumber) {
            this.vehicleRegistrationNumber = vehicleRegistrationNumber;
            return this;
        }

        /**
         * Setter for includeCards.
         * @param  includeCards  List of SearchCard value for includeCards.
         * @return Builder
         */
        public Builder includeCards(List<SearchCard> includeCards) {
            this.includeCards = includeCards;
            return this;
        }

        /**
         * Setter for excludeCards.
         * @param  excludeCards  List of SearchCard value for excludeCards.
         * @return Builder
         */
        public Builder excludeCards(List<SearchCard> excludeCards) {
            this.excludeCards = excludeCards;
            return this;
        }

        /**
         * Setter for excludeBundleId.
         * @param  excludeBundleId  String value for excludeBundleId.
         * @return Builder
         */
        public Builder excludeBundleId(String excludeBundleId) {
            this.excludeBundleId = OptionalNullable.of(excludeBundleId);
            return this;
        }

        /**
         * UnSetter for excludeBundleId.
         * @return Builder
         */
        public Builder unsetExcludeBundleId() {
            excludeBundleId = null;
            return this;
        }

        /**
         * Setter for cardSegment.
         * @param  cardSegment  String value for cardSegment.
         * @return Builder
         */
        public Builder cardSegment(String cardSegment) {
            this.cardSegment = OptionalNullable.of(cardSegment);
            return this;
        }

        /**
         * UnSetter for cardSegment.
         * @return Builder
         */
        public Builder unsetCardSegment() {
            cardSegment = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryCode.
         * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
         * @return Builder
         */
        public Builder purchaseCategoryCode(String purchaseCategoryCode) {
            this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryCode.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryCode() {
            purchaseCategoryCode = null;
            return this;
        }

        /**
         * Setter for cardTypeCode.
         * @param  cardTypeCode  String value for cardTypeCode.
         * @return Builder
         */
        public Builder cardTypeCode(String cardTypeCode) {
            this.cardTypeCode = OptionalNullable.of(cardTypeCode);
            return this;
        }

        /**
         * UnSetter for cardTypeCode.
         * @return Builder
         */
        public Builder unsetCardTypeCode() {
            cardTypeCode = null;
            return this;
        }

        /**
         * Setter for excludePendingRenewalCards.
         * @param  excludePendingRenewalCards  Boolean value for excludePendingRenewalCards.
         * @return Builder
         */
        public Builder excludePendingRenewalCards(Boolean excludePendingRenewalCards) {
            this.excludePendingRenewalCards = excludePendingRenewalCards;
            return this;
        }

        /**
         * Setter for excludeCancelledCards.
         * @param  excludeCancelledCards  Boolean value for excludeCancelledCards.
         * @return Builder
         */
        public Builder excludeCancelledCards(Boolean excludeCancelledCards) {
            this.excludeCancelledCards = excludeCancelledCards;
            return this;
        }

        /**
         * Setter for excludeReplacedCards.
         * @param  excludeReplacedCards  Boolean value for excludeReplacedCards.
         * @return Builder
         */
        public Builder excludeReplacedCards(Boolean excludeReplacedCards) {
            this.excludeReplacedCards = excludeReplacedCards;
            return this;
        }

        /**
         * Setter for excludeFraudCards.
         * @param  excludeFraudCards  Boolean value for excludeFraudCards.
         * @return Builder
         */
        public Builder excludeFraudCards(Boolean excludeFraudCards) {
            this.excludeFraudCards = excludeFraudCards;
            return this;
        }

        /**
         * Setter for excludeCardGroupId.
         * @param  excludeCardGroupId  Integer value for excludeCardGroupId.
         * @return Builder
         */
        public Builder excludeCardGroupId(Integer excludeCardGroupId) {
            this.excludeCardGroupId = OptionalNullable.of(excludeCardGroupId);
            return this;
        }

        /**
         * UnSetter for excludeCardGroupId.
         * @return Builder
         */
        public Builder unsetExcludeCardGroupId() {
            excludeCardGroupId = null;
            return this;
        }

        /**
         * Setter for excludeCardGroupName.
         * @param  excludeCardGroupName  String value for excludeCardGroupName.
         * @return Builder
         */
        public Builder excludeCardGroupName(String excludeCardGroupName) {
            this.excludeCardGroupName = OptionalNullable.of(excludeCardGroupName);
            return this;
        }

        /**
         * UnSetter for excludeCardGroupName.
         * @return Builder
         */
        public Builder unsetExcludeCardGroupName() {
            excludeCardGroupName = null;
            return this;
        }

        /**
         * Setter for creationDate.
         * @param  creationDate  String value for creationDate.
         * @return Builder
         */
        public Builder creationDate(String creationDate) {
            this.creationDate = OptionalNullable.of(creationDate);
            return this;
        }

        /**
         * UnSetter for creationDate.
         * @return Builder
         */
        public Builder unsetCreationDate() {
            creationDate = null;
            return this;
        }

        /**
         * Setter for effectiveDate.
         * @param  effectiveDate  String value for effectiveDate.
         * @return Builder
         */
        public Builder effectiveDate(String effectiveDate) {
            this.effectiveDate = OptionalNullable.of(effectiveDate);
            return this;
        }

        /**
         * UnSetter for effectiveDate.
         * @return Builder
         */
        public Builder unsetEffectiveDate() {
            effectiveDate = null;
            return this;
        }

        /**
         * Setter for network.
         * @param  network  String value for network.
         * @return Builder
         */
        public Builder network(String network) {
            this.network = OptionalNullable.of(network);
            return this;
        }

        /**
         * UnSetter for network.
         * @return Builder
         */
        public Builder unsetNetwork() {
            network = null;
            return this;
        }

        /**
         * Setter for coverage.
         * @param  coverage  String value for coverage.
         * @return Builder
         */
        public Builder coverage(String coverage) {
            this.coverage = OptionalNullable.of(coverage);
            return this;
        }

        /**
         * UnSetter for coverage.
         * @return Builder
         */
        public Builder unsetCoverage() {
            coverage = null;
            return this;
        }

        /**
         * Setter for expiryMonth.
         * @param  expiryMonth  String value for expiryMonth.
         * @return Builder
         */
        public Builder expiryMonth(String expiryMonth) {
            this.expiryMonth = OptionalNullable.of(expiryMonth);
            return this;
        }

        /**
         * UnSetter for expiryMonth.
         * @return Builder
         */
        public Builder unsetExpiryMonth() {
            expiryMonth = null;
            return this;
        }

        /**
         * Setter for excludeOldCards.
         * @param  excludeOldCards  Boolean value for excludeOldCards.
         * @return Builder
         */
        public Builder excludeOldCards(Boolean excludeOldCards) {
            this.excludeOldCards = excludeOldCards;
            return this;
        }

        /**
         * Setter for reissueSetting.
         * @param  reissueSetting  String value for reissueSetting.
         * @return Builder
         */
        public Builder reissueSetting(String reissueSetting) {
            this.reissueSetting = OptionalNullable.of(reissueSetting);
            return this;
        }

        /**
         * UnSetter for reissueSetting.
         * @return Builder
         */
        public Builder unsetReissueSetting() {
            reissueSetting = null;
            return this;
        }

        /**
         * Builds a new {@link SummaryRequest} object using the set fields.
         * @return {@link SummaryRequest}
         */
        public SummaryRequest build() {
            return new SummaryRequest(cardStatus, requestId, accountId, accountNumber, colCoCode,
                    colCoCountryCode, colCoId, payerId, payerNumber, cardGroupId, cardGroupName,
                    expiringInDays, issuedAfter, pANEndsWith, driverName, vehicleRegistrationNumber,
                    includeCards, excludeCards, excludeBundleId, cardSegment, purchaseCategoryCode,
                    cardTypeCode, excludePendingRenewalCards, excludeCancelledCards,
                    excludeReplacedCards, excludeFraudCards, excludeCardGroupId,
                    excludeCardGroupName, creationDate, effectiveDate, network, coverage,
                    expiryMonth, excludeOldCards, reissueSetting);
        }
    }
}
