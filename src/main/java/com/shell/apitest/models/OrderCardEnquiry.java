/*
 * ShellCardManagementAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for OrderCardEnquiry type.
 */
public class OrderCardEnquiry {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<Integer> bCOReference;
    private OptionalNullable<Integer> bCORowNumber;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> cardTypeCode;
    private OptionalNullable<Integer> cardTypeId;
    private OptionalNullable<String> cardTypeName;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> errorCode;
    private OptionalNullable<String> errorDescription;
    private OptionalNullable<String> gatewaySyncErrorCode;
    private OptionalNullable<String> gatewaySyncErrorDescription;
    private OptionalNullable<String> gatewaySyncStatus;
    private Integer mainReference;
    private Integer orderCardReference;
    private OptionalNullable<String> orderStatus;
    private Integer payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> processedDate;
    private OptionalNullable<String> purchaseCategoryCode;
    private OptionalNullable<Integer> purchaseCategoryId;
    private OptionalNullable<String> purchaseCategoryName;
    private OptionalNullable<String> submittedDate;
    private OptionalNullable<String> syncProcessedDate;
    private OptionalNullable<String> syncRequestedDate;
    private OptionalNullable<String> vRN;
    private OptionalNullable<String> orderRequestId;
    private OptionalNullable<String> expiryDate;
    private OptionalNullable<String> clientReferenceId;
    private OptionalNullable<String> statusDescription;
    private OptionalNullable<Integer> colCoId;

    /**
     * Default constructor.
     */
    public OrderCardEnquiry() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  bCOReference  Integer value for bCOReference.
     * @param  bCORowNumber  Integer value for bCORowNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  driverName  String value for driverName.
     * @param  errorCode  String value for errorCode.
     * @param  errorDescription  String value for errorDescription.
     * @param  gatewaySyncErrorCode  String value for gatewaySyncErrorCode.
     * @param  gatewaySyncErrorDescription  String value for gatewaySyncErrorDescription.
     * @param  gatewaySyncStatus  String value for gatewaySyncStatus.
     * @param  mainReference  Integer value for mainReference.
     * @param  orderCardReference  Integer value for orderCardReference.
     * @param  orderStatus  String value for orderStatus.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  processedDate  String value for processedDate.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  purchaseCategoryName  String value for purchaseCategoryName.
     * @param  submittedDate  String value for submittedDate.
     * @param  syncProcessedDate  String value for syncProcessedDate.
     * @param  syncRequestedDate  String value for syncRequestedDate.
     * @param  vRN  String value for vRN.
     * @param  orderRequestId  String value for orderRequestId.
     * @param  expiryDate  String value for expiryDate.
     * @param  clientReferenceId  String value for clientReferenceId.
     * @param  statusDescription  String value for statusDescription.
     * @param  colCoId  Integer value for colCoId.
     */
    public OrderCardEnquiry(
            Integer accountId,
            String accountNumber,
            Integer bCOReference,
            Integer bCORowNumber,
            Integer cardGroupId,
            String cardGroupName,
            Integer cardId,
            String cardPAN,
            String cardTypeCode,
            Integer cardTypeId,
            String cardTypeName,
            String driverName,
            String errorCode,
            String errorDescription,
            String gatewaySyncErrorCode,
            String gatewaySyncErrorDescription,
            String gatewaySyncStatus,
            Integer mainReference,
            Integer orderCardReference,
            String orderStatus,
            Integer payerId,
            String payerNumber,
            String processedDate,
            String purchaseCategoryCode,
            Integer purchaseCategoryId,
            String purchaseCategoryName,
            String submittedDate,
            String syncProcessedDate,
            String syncRequestedDate,
            String vRN,
            String orderRequestId,
            String expiryDate,
            String clientReferenceId,
            String statusDescription,
            Integer colCoId) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.bCOReference = OptionalNullable.of(bCOReference);
        this.bCORowNumber = OptionalNullable.of(bCORowNumber);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.cardId = OptionalNullable.of(cardId);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
        this.cardTypeId = OptionalNullable.of(cardTypeId);
        this.cardTypeName = OptionalNullable.of(cardTypeName);
        this.driverName = OptionalNullable.of(driverName);
        this.errorCode = OptionalNullable.of(errorCode);
        this.errorDescription = OptionalNullable.of(errorDescription);
        this.gatewaySyncErrorCode = OptionalNullable.of(gatewaySyncErrorCode);
        this.gatewaySyncErrorDescription = OptionalNullable.of(gatewaySyncErrorDescription);
        this.gatewaySyncStatus = OptionalNullable.of(gatewaySyncStatus);
        this.mainReference = mainReference;
        this.orderCardReference = orderCardReference;
        this.orderStatus = OptionalNullable.of(orderStatus);
        this.payerId = payerId;
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.processedDate = OptionalNullable.of(processedDate);
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
        this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
        this.submittedDate = OptionalNullable.of(submittedDate);
        this.syncProcessedDate = OptionalNullable.of(syncProcessedDate);
        this.syncRequestedDate = OptionalNullable.of(syncRequestedDate);
        this.vRN = OptionalNullable.of(vRN);
        this.orderRequestId = OptionalNullable.of(orderRequestId);
        this.expiryDate = OptionalNullable.of(expiryDate);
        this.clientReferenceId = OptionalNullable.of(clientReferenceId);
        this.statusDescription = OptionalNullable.of(statusDescription);
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  bCOReference  Integer value for bCOReference.
     * @param  bCORowNumber  Integer value for bCORowNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  driverName  String value for driverName.
     * @param  errorCode  String value for errorCode.
     * @param  errorDescription  String value for errorDescription.
     * @param  gatewaySyncErrorCode  String value for gatewaySyncErrorCode.
     * @param  gatewaySyncErrorDescription  String value for gatewaySyncErrorDescription.
     * @param  gatewaySyncStatus  String value for gatewaySyncStatus.
     * @param  mainReference  Integer value for mainReference.
     * @param  orderCardReference  Integer value for orderCardReference.
     * @param  orderStatus  String value for orderStatus.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  processedDate  String value for processedDate.
     * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
     * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
     * @param  purchaseCategoryName  String value for purchaseCategoryName.
     * @param  submittedDate  String value for submittedDate.
     * @param  syncProcessedDate  String value for syncProcessedDate.
     * @param  syncRequestedDate  String value for syncRequestedDate.
     * @param  vRN  String value for vRN.
     * @param  orderRequestId  String value for orderRequestId.
     * @param  expiryDate  String value for expiryDate.
     * @param  clientReferenceId  String value for clientReferenceId.
     * @param  statusDescription  String value for statusDescription.
     * @param  colCoId  Integer value for colCoId.
     */

    protected OrderCardEnquiry(OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<Integer> bCOReference,
            OptionalNullable<Integer> bCORowNumber, OptionalNullable<Integer> cardGroupId,
            OptionalNullable<String> cardGroupName, OptionalNullable<Integer> cardId,
            OptionalNullable<String> cardPAN, OptionalNullable<String> cardTypeCode,
            OptionalNullable<Integer> cardTypeId, OptionalNullable<String> cardTypeName,
            OptionalNullable<String> driverName, OptionalNullable<String> errorCode,
            OptionalNullable<String> errorDescription,
            OptionalNullable<String> gatewaySyncErrorCode,
            OptionalNullable<String> gatewaySyncErrorDescription,
            OptionalNullable<String> gatewaySyncStatus, Integer mainReference,
            Integer orderCardReference, OptionalNullable<String> orderStatus, Integer payerId,
            OptionalNullable<String> payerNumber, OptionalNullable<String> processedDate,
            OptionalNullable<String> purchaseCategoryCode,
            OptionalNullable<Integer> purchaseCategoryId,
            OptionalNullable<String> purchaseCategoryName, OptionalNullable<String> submittedDate,
            OptionalNullable<String> syncProcessedDate, OptionalNullable<String> syncRequestedDate,
            OptionalNullable<String> vRN, OptionalNullable<String> orderRequestId,
            OptionalNullable<String> expiryDate, OptionalNullable<String> clientReferenceId,
            OptionalNullable<String> statusDescription, OptionalNullable<Integer> colCoId) {
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.bCOReference = bCOReference;
        this.bCORowNumber = bCORowNumber;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.cardId = cardId;
        this.cardPAN = cardPAN;
        this.cardTypeCode = cardTypeCode;
        this.cardTypeId = cardTypeId;
        this.cardTypeName = cardTypeName;
        this.driverName = driverName;
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
        this.gatewaySyncErrorCode = gatewaySyncErrorCode;
        this.gatewaySyncErrorDescription = gatewaySyncErrorDescription;
        this.gatewaySyncStatus = gatewaySyncStatus;
        this.mainReference = mainReference;
        this.orderCardReference = orderCardReference;
        this.orderStatus = orderStatus;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.processedDate = processedDate;
        this.purchaseCategoryCode = purchaseCategoryCode;
        this.purchaseCategoryId = purchaseCategoryId;
        this.purchaseCategoryName = purchaseCategoryName;
        this.submittedDate = submittedDate;
        this.syncProcessedDate = syncProcessedDate;
        this.syncRequestedDate = syncRequestedDate;
        this.vRN = vRN;
        this.orderRequestId = orderRequestId;
        this.expiryDate = expiryDate;
        this.clientReferenceId = clientReferenceId;
        this.statusDescription = statusDescription;
        this.colCoId = colCoId;
    }

    /**
     * Internal Getter for AccountId.
     * Account ID on the card request
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account ID on the card request
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account ID on the card request
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account ID on the card request
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * AccountNumber
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * AccountNumber
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * AccountNumber
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * AccountNumber
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for BCOReference.
     * Bulk card order request refrence numer.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     * @return Returns the Internal Integer
     */
    @JsonGetter("BCOReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBCOReference() {
        return this.bCOReference;
    }

    /**
     * Getter for BCOReference.
     * Bulk card order request refrence numer.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     * @return Returns the Integer
     */
    public Integer getBCOReference() {
        return OptionalNullable.getFrom(bCOReference);
    }

    /**
     * Setter for BCOReference.
     * Bulk card order request refrence numer.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     * @param bCOReference Value for Integer
     */
    @JsonSetter("BCOReference")
    public void setBCOReference(Integer bCOReference) {
        this.bCOReference = OptionalNullable.of(bCOReference);
    }

    /**
     * UnSetter for BCOReference.
     * Bulk card order request refrence numer.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     */
    public void unsetBCOReference() {
        bCOReference = null;
    }

    /**
     * Internal Getter for BCORowNumber.
     * Row number of the request in the BCO file.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     * @return Returns the Internal Integer
     */
    @JsonGetter("BCORowNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBCORowNumber() {
        return this.bCORowNumber;
    }

    /**
     * Getter for BCORowNumber.
     * Row number of the request in the BCO file.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     * @return Returns the Integer
     */
    public Integer getBCORowNumber() {
        return OptionalNullable.getFrom(bCORowNumber);
    }

    /**
     * Setter for BCORowNumber.
     * Row number of the request in the BCO file.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     * @param bCORowNumber Value for Integer
     */
    @JsonSetter("BCORowNumber")
    public void setBCORowNumber(Integer bCORowNumber) {
        this.bCORowNumber = OptionalNullable.of(bCORowNumber);
    }

    /**
     * UnSetter for BCORowNumber.
     * Row number of the request in the BCO file.&lt;br /&gt; This field will be null if the order is not
     * through BCO.
     */
    public void unsetBCORowNumber() {
        bCORowNumber = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group ID
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group ID
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group ID
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card group name
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card group name
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card group name
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card group name
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card Id.&lt;br /&gt; The field will be null if the card order request is not successly
     * processed.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card Id.&lt;br /&gt; The field will be null if the card order request is not successly
     * processed.
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card Id.&lt;br /&gt; The field will be null if the card order request is not successly
     * processed.
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card Id.&lt;br /&gt; The field will be null if the card order request is not successly
     * processed.
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Card PAN.&lt;br /&gt; Mask PAN (Mask all digits except the Last 6 digits of the PAN).&lt;br /&gt; The
     * field will be null if the card order request is not successly processed.
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Card PAN.&lt;br /&gt; Mask PAN (Mask all digits except the Last 6 digits of the PAN).&lt;br /&gt; The
     * field will be null if the card order request is not successly processed.
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Card PAN.&lt;br /&gt; Mask PAN (Mask all digits except the Last 6 digits of the PAN).&lt;br /&gt; The
     * field will be null if the card order request is not successly processed.
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Card PAN.&lt;br /&gt; Mask PAN (Mask all digits except the Last 6 digits of the PAN).&lt;br /&gt; The
     * field will be null if the card order request is not successly processed.
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for CardTypeCode.
     * CardTypeCode&lt;br /&gt; ISO code of the card i.e. first 7 digits of the PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeCode() {
        return this.cardTypeCode;
    }

    /**
     * Getter for CardTypeCode.
     * CardTypeCode&lt;br /&gt; ISO code of the card i.e. first 7 digits of the PAN
     * @return Returns the String
     */
    public String getCardTypeCode() {
        return OptionalNullable.getFrom(cardTypeCode);
    }

    /**
     * Setter for CardTypeCode.
     * CardTypeCode&lt;br /&gt; ISO code of the card i.e. first 7 digits of the PAN
     * @param cardTypeCode Value for String
     */
    @JsonSetter("CardTypeCode")
    public void setCardTypeCode(String cardTypeCode) {
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
    }

    /**
     * UnSetter for CardTypeCode.
     * CardTypeCode&lt;br /&gt; ISO code of the card i.e. first 7 digits of the PAN
     */
    public void unsetCardTypeCode() {
        cardTypeCode = null;
    }

    /**
     * Internal Getter for CardTypeId.
     * CardTypeId
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardTypeId() {
        return this.cardTypeId;
    }

    /**
     * Getter for CardTypeId.
     * CardTypeId
     * @return Returns the Integer
     */
    public Integer getCardTypeId() {
        return OptionalNullable.getFrom(cardTypeId);
    }

    /**
     * Setter for CardTypeId.
     * CardTypeId
     * @param cardTypeId Value for Integer
     */
    @JsonSetter("CardTypeId")
    public void setCardTypeId(Integer cardTypeId) {
        this.cardTypeId = OptionalNullable.of(cardTypeId);
    }

    /**
     * UnSetter for CardTypeId.
     * CardTypeId
     */
    public void unsetCardTypeId() {
        cardTypeId = null;
    }

    /**
     * Internal Getter for CardTypeName.
     * CardTypeName
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeName() {
        return this.cardTypeName;
    }

    /**
     * Getter for CardTypeName.
     * CardTypeName
     * @return Returns the String
     */
    public String getCardTypeName() {
        return OptionalNullable.getFrom(cardTypeName);
    }

    /**
     * Setter for CardTypeName.
     * CardTypeName
     * @param cardTypeName Value for String
     */
    @JsonSetter("CardTypeName")
    public void setCardTypeName(String cardTypeName) {
        this.cardTypeName = OptionalNullable.of(cardTypeName);
    }

    /**
     * UnSetter for CardTypeName.
     * CardTypeName
     */
    public void unsetCardTypeName() {
        cardTypeName = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver name
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver name
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver name
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver name
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for ErrorCode.
     * Error code for the order card request.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     * @return Returns the Internal String
     */
    @JsonGetter("ErrorCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetErrorCode() {
        return this.errorCode;
    }

    /**
     * Getter for ErrorCode.
     * Error code for the order card request.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     * @return Returns the String
     */
    public String getErrorCode() {
        return OptionalNullable.getFrom(errorCode);
    }

    /**
     * Setter for ErrorCode.
     * Error code for the order card request.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     * @param errorCode Value for String
     */
    @JsonSetter("ErrorCode")
    public void setErrorCode(String errorCode) {
        this.errorCode = OptionalNullable.of(errorCode);
    }

    /**
     * UnSetter for ErrorCode.
     * Error code for the order card request.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     */
    public void unsetErrorCode() {
        errorCode = null;
    }

    /**
     * Internal Getter for ErrorDescription.
     * Error description for the order card request.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     * @return Returns the Internal String
     */
    @JsonGetter("ErrorDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetErrorDescription() {
        return this.errorDescription;
    }

    /**
     * Getter for ErrorDescription.
     * Error description for the order card request.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     * @return Returns the String
     */
    public String getErrorDescription() {
        return OptionalNullable.getFrom(errorDescription);
    }

    /**
     * Setter for ErrorDescription.
     * Error description for the order card request.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     * @param errorDescription Value for String
     */
    @JsonSetter("ErrorDescription")
    public void setErrorDescription(String errorDescription) {
        this.errorDescription = OptionalNullable.of(errorDescription);
    }

    /**
     * UnSetter for ErrorDescription.
     * Error description for the order card request.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     */
    public void unsetErrorDescription() {
        errorDescription = null;
    }

    /**
     * Internal Getter for GatewaySyncErrorCode.
     * Error code for the Gateway sync error.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     * @return Returns the Internal String
     */
    @JsonGetter("GatewaySyncErrorCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewaySyncErrorCode() {
        return this.gatewaySyncErrorCode;
    }

    /**
     * Getter for GatewaySyncErrorCode.
     * Error code for the Gateway sync error.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     * @return Returns the String
     */
    public String getGatewaySyncErrorCode() {
        return OptionalNullable.getFrom(gatewaySyncErrorCode);
    }

    /**
     * Setter for GatewaySyncErrorCode.
     * Error code for the Gateway sync error.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     * @param gatewaySyncErrorCode Value for String
     */
    @JsonSetter("GatewaySyncErrorCode")
    public void setGatewaySyncErrorCode(String gatewaySyncErrorCode) {
        this.gatewaySyncErrorCode = OptionalNullable.of(gatewaySyncErrorCode);
    }

    /**
     * UnSetter for GatewaySyncErrorCode.
     * Error code for the Gateway sync error.&lt;br /&gt; The value will be 0000 if it is processed
     * without errors.
     */
    public void unsetGatewaySyncErrorCode() {
        gatewaySyncErrorCode = null;
    }

    /**
     * Internal Getter for GatewaySyncErrorDescription.
     * Error description for the Gateway sync error.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     * @return Returns the Internal String
     */
    @JsonGetter("GatewaySyncErrorDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewaySyncErrorDescription() {
        return this.gatewaySyncErrorDescription;
    }

    /**
     * Getter for GatewaySyncErrorDescription.
     * Error description for the Gateway sync error.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     * @return Returns the String
     */
    public String getGatewaySyncErrorDescription() {
        return OptionalNullable.getFrom(gatewaySyncErrorDescription);
    }

    /**
     * Setter for GatewaySyncErrorDescription.
     * Error description for the Gateway sync error.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     * @param gatewaySyncErrorDescription Value for String
     */
    @JsonSetter("GatewaySyncErrorDescription")
    public void setGatewaySyncErrorDescription(String gatewaySyncErrorDescription) {
        this.gatewaySyncErrorDescription = OptionalNullable.of(gatewaySyncErrorDescription);
    }

    /**
     * UnSetter for GatewaySyncErrorDescription.
     * Error description for the Gateway sync error.&lt;br /&gt; The value will be empty string if it is
     * processed without errors.
     */
    public void unsetGatewaySyncErrorDescription() {
        gatewaySyncErrorDescription = null;
    }

    /**
     * Internal Getter for GatewaySyncStatus.
     * GatewaySyncStatus&lt;br /&gt; Status of the card sync with CFGW.&lt;br /&gt; Possible values:&lt;br /&gt;
     * -Success&lt;br /&gt; -Failed&lt;br /&gt; -In Progress&lt;br /&gt; -Not Submitted
     * @return Returns the Internal String
     */
    @JsonGetter("GatewaySyncStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGatewaySyncStatus() {
        return this.gatewaySyncStatus;
    }

    /**
     * Getter for GatewaySyncStatus.
     * GatewaySyncStatus&lt;br /&gt; Status of the card sync with CFGW.&lt;br /&gt; Possible values:&lt;br /&gt;
     * -Success&lt;br /&gt; -Failed&lt;br /&gt; -In Progress&lt;br /&gt; -Not Submitted
     * @return Returns the String
     */
    public String getGatewaySyncStatus() {
        return OptionalNullable.getFrom(gatewaySyncStatus);
    }

    /**
     * Setter for GatewaySyncStatus.
     * GatewaySyncStatus&lt;br /&gt; Status of the card sync with CFGW.&lt;br /&gt; Possible values:&lt;br /&gt;
     * -Success&lt;br /&gt; -Failed&lt;br /&gt; -In Progress&lt;br /&gt; -Not Submitted
     * @param gatewaySyncStatus Value for String
     */
    @JsonSetter("GatewaySyncStatus")
    public void setGatewaySyncStatus(String gatewaySyncStatus) {
        this.gatewaySyncStatus = OptionalNullable.of(gatewaySyncStatus);
    }

    /**
     * UnSetter for GatewaySyncStatus.
     * GatewaySyncStatus&lt;br /&gt; Status of the card sync with CFGW.&lt;br /&gt; Possible values:&lt;br /&gt;
     * -Success&lt;br /&gt; -Failed&lt;br /&gt; -In Progress&lt;br /&gt; -Not Submitted
     */
    public void unsetGatewaySyncStatus() {
        gatewaySyncStatus = null;
    }

    /**
     * Getter for MainReference.
     * Main reference number for the order card request.&lt;br /&gt; This field will be null if the order
     * is through BCO.
     * @return Returns the Integer
     */
    @JsonGetter("MainReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMainReference() {
        return mainReference;
    }

    /**
     * Setter for MainReference.
     * Main reference number for the order card request.&lt;br /&gt; This field will be null if the order
     * is through BCO.
     * @param mainReference Value for Integer
     */
    @JsonSetter("MainReference")
    public void setMainReference(Integer mainReference) {
        this.mainReference = mainReference;
    }

    /**
     * Getter for OrderCardReference.
     * Indivitual card reference number for the order card request.&lt;br /&gt; This field will be null if
     * the order is through BCO.
     * @return Returns the Integer
     */
    @JsonGetter("OrderCardReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOrderCardReference() {
        return orderCardReference;
    }

    /**
     * Setter for OrderCardReference.
     * Indivitual card reference number for the order card request.&lt;br /&gt; This field will be null if
     * the order is through BCO.
     * @param orderCardReference Value for Integer
     */
    @JsonSetter("OrderCardReference")
    public void setOrderCardReference(Integer orderCardReference) {
        this.orderCardReference = orderCardReference;
    }

    /**
     * Internal Getter for OrderStatus.
     * Order status.&lt;br /&gt; Possible values:&lt;br /&gt; P Pending&lt;br /&gt; I Picked up for processing&lt;br /&gt;
     * PX	Failed at Queue but retry attempts pending&lt;br /&gt; X	Failed at Queue&lt;br /&gt; R	Card is
     * processed, awaiting for PAN update.&lt;br /&gt; S	Processed&lt;br /&gt; F	Failed
     * @return Returns the Internal String
     */
    @JsonGetter("OrderStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOrderStatus() {
        return this.orderStatus;
    }

    /**
     * Getter for OrderStatus.
     * Order status.&lt;br /&gt; Possible values:&lt;br /&gt; P Pending&lt;br /&gt; I Picked up for processing&lt;br /&gt;
     * PX	Failed at Queue but retry attempts pending&lt;br /&gt; X	Failed at Queue&lt;br /&gt; R	Card is
     * processed, awaiting for PAN update.&lt;br /&gt; S	Processed&lt;br /&gt; F	Failed
     * @return Returns the String
     */
    public String getOrderStatus() {
        return OptionalNullable.getFrom(orderStatus);
    }

    /**
     * Setter for OrderStatus.
     * Order status.&lt;br /&gt; Possible values:&lt;br /&gt; P Pending&lt;br /&gt; I Picked up for processing&lt;br /&gt;
     * PX	Failed at Queue but retry attempts pending&lt;br /&gt; X	Failed at Queue&lt;br /&gt; R	Card is
     * processed, awaiting for PAN update.&lt;br /&gt; S	Processed&lt;br /&gt; F	Failed
     * @param orderStatus Value for String
     */
    @JsonSetter("OrderStatus")
    public void setOrderStatus(String orderStatus) {
        this.orderStatus = OptionalNullable.of(orderStatus);
    }

    /**
     * UnSetter for OrderStatus.
     * Order status.&lt;br /&gt; Possible values:&lt;br /&gt; P Pending&lt;br /&gt; I Picked up for processing&lt;br /&gt;
     * PX	Failed at Queue but retry attempts pending&lt;br /&gt; X	Failed at Queue&lt;br /&gt; R	Card is
     * processed, awaiting for PAN update.&lt;br /&gt; S	Processed&lt;br /&gt; F	Failed
     */
    public void unsetOrderStatus() {
        orderStatus = null;
    }

    /**
     * Getter for PayerId.
     * Payer ID on the card request.
     * @return Returns the Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPayerId() {
        return payerId;
    }

    /**
     * Setter for PayerId.
     * Payer ID on the card request.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = payerId;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number on the card request
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number on the card request
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number on the card request
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number on the card request
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for ProcessedDate.
     * Date and time (in cutomers local time) when the card order request is processed&lt;br /&gt; Format:
     * yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to appropriate
     * date/time type.
     * @return Returns the Internal String
     */
    @JsonGetter("ProcessedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProcessedDate() {
        return this.processedDate;
    }

    /**
     * Getter for ProcessedDate.
     * Date and time (in cutomers local time) when the card order request is processed&lt;br /&gt; Format:
     * yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to appropriate
     * date/time type.
     * @return Returns the String
     */
    public String getProcessedDate() {
        return OptionalNullable.getFrom(processedDate);
    }

    /**
     * Setter for ProcessedDate.
     * Date and time (in cutomers local time) when the card order request is processed&lt;br /&gt; Format:
     * yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to appropriate
     * date/time type.
     * @param processedDate Value for String
     */
    @JsonSetter("ProcessedDate")
    public void setProcessedDate(String processedDate) {
        this.processedDate = OptionalNullable.of(processedDate);
    }

    /**
     * UnSetter for ProcessedDate.
     * Date and time (in cutomers local time) when the card order request is processed&lt;br /&gt; Format:
     * yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to appropriate
     * date/time type.
     */
    public void unsetProcessedDate() {
        processedDate = null;
    }

    /**
     * Internal Getter for PurchaseCategoryCode.
     * PurchaseCategoryCode
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryCode() {
        return this.purchaseCategoryCode;
    }

    /**
     * Getter for PurchaseCategoryCode.
     * PurchaseCategoryCode
     * @return Returns the String
     */
    public String getPurchaseCategoryCode() {
        return OptionalNullable.getFrom(purchaseCategoryCode);
    }

    /**
     * Setter for PurchaseCategoryCode.
     * PurchaseCategoryCode
     * @param purchaseCategoryCode Value for String
     */
    @JsonSetter("PurchaseCategoryCode")
    public void setPurchaseCategoryCode(String purchaseCategoryCode) {
        this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
    }

    /**
     * UnSetter for PurchaseCategoryCode.
     * PurchaseCategoryCode
     */
    public void unsetPurchaseCategoryCode() {
        purchaseCategoryCode = null;
    }

    /**
     * Internal Getter for PurchaseCategoryId.
     * PurchaseCategoryId &lt;br /&gt; Note: Not Purchase code. This is a unique purchase category id
     * assigned
     * @return Returns the Internal Integer
     */
    @JsonGetter("PurchaseCategoryId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPurchaseCategoryId() {
        return this.purchaseCategoryId;
    }

    /**
     * Getter for PurchaseCategoryId.
     * PurchaseCategoryId &lt;br /&gt; Note: Not Purchase code. This is a unique purchase category id
     * assigned
     * @return Returns the Integer
     */
    public Integer getPurchaseCategoryId() {
        return OptionalNullable.getFrom(purchaseCategoryId);
    }

    /**
     * Setter for PurchaseCategoryId.
     * PurchaseCategoryId &lt;br /&gt; Note: Not Purchase code. This is a unique purchase category id
     * assigned
     * @param purchaseCategoryId Value for Integer
     */
    @JsonSetter("PurchaseCategoryId")
    public void setPurchaseCategoryId(Integer purchaseCategoryId) {
        this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
    }

    /**
     * UnSetter for PurchaseCategoryId.
     * PurchaseCategoryId &lt;br /&gt; Note: Not Purchase code. This is a unique purchase category id
     * assigned
     */
    public void unsetPurchaseCategoryId() {
        purchaseCategoryId = null;
    }

    /**
     * Internal Getter for PurchaseCategoryName.
     * PurchaseCategoryName
     * @return Returns the Internal String
     */
    @JsonGetter("PurchaseCategoryName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchaseCategoryName() {
        return this.purchaseCategoryName;
    }

    /**
     * Getter for PurchaseCategoryName.
     * PurchaseCategoryName
     * @return Returns the String
     */
    public String getPurchaseCategoryName() {
        return OptionalNullable.getFrom(purchaseCategoryName);
    }

    /**
     * Setter for PurchaseCategoryName.
     * PurchaseCategoryName
     * @param purchaseCategoryName Value for String
     */
    @JsonSetter("PurchaseCategoryName")
    public void setPurchaseCategoryName(String purchaseCategoryName) {
        this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
    }

    /**
     * UnSetter for PurchaseCategoryName.
     * PurchaseCategoryName
     */
    public void unsetPurchaseCategoryName() {
        purchaseCategoryName = null;
    }

    /**
     * Internal Getter for SubmittedDate.
     * Date and time (in cutomers local time) when the card order request is submitted.&lt;br /&gt;
     * Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to
     * appropriate date/time type.
     * @return Returns the Internal String
     */
    @JsonGetter("SubmittedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSubmittedDate() {
        return this.submittedDate;
    }

    /**
     * Getter for SubmittedDate.
     * Date and time (in cutomers local time) when the card order request is submitted.&lt;br /&gt;
     * Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to
     * appropriate date/time type.
     * @return Returns the String
     */
    public String getSubmittedDate() {
        return OptionalNullable.getFrom(submittedDate);
    }

    /**
     * Setter for SubmittedDate.
     * Date and time (in cutomers local time) when the card order request is submitted.&lt;br /&gt;
     * Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to
     * appropriate date/time type.
     * @param submittedDate Value for String
     */
    @JsonSetter("SubmittedDate")
    public void setSubmittedDate(String submittedDate) {
        this.submittedDate = OptionalNullable.of(submittedDate);
    }

    /**
     * UnSetter for SubmittedDate.
     * Date and time (in cutomers local time) when the card order request is submitted.&lt;br /&gt;
     * Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the string to
     * appropriate date/time type.
     */
    public void unsetSubmittedDate() {
        submittedDate = null;
    }

    /**
     * Internal Getter for SyncProcessedDate.
     * SyncProcessedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * processed.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     * @return Returns the Internal String
     */
    @JsonGetter("SyncProcessedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSyncProcessedDate() {
        return this.syncProcessedDate;
    }

    /**
     * Getter for SyncProcessedDate.
     * SyncProcessedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * processed.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     * @return Returns the String
     */
    public String getSyncProcessedDate() {
        return OptionalNullable.getFrom(syncProcessedDate);
    }

    /**
     * Setter for SyncProcessedDate.
     * SyncProcessedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * processed.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     * @param syncProcessedDate Value for String
     */
    @JsonSetter("SyncProcessedDate")
    public void setSyncProcessedDate(String syncProcessedDate) {
        this.syncProcessedDate = OptionalNullable.of(syncProcessedDate);
    }

    /**
     * UnSetter for SyncProcessedDate.
     * SyncProcessedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * processed.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss&lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     */
    public void unsetSyncProcessedDate() {
        syncProcessedDate = null;
    }

    /**
     * Internal Getter for SyncRequestedDate.
     * SyncRequestedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * submitted.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss &lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     * @return Returns the Internal String
     */
    @JsonGetter("SyncRequestedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSyncRequestedDate() {
        return this.syncRequestedDate;
    }

    /**
     * Getter for SyncRequestedDate.
     * SyncRequestedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * submitted.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss &lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     * @return Returns the String
     */
    public String getSyncRequestedDate() {
        return OptionalNullable.getFrom(syncRequestedDate);
    }

    /**
     * Setter for SyncRequestedDate.
     * SyncRequestedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * submitted.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss &lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     * @param syncRequestedDate Value for String
     */
    @JsonSetter("SyncRequestedDate")
    public void setSyncRequestedDate(String syncRequestedDate) {
        this.syncRequestedDate = OptionalNullable.of(syncRequestedDate);
    }

    /**
     * UnSetter for SyncRequestedDate.
     * SyncRequestedDate&lt;br /&gt; Date and time (in cutomers local time) when the sync card request is
     * submitted.&lt;br /&gt; Format: yyyyMMdd HH:mm:ss &lt;br /&gt; Note: The client application to convert the
     * string to appropriate date/time type.
     */
    public void unsetSyncRequestedDate() {
        syncRequestedDate = null;
    }

    /**
     * Internal Getter for VRN.
     * Vehicle registration number
     * @return Returns the Internal String
     */
    @JsonGetter("VRN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVRN() {
        return this.vRN;
    }

    /**
     * Getter for VRN.
     * Vehicle registration number
     * @return Returns the String
     */
    public String getVRN() {
        return OptionalNullable.getFrom(vRN);
    }

    /**
     * Setter for VRN.
     * Vehicle registration number
     * @param vRN Value for String
     */
    @JsonSetter("VRN")
    public void setVRN(String vRN) {
        this.vRN = OptionalNullable.of(vRN);
    }

    /**
     * UnSetter for VRN.
     * Vehicle registration number
     */
    public void unsetVRN() {
        vRN = null;
    }

    /**
     * Internal Getter for OrderRequestId.
     * Unique Id of the Original Order card request, the status of which is enquired by this API.
     * &lt;br /&gt; This is returned for end to end traceability of a request based on the original Order
     * Card request.
     * @return Returns the Internal String
     */
    @JsonGetter("OrderRequestId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOrderRequestId() {
        return this.orderRequestId;
    }

    /**
     * Getter for OrderRequestId.
     * Unique Id of the Original Order card request, the status of which is enquired by this API.
     * &lt;br /&gt; This is returned for end to end traceability of a request based on the original Order
     * Card request.
     * @return Returns the String
     */
    public String getOrderRequestId() {
        return OptionalNullable.getFrom(orderRequestId);
    }

    /**
     * Setter for OrderRequestId.
     * Unique Id of the Original Order card request, the status of which is enquired by this API.
     * &lt;br /&gt; This is returned for end to end traceability of a request based on the original Order
     * Card request.
     * @param orderRequestId Value for String
     */
    @JsonSetter("OrderRequestId")
    public void setOrderRequestId(String orderRequestId) {
        this.orderRequestId = OptionalNullable.of(orderRequestId);
    }

    /**
     * UnSetter for OrderRequestId.
     * Unique Id of the Original Order card request, the status of which is enquired by this API.
     * &lt;br /&gt; This is returned for end to end traceability of a request based on the original Order
     * Card request.
     */
    public void unsetOrderRequestId() {
        orderRequestId = null;
    }

    /**
     * Internal Getter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: MMyy&lt;br /&gt; (Clients to convert this to appropriate
     * DateTime type.)&lt;br /&gt; Note: This is the Expiry Date saved.&lt;br /&gt; If the Order Card request is
     * still not processed, i.e.PAN is not yet issued, this field will be null or empty. &lt;br /&gt; For
     * a Card Order with a custom Expiry Date passed in the request, this value will be returned
     * after it is updated successfully.
     * @return Returns the Internal String
     */
    @JsonGetter("ExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiryDate() {
        return this.expiryDate;
    }

    /**
     * Getter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: MMyy&lt;br /&gt; (Clients to convert this to appropriate
     * DateTime type.)&lt;br /&gt; Note: This is the Expiry Date saved.&lt;br /&gt; If the Order Card request is
     * still not processed, i.e.PAN is not yet issued, this field will be null or empty. &lt;br /&gt; For
     * a Card Order with a custom Expiry Date passed in the request, this value will be returned
     * after it is updated successfully.
     * @return Returns the String
     */
    public String getExpiryDate() {
        return OptionalNullable.getFrom(expiryDate);
    }

    /**
     * Setter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: MMyy&lt;br /&gt; (Clients to convert this to appropriate
     * DateTime type.)&lt;br /&gt; Note: This is the Expiry Date saved.&lt;br /&gt; If the Order Card request is
     * still not processed, i.e.PAN is not yet issued, this field will be null or empty. &lt;br /&gt; For
     * a Card Order with a custom Expiry Date passed in the request, this value will be returned
     * after it is updated successfully.
     * @param expiryDate Value for String
     */
    @JsonSetter("ExpiryDate")
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = OptionalNullable.of(expiryDate);
    }

    /**
     * UnSetter for ExpiryDate.
     * Expiry date of the card.&lt;br /&gt; Format: MMyy&lt;br /&gt; (Clients to convert this to appropriate
     * DateTime type.)&lt;br /&gt; Note: This is the Expiry Date saved.&lt;br /&gt; If the Order Card request is
     * still not processed, i.e.PAN is not yet issued, this field will be null or empty. &lt;br /&gt; For
     * a Card Order with a custom Expiry Date passed in the request, this value will be returned
     * after it is updated successfully.
     */
    public void unsetExpiryDate() {
        expiryDate = null;
    }

    /**
     * Internal Getter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     * @return Returns the Internal String
     */
    @JsonGetter("ClientReferenceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetClientReferenceId() {
        return this.clientReferenceId;
    }

    /**
     * Getter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     * @return Returns the String
     */
    public String getClientReferenceId() {
        return OptionalNullable.getFrom(clientReferenceId);
    }

    /**
     * Setter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     * @param clientReferenceId Value for String
     */
    @JsonSetter("ClientReferenceId")
    public void setClientReferenceId(String clientReferenceId) {
        this.clientReferenceId = OptionalNullable.of(clientReferenceId);
    }

    /**
     * UnSetter for ClientReferenceId.
     * This is the Client Reference Id of card in the order which needs to be passed by the client.
     */
    public void unsetClientReferenceId() {
        clientReferenceId = null;
    }

    /**
     * Internal Getter for StatusDescription.
     * Order status.&lt;br /&gt; Possible values&lt;br /&gt; Success&lt;br /&gt; Failed&lt;br /&gt; InProgress&lt;br /&gt;
     * @return Returns the Internal String
     */
    @JsonGetter("StatusDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatusDescription() {
        return this.statusDescription;
    }

    /**
     * Getter for StatusDescription.
     * Order status.&lt;br /&gt; Possible values&lt;br /&gt; Success&lt;br /&gt; Failed&lt;br /&gt; InProgress&lt;br /&gt;
     * @return Returns the String
     */
    public String getStatusDescription() {
        return OptionalNullable.getFrom(statusDescription);
    }

    /**
     * Setter for StatusDescription.
     * Order status.&lt;br /&gt; Possible values&lt;br /&gt; Success&lt;br /&gt; Failed&lt;br /&gt; InProgress&lt;br /&gt;
     * @param statusDescription Value for String
     */
    @JsonSetter("StatusDescription")
    public void setStatusDescription(String statusDescription) {
        this.statusDescription = OptionalNullable.of(statusDescription);
    }

    /**
     * UnSetter for StatusDescription.
     * Order status.&lt;br /&gt; Possible values&lt;br /&gt; Success&lt;br /&gt; Failed&lt;br /&gt; InProgress&lt;br /&gt;
     */
    public void unsetStatusDescription() {
        statusDescription = null;
    }

    /**
     * Internal Getter for ColCoId.
     * Colcoid
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Colcoid
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Colcoid
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Colcoid
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Converts this OrderCardEnquiry into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrderCardEnquiry [" + "accountId=" + accountId + ", accountNumber=" + accountNumber
                + ", bCOReference=" + bCOReference + ", bCORowNumber=" + bCORowNumber
                + ", cardGroupId=" + cardGroupId + ", cardGroupName=" + cardGroupName + ", cardId="
                + cardId + ", cardPAN=" + cardPAN + ", cardTypeCode=" + cardTypeCode
                + ", cardTypeId=" + cardTypeId + ", cardTypeName=" + cardTypeName + ", driverName="
                + driverName + ", errorCode=" + errorCode + ", errorDescription=" + errorDescription
                + ", gatewaySyncErrorCode=" + gatewaySyncErrorCode
                + ", gatewaySyncErrorDescription=" + gatewaySyncErrorDescription
                + ", gatewaySyncStatus=" + gatewaySyncStatus + ", mainReference=" + mainReference
                + ", orderCardReference=" + orderCardReference + ", orderStatus=" + orderStatus
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", processedDate="
                + processedDate + ", purchaseCategoryCode=" + purchaseCategoryCode
                + ", purchaseCategoryId=" + purchaseCategoryId + ", purchaseCategoryName="
                + purchaseCategoryName + ", submittedDate=" + submittedDate + ", syncProcessedDate="
                + syncProcessedDate + ", syncRequestedDate=" + syncRequestedDate + ", vRN=" + vRN
                + ", orderRequestId=" + orderRequestId + ", expiryDate=" + expiryDate
                + ", clientReferenceId=" + clientReferenceId + ", statusDescription="
                + statusDescription + ", colCoId=" + colCoId + "]";
    }

    /**
     * Builds a new {@link OrderCardEnquiry.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrderCardEnquiry.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .mainReference(getMainReference())
                .orderCardReference(getOrderCardReference())
                .payerId(getPayerId());
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.bCOReference = internalGetBCOReference();
        builder.bCORowNumber = internalGetBCORowNumber();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.cardId = internalGetCardId();
        builder.cardPAN = internalGetCardPAN();
        builder.cardTypeCode = internalGetCardTypeCode();
        builder.cardTypeId = internalGetCardTypeId();
        builder.cardTypeName = internalGetCardTypeName();
        builder.driverName = internalGetDriverName();
        builder.errorCode = internalGetErrorCode();
        builder.errorDescription = internalGetErrorDescription();
        builder.gatewaySyncErrorCode = internalGetGatewaySyncErrorCode();
        builder.gatewaySyncErrorDescription = internalGetGatewaySyncErrorDescription();
        builder.gatewaySyncStatus = internalGetGatewaySyncStatus();
        builder.orderStatus = internalGetOrderStatus();
        builder.payerNumber = internalGetPayerNumber();
        builder.processedDate = internalGetProcessedDate();
        builder.purchaseCategoryCode = internalGetPurchaseCategoryCode();
        builder.purchaseCategoryId = internalGetPurchaseCategoryId();
        builder.purchaseCategoryName = internalGetPurchaseCategoryName();
        builder.submittedDate = internalGetSubmittedDate();
        builder.syncProcessedDate = internalGetSyncProcessedDate();
        builder.syncRequestedDate = internalGetSyncRequestedDate();
        builder.vRN = internalGetVRN();
        builder.orderRequestId = internalGetOrderRequestId();
        builder.expiryDate = internalGetExpiryDate();
        builder.clientReferenceId = internalGetClientReferenceId();
        builder.statusDescription = internalGetStatusDescription();
        builder.colCoId = internalGetColCoId();
        return builder;
    }

    /**
     * Class to build instances of {@link OrderCardEnquiry}.
     */
    public static class Builder {
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<Integer> bCOReference;
        private OptionalNullable<Integer> bCORowNumber;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> cardTypeCode;
        private OptionalNullable<Integer> cardTypeId;
        private OptionalNullable<String> cardTypeName;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> errorCode;
        private OptionalNullable<String> errorDescription;
        private OptionalNullable<String> gatewaySyncErrorCode;
        private OptionalNullable<String> gatewaySyncErrorDescription;
        private OptionalNullable<String> gatewaySyncStatus;
        private Integer mainReference;
        private Integer orderCardReference;
        private OptionalNullable<String> orderStatus;
        private Integer payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> processedDate;
        private OptionalNullable<String> purchaseCategoryCode;
        private OptionalNullable<Integer> purchaseCategoryId;
        private OptionalNullable<String> purchaseCategoryName;
        private OptionalNullable<String> submittedDate;
        private OptionalNullable<String> syncProcessedDate;
        private OptionalNullable<String> syncRequestedDate;
        private OptionalNullable<String> vRN;
        private OptionalNullable<String> orderRequestId;
        private OptionalNullable<String> expiryDate;
        private OptionalNullable<String> clientReferenceId;
        private OptionalNullable<String> statusDescription;
        private OptionalNullable<Integer> colCoId;



        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for bCOReference.
         * @param  bCOReference  Integer value for bCOReference.
         * @return Builder
         */
        public Builder bCOReference(Integer bCOReference) {
            this.bCOReference = OptionalNullable.of(bCOReference);
            return this;
        }

        /**
         * UnSetter for bCOReference.
         * @return Builder
         */
        public Builder unsetBCOReference() {
            bCOReference = null;
            return this;
        }

        /**
         * Setter for bCORowNumber.
         * @param  bCORowNumber  Integer value for bCORowNumber.
         * @return Builder
         */
        public Builder bCORowNumber(Integer bCORowNumber) {
            this.bCORowNumber = OptionalNullable.of(bCORowNumber);
            return this;
        }

        /**
         * UnSetter for bCORowNumber.
         * @return Builder
         */
        public Builder unsetBCORowNumber() {
            bCORowNumber = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for cardTypeCode.
         * @param  cardTypeCode  String value for cardTypeCode.
         * @return Builder
         */
        public Builder cardTypeCode(String cardTypeCode) {
            this.cardTypeCode = OptionalNullable.of(cardTypeCode);
            return this;
        }

        /**
         * UnSetter for cardTypeCode.
         * @return Builder
         */
        public Builder unsetCardTypeCode() {
            cardTypeCode = null;
            return this;
        }

        /**
         * Setter for cardTypeId.
         * @param  cardTypeId  Integer value for cardTypeId.
         * @return Builder
         */
        public Builder cardTypeId(Integer cardTypeId) {
            this.cardTypeId = OptionalNullable.of(cardTypeId);
            return this;
        }

        /**
         * UnSetter for cardTypeId.
         * @return Builder
         */
        public Builder unsetCardTypeId() {
            cardTypeId = null;
            return this;
        }

        /**
         * Setter for cardTypeName.
         * @param  cardTypeName  String value for cardTypeName.
         * @return Builder
         */
        public Builder cardTypeName(String cardTypeName) {
            this.cardTypeName = OptionalNullable.of(cardTypeName);
            return this;
        }

        /**
         * UnSetter for cardTypeName.
         * @return Builder
         */
        public Builder unsetCardTypeName() {
            cardTypeName = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for errorCode.
         * @param  errorCode  String value for errorCode.
         * @return Builder
         */
        public Builder errorCode(String errorCode) {
            this.errorCode = OptionalNullable.of(errorCode);
            return this;
        }

        /**
         * UnSetter for errorCode.
         * @return Builder
         */
        public Builder unsetErrorCode() {
            errorCode = null;
            return this;
        }

        /**
         * Setter for errorDescription.
         * @param  errorDescription  String value for errorDescription.
         * @return Builder
         */
        public Builder errorDescription(String errorDescription) {
            this.errorDescription = OptionalNullable.of(errorDescription);
            return this;
        }

        /**
         * UnSetter for errorDescription.
         * @return Builder
         */
        public Builder unsetErrorDescription() {
            errorDescription = null;
            return this;
        }

        /**
         * Setter for gatewaySyncErrorCode.
         * @param  gatewaySyncErrorCode  String value for gatewaySyncErrorCode.
         * @return Builder
         */
        public Builder gatewaySyncErrorCode(String gatewaySyncErrorCode) {
            this.gatewaySyncErrorCode = OptionalNullable.of(gatewaySyncErrorCode);
            return this;
        }

        /**
         * UnSetter for gatewaySyncErrorCode.
         * @return Builder
         */
        public Builder unsetGatewaySyncErrorCode() {
            gatewaySyncErrorCode = null;
            return this;
        }

        /**
         * Setter for gatewaySyncErrorDescription.
         * @param  gatewaySyncErrorDescription  String value for gatewaySyncErrorDescription.
         * @return Builder
         */
        public Builder gatewaySyncErrorDescription(String gatewaySyncErrorDescription) {
            this.gatewaySyncErrorDescription = OptionalNullable.of(gatewaySyncErrorDescription);
            return this;
        }

        /**
         * UnSetter for gatewaySyncErrorDescription.
         * @return Builder
         */
        public Builder unsetGatewaySyncErrorDescription() {
            gatewaySyncErrorDescription = null;
            return this;
        }

        /**
         * Setter for gatewaySyncStatus.
         * @param  gatewaySyncStatus  String value for gatewaySyncStatus.
         * @return Builder
         */
        public Builder gatewaySyncStatus(String gatewaySyncStatus) {
            this.gatewaySyncStatus = OptionalNullable.of(gatewaySyncStatus);
            return this;
        }

        /**
         * UnSetter for gatewaySyncStatus.
         * @return Builder
         */
        public Builder unsetGatewaySyncStatus() {
            gatewaySyncStatus = null;
            return this;
        }

        /**
         * Setter for mainReference.
         * @param  mainReference  Integer value for mainReference.
         * @return Builder
         */
        public Builder mainReference(Integer mainReference) {
            this.mainReference = mainReference;
            return this;
        }

        /**
         * Setter for orderCardReference.
         * @param  orderCardReference  Integer value for orderCardReference.
         * @return Builder
         */
        public Builder orderCardReference(Integer orderCardReference) {
            this.orderCardReference = orderCardReference;
            return this;
        }

        /**
         * Setter for orderStatus.
         * @param  orderStatus  String value for orderStatus.
         * @return Builder
         */
        public Builder orderStatus(String orderStatus) {
            this.orderStatus = OptionalNullable.of(orderStatus);
            return this;
        }

        /**
         * UnSetter for orderStatus.
         * @return Builder
         */
        public Builder unsetOrderStatus() {
            orderStatus = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for processedDate.
         * @param  processedDate  String value for processedDate.
         * @return Builder
         */
        public Builder processedDate(String processedDate) {
            this.processedDate = OptionalNullable.of(processedDate);
            return this;
        }

        /**
         * UnSetter for processedDate.
         * @return Builder
         */
        public Builder unsetProcessedDate() {
            processedDate = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryCode.
         * @param  purchaseCategoryCode  String value for purchaseCategoryCode.
         * @return Builder
         */
        public Builder purchaseCategoryCode(String purchaseCategoryCode) {
            this.purchaseCategoryCode = OptionalNullable.of(purchaseCategoryCode);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryCode.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryCode() {
            purchaseCategoryCode = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryId.
         * @param  purchaseCategoryId  Integer value for purchaseCategoryId.
         * @return Builder
         */
        public Builder purchaseCategoryId(Integer purchaseCategoryId) {
            this.purchaseCategoryId = OptionalNullable.of(purchaseCategoryId);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryId.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryId() {
            purchaseCategoryId = null;
            return this;
        }

        /**
         * Setter for purchaseCategoryName.
         * @param  purchaseCategoryName  String value for purchaseCategoryName.
         * @return Builder
         */
        public Builder purchaseCategoryName(String purchaseCategoryName) {
            this.purchaseCategoryName = OptionalNullable.of(purchaseCategoryName);
            return this;
        }

        /**
         * UnSetter for purchaseCategoryName.
         * @return Builder
         */
        public Builder unsetPurchaseCategoryName() {
            purchaseCategoryName = null;
            return this;
        }

        /**
         * Setter for submittedDate.
         * @param  submittedDate  String value for submittedDate.
         * @return Builder
         */
        public Builder submittedDate(String submittedDate) {
            this.submittedDate = OptionalNullable.of(submittedDate);
            return this;
        }

        /**
         * UnSetter for submittedDate.
         * @return Builder
         */
        public Builder unsetSubmittedDate() {
            submittedDate = null;
            return this;
        }

        /**
         * Setter for syncProcessedDate.
         * @param  syncProcessedDate  String value for syncProcessedDate.
         * @return Builder
         */
        public Builder syncProcessedDate(String syncProcessedDate) {
            this.syncProcessedDate = OptionalNullable.of(syncProcessedDate);
            return this;
        }

        /**
         * UnSetter for syncProcessedDate.
         * @return Builder
         */
        public Builder unsetSyncProcessedDate() {
            syncProcessedDate = null;
            return this;
        }

        /**
         * Setter for syncRequestedDate.
         * @param  syncRequestedDate  String value for syncRequestedDate.
         * @return Builder
         */
        public Builder syncRequestedDate(String syncRequestedDate) {
            this.syncRequestedDate = OptionalNullable.of(syncRequestedDate);
            return this;
        }

        /**
         * UnSetter for syncRequestedDate.
         * @return Builder
         */
        public Builder unsetSyncRequestedDate() {
            syncRequestedDate = null;
            return this;
        }

        /**
         * Setter for vRN.
         * @param  vRN  String value for vRN.
         * @return Builder
         */
        public Builder vRN(String vRN) {
            this.vRN = OptionalNullable.of(vRN);
            return this;
        }

        /**
         * UnSetter for vRN.
         * @return Builder
         */
        public Builder unsetVRN() {
            vRN = null;
            return this;
        }

        /**
         * Setter for orderRequestId.
         * @param  orderRequestId  String value for orderRequestId.
         * @return Builder
         */
        public Builder orderRequestId(String orderRequestId) {
            this.orderRequestId = OptionalNullable.of(orderRequestId);
            return this;
        }

        /**
         * UnSetter for orderRequestId.
         * @return Builder
         */
        public Builder unsetOrderRequestId() {
            orderRequestId = null;
            return this;
        }

        /**
         * Setter for expiryDate.
         * @param  expiryDate  String value for expiryDate.
         * @return Builder
         */
        public Builder expiryDate(String expiryDate) {
            this.expiryDate = OptionalNullable.of(expiryDate);
            return this;
        }

        /**
         * UnSetter for expiryDate.
         * @return Builder
         */
        public Builder unsetExpiryDate() {
            expiryDate = null;
            return this;
        }

        /**
         * Setter for clientReferenceId.
         * @param  clientReferenceId  String value for clientReferenceId.
         * @return Builder
         */
        public Builder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = OptionalNullable.of(clientReferenceId);
            return this;
        }

        /**
         * UnSetter for clientReferenceId.
         * @return Builder
         */
        public Builder unsetClientReferenceId() {
            clientReferenceId = null;
            return this;
        }

        /**
         * Setter for statusDescription.
         * @param  statusDescription  String value for statusDescription.
         * @return Builder
         */
        public Builder statusDescription(String statusDescription) {
            this.statusDescription = OptionalNullable.of(statusDescription);
            return this;
        }

        /**
         * UnSetter for statusDescription.
         * @return Builder
         */
        public Builder unsetStatusDescription() {
            statusDescription = null;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Builds a new {@link OrderCardEnquiry} object using the set fields.
         * @return {@link OrderCardEnquiry}
         */
        public OrderCardEnquiry build() {
            return new OrderCardEnquiry(accountId, accountNumber, bCOReference, bCORowNumber,
                    cardGroupId, cardGroupName, cardId, cardPAN, cardTypeCode, cardTypeId,
                    cardTypeName, driverName, errorCode, errorDescription, gatewaySyncErrorCode,
                    gatewaySyncErrorDescription, gatewaySyncStatus, mainReference,
                    orderCardReference, orderStatus, payerId, payerNumber, processedDate,
                    purchaseCategoryCode, purchaseCategoryId, purchaseCategoryName, submittedDate,
                    syncProcessedDate, syncRequestedDate, vRN, orderRequestId, expiryDate,
                    clientReferenceId, statusDescription, colCoId);
        }
    }
}
